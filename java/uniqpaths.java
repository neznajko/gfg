////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////     ////     //////////////////////////
////////////////////////     ////     //////////////////////////
/////////////////            ////     ////    //////////////////
////////////////////////     ////        ///////////////////////
////////////////////////     ////     //////////////////////////
////////////////////////       //     /////// //////////////////
//////////////////////    ////////            //////////////////
/////////////////    ///////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// 北、きた、ki-ta, north
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Unique Paths in a Grid
////////////////////////////////////////////////////////////////
// You are given a matrix grid of n x m size consisting of
// values 0 and 1. A value of 1 means that you can enter that
// cell and 0 implies that entry to that cell is not allowed.
// You start at the upper-left corner of the grid (1, 1) and you
// have to reach the bottom-right corner (n, m) such that you
// can only move in the right or down direction from every cell.
// Your task is to calculate the total number of ways of
// reaching the target modulo (10^9+7).  Note: The first (1, 1)
// and last cell (n, m) of the grid can also be 0
////////////////////////////////////////////////////////////////
// Input: n = 3, m = 3 grid[][] = {{1, 1, 1};
//                                 {1, 0, 1};
//                                 {1, 1, 1}}, Output: 2
// Explanation: ...
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(n*m)
// Expected Auxiliary Space: O(n*m)
////////////////////////////////////////////////////////////////
// 1 ≤ n*m ≤ 10^6
///////////////////////////////////////////////////////////////_
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//    ################               ''''''''''     ::::::::::::::::
// .. ## weiblichen ## Körper in der '' Höhe '' des :: Schambeins ::
//    ################               ''''''''''     ::::::::::::::::
// ========== 
// == bzw. == großen ** Rollhügels ** ( geometrische Körpermitte,
// ==========                               |||||||||||
// rote -- Pfeile -- ) in eine gleich lange || Ober- || und Unterlänge
// >> teilen >>.                            |||||||||||
// # female ' high : pubic bone = or * trochanter - arrow 
// | upper > divide
////////////////////////////////////////////////////////////////
import java.io.*;
import java.util.*;
////////////////////////////////////////////////////////////////
//
//  das Kätzchen - kitten                         das Kätzchen
//                                                das Kätzchen
//  das Hündhen - puppy                           das Kätzchen
//                                                das Kätzchen
//  der Wellensittich - budgerigar( parrot )      das Kätzchen
//                                                das Kätzchen
//  die Schlange - snake                          das Kätzchen
//                                                das Kätzchen
//  die Schieldkröte - turtle                     das Kätzchen
//
////////////////////////////////////////////////////////////////
class GFG{public static void main(String args[])throws IOException
{BufferedReader read=new BufferedReader(new InputStreamReader(
System.in));int t=Integer.parseInt(read.readLine());while(t-->0)
{String S[]=read.readLine().split(" ");int n=Integer.parseInt(S[0])
;int m=Integer.parseInt(S[1]);int [][]grid=new int[n][m];for(int 
i=0;i<n;i++){String S1[]=read.readLine().split(" ");for(int j=0;
j<m; j++){grid[i][j]=Integer.parseInt(S1[j]);}}Solution ob=new 
Solution();System.out.println(ob.uniquePaths(n,m,grid));}}}
////////////////////////////////////////////////////////////////
class Solution {
    void dump( int n, int m, int[][] grid ){
        StringBuilder sb = new StringBuilder();
        for( int i = 0; i < n; i++ ){
            for( int j = 0; j < m; j++ ){
                sb.append( grid[ i ][ j ]);
                sb.append( "\t" );
            }
            sb.append( "\n" );
        }
        System.out.println( sb.toString());        
    }
    int uniquePaths( int n, int m, int[][] grid ){
        if( grid[0][0] == 0 || grid[n-1][m-1] == 0 ){
            return 0;
        }
        int j = 1;
        for(; j < m && grid[0][j] == 1; ++j )
            ;
        for(; j < m; ++j ){
            grid[0][j] = 0;
        }
        int i = 1;
        for(; i < n && grid[i][0] == 1; ++i )
            ;
        for(; i < n; ++i ){
            grid[i][0] = 0;
        }
        for( i = 1; i < n; ++i ){
            for( j = 1; j < m; ++j ){
                if( grid[i][j] == 1 ){
                    grid[i][j] = grid[i-1][j] + grid[i][j-1];
                    grid[i][j] %= 1000000007;
                }
            }
        }
        return grid[n-1][m-1];
    }
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// 1 (o) Akira is a first-year student.
// 2 (x) Akira is a student of the University of America.
// 3 (x) Axira's major is history.
// 4 (x) Kate is a second year student.
// 5 (o) Kate's major is Japanese.
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// 
//  > oishi(      delicious ) おいしい
//  % sakana(          fish ) さかな
//  _ tonkatsu( pork cutlet ) とんかつ
//  * niku(            meat ) にく
//
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                1115 / 1115
// Total Points Scored:                                    4 / 4
// Your Total Score:                                        1438
// Total Time Taken:                                        1.82
