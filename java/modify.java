//88888888888888888888888888888888888888888888888888888888888888
//88888888888888888888888888888888888888888888888888888888888888
//88888888888888888888888888888888888888888888888888888888888888
//88888888888888888888888888888888888888888888888888888888888888
//88888888888888888888888888888888888888888888888888888888888888
//88888888888888888888888888888888888888888888888888888888888888
//88888888888888888888888888888888888888888888888888888888888888
//88888888888888888888888888888888888888888888888888888888888888
//88888888888888888888888      8          8888888888888888888888
//8888888888888888888888888888888888  88888888888888888888888888
//88888888888888888888888      8        888888888888888888888888
//88888888888888888888888888888888  88  888888888888888888888888
//88888888888888888888888      8          8888888888888888888888
//88888888888888888888888888888888888888888888888888888888888888
//88888888888888888888888      8          8888888888888888888888
//888888888888888888888888888888  888888  8888888888888888888888
//88888888888888888888888      8  888888  8888888888888888888888
//88888888888888888888888  88  8  888888  8888888888888888888888
//88888888888888888888888      8          8888888888888888888888
//88888888888888888888888  8888888888888888888888888888888888888
//88888888888888888888888888888888888888888888888888888888888888
//88888888888888888888888 l a n g u a g e 8888888888888888888888
//88888888888888888888888888888888888888888888888888888888888888
//88888888888888888888888888888888888888888888888888888888888888
//88888888888888888888888888888888888888888888888888888888888888
//88888888888888888888888888888888888888888888888888888888888888
//88888888888888888888888888888888888888888888888888888888888888
//88888888888888888888888888888888888888888888888888888888888888
// Add all greater values to every node in a BST, 語、go　ご
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Given a BST, modify it so that all greater values in the given 
// BST are added to every node.
////////////////////////////////////////////////////////////////
// Input: 50 Output: 350 330 300 260 210 150 80
//       /  \
//      /    \
//     30    70
//    /  \   / \  
//   20  40 60 80
// Explanation: The tree should be modified to following:
//        260
//       /   \
//      /     \
//    330     150
//    / \     / \
// 350  300 210 80
////////////////////////////////////////////////////////////////
// Input: 2
//       / \
//      1   5
//         / \
//        4   7
// Output: 19 18 16 12 7
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(N)
// Expected Auxiliary Space: O(Height of the BST)
////////////////////////////////////////////////////////////////
// 1<=N<=100000
////////////////////////////////////////////////////////////////
// .. die motiviert Skeletformen vereinfachten eingetragenen den
// mit Figur rechte Die <<< von <<<< rechts << nach << links <<<
////////////////////////////////////////////////////////////////
// to simplyfy //////////////////// vereinfachen ///////////////
/////////////////// to simplyfy ///////////////////// vereinfachen
/// vereinfachen ////////////////////// to simplify ////////////
////////////////////////////////////////////////////////////////
///////////////////////////////////////////////// register /////
// register ////////// eintragen ///////////////////////////////
//////////////////////////// register //////////////////////////
////// eintragen ////////////////////////////////////// eintragen
////////////////////////////////////// eintragen ///////////////
///////////// register//////////////////////////////////////////
////////////////////////////////////////////////////////////////
import java.io.*;
import java.util.*;
/////////////////////////////// - Wo ist das Hotel Adler bitte?
/////////////////////////////// - Gehen Sie hier rechts und dann  
///////////////////////////////   geradeaus.
///////////////////////////////                            .. oo
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
/////////// opposite ///////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////// gegenüber ///////////////////////////////////////////
////////// gegenüber ////////////////// gibt es ..? is .. there?
/////////// gegenüber ///////////////// is es weit? is it far?
/////////// gegenüber //////////////////////////////////////////
///////////// gegenüber ////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Node{int data;Node left,right;public Node(int d){data=d; 
left=right=null;}}//////////////////////////////////////////////
class GFG{static Node buildTree(String str){if(str.length()==0|| 
str.equals('N'))return null;String[]s=str.split(" ");Node root= 
new Node(Integer.parseInt(s[0]));Queue<Node> q=new LinkedList<
Node>();q.add(root);int i=1;while(!q.isEmpty()&&i<s.length){Node 
currNode=q.remove();String currVal=s[i];if(!currVal.equals("N")) 
{currNode.left=new Node(Integer.parseInt(currVal));q.add(currNode
.left);}i++;if(i>=s.length)break;currVal=s[i];if(!currVal.equals
("N")){currNode.right=new Node(Integer.parseInt(currVal));q.add(
currNode.right);}i++;}return root;}public static void main(String 
args[])throws IOException{BufferedReader br=new BufferedReader(new
InputStreamReader(System.in));int t=Integer.parseInt(br.readLine()
.trim());while(t>0){String s=br.readLine();Node root=buildTree(s);
Solution T=new Solution();root=T.modify(root);inorder(root);System
.out.println();t--;}}static void inorder(Node root){if(root==null)
return;inorder(root.left);System.out.print(root.data+" ");inorder
(root.right);}}/////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// 大がくせい｜です｜か。córrect 
// あした｜わたし｜は｜一人｜で｜えいご｜を｜みます。còrrect
// あした｜は｜一月｜みつ日｜です。cÖrrect
// やまだ｜さん｜の｜あし｜は｜大きい｜です。reccôrt
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Solution {
    int sum = 0;
    void reorder( Node node ){
        if( node == null )return;
        reorder( node.right );
        sum += node.data;
        node.data = sum;
        reorder( node.left );
    }
    public Node modify( Node root ){
        reorder( root );
        return root;
    }
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//// Ms. Lee, your major is literature, right? 
//// リーさんの｜せんこうは｜ぶんがくですね。
////
//// This is not meat, is it? 
//// これは｜にくじゃないですね。
////
//// Let me assure you. "Tonkatsu" is not fish.
//// とんかつは｜さかなじゃないですよ。
////
//// Mr. Smith is British.
//// スミスさんは｜イギリスじんですよ。
////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                    31 / 31
// Total Points Scored:                                    4 / 4
// Your Total Score:                                        1542
// Total Time Taken:                                        0.82
