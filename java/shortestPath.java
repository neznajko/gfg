////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////       
////////  ======================================================
////////  ======================================================
////////  ====                                                  
////////  ====  ||||||||||||||||||||||||||||||||||||||||||||||||
////////  ====  ||                        
////////  ====  ||  ºººººººººººººººººººººº2222222222222222222222
////////  ====  ||  ºººººººººººººººººººººº2222222222222222222222
////////  ====  ||  ºººººººººººººººººººººº2222222222222222222222
////////  ====  ||  ºººººººººººººººººº        222222222222222222
////////  ====  ||  ºººººººººººººººººº        222222222222222222
////////  ====  ||  ºººººººººººººººººº        222222222222222222
////////  ====  ||  ººº        ººººººº        2222222        222
////////  ====  ||  ººº        ººººººº        2222222        222
////////  ====  ||  ººº        ººººººº        2222222        222
////////  ====  ||  ___        _______        ¦¦¦¦¦¦¦        ¦¦¦
////////  ====  ||  ___        _______        ¦¦¦¦¦¦¦        ¦¦¦
////////  ====  ||  ___        _______        ¦¦¦¦¦¦¦        ¦¦¦
////////  ====  ||  ___                                      ¦¦¦
////////  ====  ||  ______________________¦¦¦¦¦¦¦¦¦¦¦        ¦¦¦
////////  ====  ||  ______________________¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
////////  ====  ||  ______________________¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
////////  ====  ||  ______________________¦¦¦¦¦¦¦¦¦¦¦¦ mountain
////////  ====  ||  ______________________¦¦¦¦¦¦¦¦¦¦¦¦                
//////////////////////////////////////////////////////
// Shortest path in Undirected Graph having unit distance
//////////////////////////////////////////////////////
// You are given an Undirected Graph having unit weight, Find the
// shortest path from src to all the vertex and if it is unreachable
// to reach any vertex, then return -1 for that vertex.
//////////////////////////////////////////////////////
// Input: n=9, m=10, edges=[[0,1],[0,3],[3,4],[4,5],[5,6],[1,2],
//                          [2,6],[6,7],[7,8],[6,8]], src=0
// Output: 0 1 2 1 2 3 3 4 4
//////////////////////////////////////////////////////
// Expected Time Complexity: O(N+E)
// Expected Space Complexity: O(N)
//////////////////////////////////////////////////////
import java.util.*;///////////////////////////////////
import java.io.*;/////////////////////////////////////
//////////////////////////////////////////////////////
class GFG {///////////////////////////////////////////
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);////////////////////
        int T = sc.nextInt();///////////////////////////////////
        while (T-- > 0) {///////////////////////////////////////
            int n = sc.nextInt();///////////////////////////////
            int m=sc.nextInt();/////////////////////////////////
            int[][] edge = new int[m][2];///////////////////////
            for(int i=0;i<m;i++){///////////////////////////////
                edge[i][0]=sc.nextInt();////////////////////////
                edge[i][1]=sc.nextInt();////////////////////////
            }///////////////////////////////////////////////////
            int src=sc.nextInt();///////////////////////////////
            Solution obj = new Solution();//////////////////////
            int res[] = obj.shortestPath(edge,n,m,src);/////////
            for(int i=0;i<n;i++){///////////////////////////////
                System.out.print(res[i]+" ");///////////////////
            }///////////////////////////////////////////////////
            System.out.println();///////////////////////////////
        }///////////////////////////////////////////////////////
    }///////////////////////////////////////////////////////////
}///////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// der(  ein ) Schornstein                               chimney
// das(  ein ) Dach                                         roof
// die( eine ) Sonne                                         sun
// der(  ein ) Vogel                                        bird
// das(  ein ) Nest                                         nest
// die( eine ) Katze                                         cat
// der(  ein ) Baum                                         tree
// das(  ein ) Fenster                                    window
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Solution {
    public int[] shortestPath( int[][] edges, int n, int m , int src ){
        int dist[] = new int[n];
        Arrays.fill( dist, -1 );
        @SuppressWarnings("unchecked")
        ArrayList<Integer>[] al = new ArrayList[n]; 
          for (int i = 0; i < n; i++) { 
            al[i] = new ArrayList<Integer>(); 
        } 
        for( int i = 0; i < m; ++i ){
            int u = edges[i][0];
            int v = edges[i][1];
            al[ u ].add( v );
            al[ v ].add( u );
        }
        dist[src] = 0;
        Deque<Integer> deq = new LinkedList<>();
        deq.offerLast( src );
        while(! deq.isEmpty()){
            int v = deq.pollFirst();
            for( int u: al[ v] ){
                if( dist[u] == -1 ){
                    dist[u] = dist[v] + 1;
                    deq.offerLast( u );
                }
            }
        }
        return dist;
    }
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// 1. my teacher わたしの　せんせい
// 2. my telephone number わたしの　でんわばんごう
// 3. my name わたしの　なまえ
// 4. Takashi's major たかしさんの　せんこう
// 5. Mary's friend メアリーさんの　ともだち
// 6. student of the University of London
//    ロンドンだいがくの　がくせい
// 7. teacher of the Japanese language 
//    にほんごの　せんせい
// 8. high school teacher こうこうの　せんせい
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                    51 / 51
// Total Points Scored:                                    4 / 4
// Your Total Score:                                        1366
// Total Time Taken:                                        0.26

