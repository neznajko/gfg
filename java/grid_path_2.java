////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
///////////. . . . . . . . . . . . . . . . . . . . . . . .     
///////////. . . . . . . . . . . . . . . . . . . . . . .`      C
///////////. . . . . . . . \ \ | . . . . . . . . . . .`        E
///////////. . . . . . . . \ \ \ . . . . . . . . . .`          N
///////////. . \ \ \ / \ \ \ \ \ \ \ \ \ \ \ . . .`            T
///////////. . \ \ \ . . . \ \ \ . . . \ \ \ . . .`.           R
///////////. . \ \ / . . . \ \ \ . . . \ \ \ . . . .`.         E
///////////. . \ \ \ . . . \ \ \ . . . \ \ \ . . . . .`.        
///////////. . \ \ \ . . . \ \ \ . . . \ / \ . . . . . .`.      
///////////. . \ \ \ \ \ \ \ \ \ \ \ \ \ / \ . . . . . . .`.    
///////////. . . . . . . . \ \ \ . . . . . . . . . . . . . .`.  
///////////. . . . . . . . \ \ \ . . . . . . . . . . . . . . .`.
///////////. . . . . . . . \ \ \ . . . . . . . . . . . . . . .` 
///////////. . . . . . . . \ \ \ . . . . . . . . . . . . . .`   
///////////. . . . . . . . . . . . . . . . . . . . . . . .`     
///////////. . . . . . . . . . . . . . . . . . . . . . .`       
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// 中( ちゅう )
////////////////////////////////////////////////////////////////
// Grid Path 2
////////////////////////////////////////////////////////////////
// You are given a grid of n * m having 0 and 1 respectively, 0 denotes
// space, and 1 denotes obstacle. Geek is located at top-left corner
// (i.e grid[0][0]) and wants to reach the bottom right corner of
// the grid. A geek can move either down or right at any point of
// time. return the total number of ways in which Geek can reach
// bottom right corner. answer may be large take the modulo by 1e9+7.
////////////////////////////////////////////////////////////////
// Input: n = 3, m = 3, grid= [[0,0,0],[0,1,0],[0,0,0]]
// Output: 2
// Explanation: ...
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(m*n)
// Expected Space Complexity: O(n)
////////////////////////////////////////////////////////////////
import java.util.*;/////////////////////////////////////////////
import java.lang.*;/////////////////////////////////////////////
import java.io.*;///////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class GFG {/////////////////////////////////////////////////////
    public static void main(String args[]) throws IOException {
        Scanner sc = new Scanner(System.in);////////////////////
        int t = sc.nextInt();///////////////////////////////////
        while (t-- > 0) {///////////////////////////////////////
            int N = sc.nextInt();///////////////////////////////
            int M = sc.nextInt();///////////////////////////////
            int[][] grid = new int[N][M];///////////////////////
            for (int i = 0; i < N; i++) {///////////////////////
                for (int j = 0; j < M; j++) {///////////////////
                    grid[i][j] = sc.nextInt();//////////////////
                }///////////////////////////////////////////////
            }///////////////////////////////////////////////////
            Solution obj = new Solution();//////////////////////
            int res = obj.totalWays(N, M, grid);////////////////
            System.out.println(res);////////////////////////////
        }///////////////////////////////////////////////////////
    }///////////////////////////////////////////////////////////
}///////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////  
// \\ie geht's? //////////////////////////////////////////////   sehr gut
////////////////////////////////////////////////////////////// > gut
//////////////////////////////////////////////////////////////   ganz gut
//////////////////////////////////////////////////////////////   es geht so
//////////////////////////////////////////////////////////////   nicht so gut
//////////////////////////////////////////////////////////////   furchtbar
//////////////////////////////////////////////////////////////  
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////_
class Solution {
    static void print_grid( int n, int m, int grid[][] ){
        for( int i = 0; i < n; ++i ){
            for( int j = 0; j < m; ++j ){
                System.out.print( grid[i][j] + " " );
            }
            System.out.println();
        }
        System.out.println();
    }
    static int totalWays( int n, int m, int grid[][] ){
        if( grid[0][0] == 1 ) return 0;
        grid[0][0] = 1;
        int j = 1;
        for(; j < m && grid[0][j] == 0; ++j ){
            grid[0][j] = 1;
        }
        for(; j < m; ++j ){
            grid[0][j] = 0;
        }
        int i = 1;
        for(; i < n && grid[i][0] == 0; ++i ){
            grid[i][0] = 1;
        }
        for(; i < n; ++i ){
            grid[i][0] = 0;
        }
        for( i = 1; i < n; ++i ){
            for( j = 1; j < m; ++j ){
                if( grid[i][j] == 0 ){
                    grid[i][j] = (grid[i-1][j] + grid[i][j-1]);
                    grid[i][j] %= 1000000007;
                } else {
                    grid[i][j] = 0;
                }
            }
        }
        return grid[n-1][m-1];
    }
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//　いまなんじですか。
//　１）さんじです。
//　２）くじです、きゅうじです。
//　３）じゅういちじです。
//　４）ななじです、しちじです。
//　５）にじはんです。
//　６）ようじはんです、しじはんです。
//　７）じゅうにじです。
//　８）ろくじです。
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                    92 / 92
// Total Points Scored:                                    4 / 4
// Your Total Score:                                        1358
// Total Time Taken:                                         0.8
