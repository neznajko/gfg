////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////                                                ////////
////////                                                ////////
////////    0000111122223333444455556666777788889999    ////////
////////    0888888888888888888888888888888888888888    ////////
////////    1\\\                                \\\\    ////////
////////    1'''    ''''''''''''''''''''''''    ''''    ////////
////////    2@@@    @@@@@@@@@@@@@@@@@@@@@@@@    @@@@    ////////
////////    2===    ===                  ===    ====    ////////
////////    3+++    ++++++++++    ++++++++++    ++++    ////////
////////    3\\\    \\\\\\\\\\    \\\\\\\\\\    \\\\    ////////
////////    4---    ----------    ----------    ----    ////////
////////    4,,,    ,,,,                ,,,,    ,,,,    ////////
////////    5```    ``````````    ``````````    ````    ////////
////////    5\\\    \\\\\\\\\\    \\    \\\\    \\\\    ////////
////////    6===    ==========    ==========    ====    ////////
////////    6///    //                    //    ////    ////////
////////    7:::    ::::::::::::::::::::::::    ::::    ////////
////////    7888    888888888888888888888888    8888    ////////
////////    8|||                                ||||    ////////
////////    8###    ########################    ####    ////////
////////    9444444444444444444444444444444444444444    ////////
////////    9.......................................    ////////
////////                                                ////////
////////                                                ////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// 国｜コkoクku｜くkuにni
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////       ///////
/////////////////////////////////////////////////       ////////
////////////////////////////////////////////////       /////////
///////////////////////////////////////       /\      //////////
// Maximum Intersecting Lines ////////       /  \    ///////////
/////////////////////////////////////       /    \  ////////////
////////////////////////////////////       /      \/////////////
///////////////////////////////////       //////////////////////
//////////////////////////////////       ///////////////////////
// N horizontal line segments are       arrangd on the X-axis of
// a 2D plane. The start and end       point of each line segmnt
// is givn in a Nx2 matrix lnes       [][]. Your task is to find
// the maaaa8iiimuum number of       intrsections possibe of any
// verticl line with the givn       N line segments.////////////
////////////////////////////       /////////////////////////////
///////////////////////////       //////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////// /////////////////////////
////////////////////////////////////    ////////////////////////
//////////////////////////////////       ///////////////////////
///////////////////////////////////       //////////////////////
////////////////////////////////////       /////////////////////
/////////////////////////////////////       ////////////////////
//////////////////////////////////////    //////////////////////
/////////////////////////////////////// ////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Input: N = 4 lines[][] = {{1,3}, {2,3}, {1,2}, {{{{{4,4}}}}}}
// Output: 3 Explanation: A verticl line at X = 2 passes through 
// {1,3}, {2,3}, {1,2}, i.e three of the given horizontal lines.
////////////////////////////////////////////////////////////////
// Input: N = 3 lnes[][] = {}{{1, 3}}}, {5, 6}, {3,4}} Output: 2
// Explanation: A vertical line at X = 3 passes thrgh two of the
// given horizontal lines which is the maximum possible.////////
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(N*log(N))
// Expected Auxiliary Space: O(N)
////////////////////////////////////////////////////////////////
// 1 ≤ N ≤ 10^5 
// -10^9 ≤ lines[i][0] ≤ 10^9
// lines[i][0] ≤ lines[i][1] ≤ 10^9
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////______////********//----------//''''///^^^^^^^//===========/
//// Die  //// männli // Körperge // in /// ihrer // umrißform /
//// THE  ////    ehc //    tlats // IN /// YOURS // OUTLINE S /
////______//// MALE   // BODY FOR //''''///       //      EPAH /
//////////////        //        M /////////^^^^^^^//           /
//////////////********//----------//////////////////           /
////////////////////////////////////////////////////===========/
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
import java.util.*;
import java.io.*;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// 8) Was machts du gern?
// ;, Ich male gern ..
// :( Aber ich koche nicht gern.
// 8. ...
//
// 2:) Was sind deine Hobbys?
// 8:, Ich bastele gern ..
// 8:D Und ich tanze gern.
// 2:| ...
//
// 28o Was machst du abends?
// G:, Ich lese Bücher ..
// G:' Oder ich fern und ich stricke.
// 28' ...
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class GFG { public static void main  ( String [  ] args ) throws 
IOException  {  BufferedReader  br  =  new  BufferedReader ( new 
InputStreamReader ( System.in )); int t = Integer.parseInt ( br.
readLine().trim()); while (t-- > 0) { int i = 0; int N = Integer
.parseInt(br.readLine().trim()); int lines[][] = new int[(int)(N
)][2]; for (int j = 0; j < 2; j++ ) { String inputLine2 [] = br.
readLine().trim().split(" "); for (i = 0; i < N; i++) { lines[i]
[ j] = Integer.parseInt( inputLine2 [ i ]); }} Solution ob = new 
Solution(); System.out.println(ob.maxIntersections(lines,N));}}}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//             +-------------------------+                    //
//             |       +-----------------|-----+              //
//             |       |       +--------+|     |              //
//     +-------|-------|+      |       +---------------+      //
//-----|-------|-------||------|-------|||-----|-------|------//
//    -1       0       11      2       333     4       5      //
////////////////////////////////////////////////////////////////
///////a///////a///////ab//////a///////abb/////b///////b////////
///////[///////[///////[[//////[///////[[[/////[///////[////////
///////4///////0///////14//////2///////320/////1///////3////////
///////]///////]///////]]//////]///////]]]/////]///////]////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Solution {
    int[] a;
    int[] b;
    int maxIntersections( int[][] lines, int n ){
        setup( lines, n );
        int ma8 = 0;
        int i = 0;
        int j = 0;
        int c = 0;
        while( i < n ){
            if( a[i] <= b[j] ){
                ++c;
                ++i;
            } else {
                ma8 = Math.max( ma8, c );
                --c;
                ++j;
            }
        }
        return Math.max( ma8, c );
    }
    void setup( int[][] lines, int n ){
        a = new int[n];
        b = new int[n];
        for( int j = 0; j < n; ++j ){
            a[j] = lines[j][0];
            b[j] = lines[j][1];
        }
        Arrays.sort( a );
        Arrays.sort( b );
    }
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// My birthday is on the fyorst.           
// わたし｜の｜たんじょうび｜は｜一日｜です。     
// たんじょうび、tanjoubi, birthday          
// ついたち (一日)、fyorst day of month      
//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\
// Are you university student?            
// 大がくせい｜です｜か。                    
// 大がくせい、daigakusei, university student
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
/////////////////////////////////////////////[ at a watch shop ]
// Attendant: いらっしゃいませ。( Welcome[ to our shop ])
// Customer( pointing at watch #1 ): How much is this watch?
// このとけいは｜いくらですか。
// Attendant: そのとけいは｜さんぜんえんです。(That watch is ¥3000)
// Customer( pointing at watch #1 ): How much is that watch?
// そのとけいは｜いくらですか。
// Attendant: このとけいは｜にせんはっぴゃくえんです。
// Customer( pointing at watch #３ ): How much is that watch?
// あのとけいは｜いくらですか。
// Attendant: あれは｜せんごひゃくえんです。
// Customer( desided on #3 ): Then, I'll take that watch.
// じゃあ、あのとけいを｜ください。
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
/////  /////  /////  /////  ////////////////////////////////////
       /////  /////  /////  /////  ////////////////////////////////////
/////  /////  /////  /////  ////////////////////////////////////
/////  /////  /////  /////  ////////////////////////////////////
/////  /////  /////  /////  ////////////////////////////////////
/////  /////  /////  /////  ////////////////////////////////////
/////  /////  /////  /////  ////////////////////////////////////
// Te   Case  Passe                                  1120 / 1120
// To  l Poi  s Sco  d:                                    4 / 4
// Yo   Tota  Score                                         1490
// To  l Tim  Taken                                         1.49
