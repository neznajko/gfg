////////////////////////////////////////////////////////////////
// ƒriends Ƥairing Ƥrobl[e]m
////////////////////////////////////////////////////////////////
// Ģiven N friends, each one can remain single; or can be paired
// up: with? some! other; friend. Ĕach friend can be paired only
// once.! ƒind out the total number of ways in which friends can
// remain single or can be paired up. Ƞote:: Śince answer can be
// very large, return your answer mod 10^9+7
//////////////////////////////////////////////////////////_/////
// ɩnput:: N = 3, ʘutput: 4, Ĕxplanation: {1},, {{2}}, {3}:: all
// single.? {1},, {2,3}:: 2 and 3 paired but 1 is single. {1,2},
// {3}: 1 and 2 are paired but 3 is single. {1,3},, {2}: 1 and 3
// are paired but 2 is single
////////////////////////////////////////////////////////////////
// Ƞote that {1,2} and {2,1} are considered same
////////////////////////////////////////////////////////////////
// Ĕxpected ťime Ɔomplexity: O(N)
// Ĕxpected Ǽuxiliary Śpace: O(1)
////////////////////////////////////////////////////////////////
// 1 ≤ N ≤ 10^4
////////////////////////////////////////////////////////////////
// Ǽlphabet: Ģ Ĕ Ƥ Ħ ƒ Ƞ Ǽ ť Ś Ɔ ɩ ʘ
////////////////////////////////////////////////////////////////
import java.io                                               .*;
import java.util                                             .*;
////////////////////////////////////////////////////////////////
class GfG{public static void main(String args[]){ Scanner sc=new
Scanner(System.in); int t =sc.nextInt(); while( t-->0){ int n=sc
.nextInt(); Solution ob = new Solution(); System.out.println( ob
.countFriendsPairings(n));}}}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////// 
// Ħ(n) = Ħ(n-1) + (n-1) Ħ(n-2)
// Ħ(1) = Ħ(0) = 1
////////////////////////////////////////////////////////////////
// Ħ(2) = Ħ(1) + 1 Ħ(0) =  1 +  1 =  2
// Ħ(3) = Ħ(2) + 2 Ħ(1) =  2 +  2 =  4
// Ħ(4) = Ħ(3) + 3 Ħ(2) =  4 +  6 = 10
// Ħ(5) = Ħ(4) + 4 Ħ(3) = 10 + 16 = 26
// ...
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Solution {
    static final int MA8N = 10000; // 10^4
    static long H[] = new long[ MA8N + 1 ];
    static int t = 1;
    static {
        H[0] = H[1] = 1;
    }
    public long countFriendsPairings( int n ){
        while( t < n ){
            ++t;
            H[t] = H[t-1] + (t-1)*H[t-2];
            H[t] %= 1000000007;
        }
        return H[n];
    }
}    
//////////////////////////////////////////////////////////////// 
//////////////////////////////////////////////////////////////// 
//////////////////////////////////////////////////////////////// 
//////////////////////////////////////////////////////////////// 
// Test Cases Passed:                              10210 / 10210
// Points Scored:                                          4 / 4
// Your Total Score:                                        1702
// Time Taken:                                              0.54
