/////. . . . . . . . . . . . . . . . . . . . / / / / / / / / / /
////// . . . . . . . . . . . . . . . . . . . / / / / / / / / / /
///////. . . . . . . . . . . . . . . . . . . . / / / / / / / / /
//////// . . . . . . . . . . . . . . . . . . . / / / / / / / / /
/////////. . . .                       . . . . . / / / / / / / /
////////// . . . ` ` ` ` ` ` ` ` ` ` ` . . . . . / / / / / / / /
///////////. . . `                   ` . . . . . . / / / / / / /
//////////// . . ` ` ` ` `   ` ` ` ` ` . . . . . . / / / / / / /
/////////////. .         `   `         . . . . . . . / / / / / /
////////////// .         `   ` .       . . . . . . . / / / / / /
///////////////.         `       ` .   . . . . . . . . / / / / /
///////////////\         `   ` .   .   . . . . . . . . / / / / /
///////////////\         `   `   ` .   . . . . . . . . . / / / /
///////////////\ \       `   `         . . . . . . . . . / / / /
///////////////\ \       `   `         . . . . . . . . . . / / /
///////////////\ \ \     `   `         . . . . . . . . . . / / /
///////////////\ \ \     ` ` `         . . . . . . . . . . . / /
///////////////\ \ \ \ . . . . . . . . . . . . . . . . . . . / /
///////////////////////. . . . . . . . . . . . . . . . . . . . /
//////////////////////// . . . . . . . . . . . . . . . . . . . /
/////////////////////////. . . . . . . . . . . . . . . . . . . .
////////////////////////// . . . u . n . d . e . r . . . . . . .
///////////////////////////. . . > . > . > . > . > . . . . . . .
//////////////////////////// . . . . . . . . . . . . . . . . . .
// 下（した）
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Delete all occurrences of a given key in a doubly linked list
////////////////////////////////////////////////////////////////
// You are given the head of a doubly Linked List and a Key. Your
// task is to delete all occurrences of the given key and return
// the new DLL.
////////////////////////////////////////////////////////////////
// Input: 3<->3<->10<->8<->4<->3<->5<->3 3
// Output: 10<->8<->4<->5
// Explanation: ...
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(N)
// Expected Auxiliary Space: O(1)
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
import java.util.*;/////////////////////////////////////////////
import java.io.*;///////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Node {////////////////////////////////////////////////////
    int data;///////////////////////////////////////////////////
    Node next, prev;////////////////////////////////////////////
}///////////////////////////////////////////////////////////////
//                    ///////////////////////////////////
//üs!                 /////////////////////////////////// - Tsch
//üs?                 /////////////////////////////////// - Tsch
//                    ///////////////////////////////////
//Wiedersehen!        /////////////////////////////////// - Auf 
//Bald!               /////////////////////////////////// - Bis 
//                    ///////////////////////////////////
// Nacht,             /////////////////////////////////// - Gute 
//                    ///////////////////////////////////
class GFG {/////////////////////////////////////////////////////
    static Node push(Node head, int new_data) {/////////////////
        Node new_node = new Node();/////////////////////////////
        new_node.data = new_data;///////////////////////////////
        new_node.prev = null;///////////////////////////////////
        new_node.next = head;///////////////////////////////////
        if (head != null) head.prev = new_node;/////////////////
        head = new_node;////////////////////////////////////////
        return head;////////////////////////////////////////////
    }///////////////////////////////////////////////////////////
    static void printList(Node temp) {//////////////////////////
        if (temp == null) System.out.print(-1);/////////////////
        while (temp != null) {//////////////////////////////////
            System.out.print(temp.data + " ");//////////////////
            temp = temp.next;///////////////////////////////////
        }///////////////////////////////////////////////////////
    }///////////////////////////////////////////////////////////
    public static void main(String args[]) {////////////////////
        Scanner sc = new Scanner(System.in);////////////////////
        int t = sc.nextInt();///////////////////////////////////
        while (t-- > 0) {///////////////////////////////////////
            Node head = null;///////////////////////////////////
            int n = sc.nextInt();///////////////////////////////
            int inp[] = new int[n];/////////////////////////////
            for (int i = 0; i < n; i++) inp[i] = sc.nextInt();//
            for (int i = n - 1; i >= 0; i--) {//////////////////
                head = push(head, inp[i]);//////////////////////
            }///////////////////////////////////////////////////
            int x = sc.nextInt();///////////////////////////////
            Solution obj = new Solution();//////////////////////
            head = obj.deleteAllOccurOfX(head, x);//////////////
            printList(head);////////////////////////////////////
            System.out.println();///////////////////////////////
        }///////////////////////////////////////////////////////
    }///////////////////////////////////////////////////////////
}///////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Solution {
    static Node deleteAllOccurOfX( Node node, int y ){
        if( node == null ){
            return null;
        }
        Node ahead = new Node();
        ahead.next = node;
        node.prev = ahead;
        Node p = node;
        while( p != null ){
            if( p.data == y ){
                p.prev.next = p.next;
                if( p.next != null ){
                    p.next.prev = p.prev;
                }
            }
            p = p.next;
        }
        return ahead.next;
    }
}///////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// a) 5 ご b) 9 きゅう、く c) 7 なな、しち d) 1 いち e) 10 じゅう
// f) 8 はち g) 2 に  h) 6 ろく i) 4 よん、し j) 3 さん
////////////////////////////////////////////////////////////////
// (a. 45 よんじゅうご )
// (b. 83 はちじゅうさん )
// (c. 19 じゅうきゅう )
// (d. 76 ななじゅうろく )
// (e. 52 ごじゅうに ) 
// (f. 100 びゃく )
// (g. 38 さんじゅうはち )
// (h. 61 ろくじゅういち )
// (i. 24 にじゅうし )
// (j. 97 きゅうじゅうしち )
////////////////////////////////////////////////////////////////
// (a' 5 + 3 = はち ) (b' 9 + 1 = じゅう) (c' 3 + 4 = なな)
// (d' 6 - 6 = れい) (e' 10 + 9 = じゅく) (f' 8 - 7 = いち)
// (g' 40 - 25 = じゅうご)                                     
///////////////////////////////////////////////////////////////'''''
/////////////////////////////////////////////////////////////// ナ '
/////////////////////////////////////////////////////////////// ニ '
/////////////////////////////////////////////////////////////// ヌ '
/////////////////////////////////////////////////////////////// ネ '
/////////////////////////////////////////////////////////////// ノ '
//                                                                 '
///////////////////////////////////////////////////////////////` ` `
// Test Cases Passed:                                2525 / 2525
// Total Points Scored:                                    4 / 4
// Your Total Score:                                        1354
// Total Time Taken:                                        1.65
