////////////// _____________________________
///////////// __________________888888888___     
//////////// ___________________8 8 8 8 8====== r e a d
/////////// ____________________888888888======::::::::  
////////// _____________________8 8 8 8 8======::::::::---
///////// ______________________888888888======::::::::---.....
//////// _______             ___8 8 8 8 8=    =::::::::---.....
///////                         88888              ::::---.....
//////////////  |||||||||||||   8 8 8              ::::---.....
/////////////                   888888888=    =::::::::---.....
////////////                                        :::---.....
///////////     |||||||||||||   @@@@                @@@@--..... 
//////////                      @@@@@@@@@@@@@@@@@@@@@@@@--..... 
/* * * * * * * *             * *@@                    @@ * * * *
 * * * * * * * *|||||||||||||* *@@                    @@ * * * *
 * * * * * * * *             * *@@@@@@@@@@@@@@@@@@@@@@@@ * * * *
 * * * * * * * *             * *@@@@@@    @@@@    @@@@@@ * * * *
 * * * * * * * *|||||||||||||* *@@@@@@    @@@@    @@@@@@ * * * *
 . * * * * * * *             * *@@@@@@    @@@@    @@@@@@ * * * .
 . . * * * * * *             * *@@@@@@    @@@@    @@@@@@ * * * .
 * . . * * * * *    |||||    * *@@@@@     @@@@    @@  @@ * * . *
 * * . . * * * *             * *@@@      @@@@@        @@ * * . *
 * * * . . * * *             * *@@@@@  @@@@@@@@      @@@ * . * *
 * * * * . . * *|||||||||||||* *@@@@@@@@@@@@@@@@@@@@@@@@ * . * *
 * * * * * . . *|||||||||||||* * * * * * * * * * * * * * . * * *
 * * * * * * . .|||||||||||||* * * * * * * * * * * * * * . * * */
// 132 Geeky Buildings, 083 読、よむ( yomu )
////////////////////////////////////////////////////////////////
// There are N buildings in Linear Land. They appear in a linear 
// line one after the other and their heights are given in the 
// array arr[]. Geek wants to select three buildings in Linear 
// Land and remodel them as recreational spots. The third of the 
// selected building must be taller than the first and shorter 
// than the second. Can geek build the three-building 
// recreational zone? 
////////////////////////////////////////////////////////////////
// Input: N = 6 arr[] = {4, 7, 11, 5, 13, 2}
// Output: True
// Explanation: [4, 7, 5] fits the condition. 
////////////////////////////////////////////////////////////////
// Input: N = 4 arr[] = {11, 11, 12, 9}
// Output: False
// Explanation: No 3 buildings fit the given condition. 
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(N)
// Expected Auxiliary Space: O(N)
////////////////////////////////////////////////////////////////
// 1 ≤ N ≤ 10^4
// 1 ≤ arr[i] ≤ 10^5
////////////////////////////////////////////////////////////////
// [ Der | Aufbau ; eines \ Ordnungsgefüges , zur ` männlichen |
// Gestalt ]                                     öó Was ist das?
////////////////////////////////////////////////////////////////
// aufbau - construction
// ordnung - order
// gefüge - structure
// gestalt - shape
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
import java.util.*;
import static java.lang.System.out;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class GFG { public static void main( String[] args ){ Scanner sc 
= new Scanner( System.in ); int t = sc.nextInt(); while( t --> 0 
){ int n = sc.nextInt(); int arr[]= new int[ n ]; for( int i = 0
; i < n; i++ )arr[i] = sc.nextInt(); Solution ob=new Solution();
if( ob.recreationalSpot( arr, n )) System.out.println( "True" );
else System.out.println( "False" ); }}} ////////////////////////
////////////////////////////////////////////////////////////////
// To have a solution here we must have this type of scenario:
//      |                
// a[k] -----------*     With inbetween values, like
//      |         / \    for i < j <= k: a[j-1] <= a[j], and
//      |        /   \   m = k + 1
//      |       /     \
// a[m] -------/-------*
//      |     /
// a[i] -----*
//      |
//      +----i-----k---m----------------------------------------
// There will bo no solution in this scenarios:
//      |                             *
//      |      *                     / \
//      |     / \                   /   ... etc.  
//      |    /   \                 /     
//      |   *     \               /     
//      |          \   *         /      
//      |           \ / \       /       
//      |            *   \     /
//      |                 \   /
//      |                  \ /
//      |                   *
//      +-------------------------------------------------------
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////
//// =]8c Was kostet eine Postkarte bitte?
////  z:" Sechzig Cent.
//// =]8C Was kosten die Trauben bitte?
////  Z:, Zwei Euro dreißig das Kilo.
////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Solution {
    ////////////////////////////////////////////////////////////
    static final int MINSIZ = 3;
    ////////////////////////////////////////////////////////////
    int[] a;
    int n;
    int j = 0;
    // Java has Stack implementation, but you can only peek the
    // last element, here we need to loop over the entire stack.
    List<Integer> vy = new ArrayList<>(); // valley
    List<Integer> pk = new ArrayList<>(); // peak
    ////////////////////////////////////////////////////////////
    void debug() {
        out.println( "j:" + j + " a:" + Arrays.toString( a ));
        out.println( "vy:" + Arrays.toString( vy.toArray()));
        out.println( "pk:" + Arrays.toString( pk.toArray()));
    }
    ////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////
    //////
    //////  I'm going to leave at one o'clock.
    //////  watashi wa ichiji ni demasu
    //////  わたし｜は｜一じ｜に｜出ます。
    //////  Còrrect!
    //////
    ////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////
    //////
    //////  Let's go shopping on Thursday.
    //////  mokuyoobi ni kaimu no shimashoo.
    //////  木よう日｜に｜かいむ｜の｜しましょう。
    //////  NEXT
    //////
    ////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////
    boolean check( int h ){
        int m = vy.size();
        for( int k = m - 1; k >= 0; --k ){
            if( vy.get( k ) < h && h < pk.get( k )){
                return true;
            }
        }
        return false;
    }
    ////////////////////////////////////////////////////////////
    void push( int valley, int peak ){
        vy.add( valley );
        pk.add( peak );
    }
    ////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////
    /////
    ///// (1) toire トイレ
    /////     soko そこ
    ///// (2) toshokan としょこん
    /////     asoko あそこ
    ///// (3) kutsu くつ
    /////     soko そこ
    ///// (4) Yamashita sensee やました｜せんせい
    /////     asoko あそこ
    ///// (5) menyuu メニュー
    /////     soko そこ
    ///// (6) jisho じしょ
    /////     koko ここ
    /////
    ////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////
    boolean recreationalSpot( int[] a, int n ){
        if( n < MINSIZ ){
            return false;
        }
        while( true ){
            while( true ){
                if( check( a[j] )){
                    return true;
                }
                if( ++j == n ){
                    return false;
                }
                if( a[j] > a[j - 1] ){
                    break;
                }
            }
            int valley = a[j - 1];
            while( true ){
                if( check( a[j] )){
                    return true;
                }
                if( ++j == n ){
                    return false;
                }
                if( a[j] < a[j - 1] ){
                    break;
                }
            }
            int peak = a[j - 1];
            push( valley, peak );
        }
    }
};
//////////////////////////////////// ///////////    ////////////
/////////////////////////////////// ///////////    //////////// 
////////////////////////////////// ///////////    //////////// /
///////////////////////////////// ///////////    //////////// / 
//////////////////////////////// ///////////    //////////// /  
/////////////////////////////// ///////////    //////////// /  /
////////////////////////////// ///////////    //////////// /  //
///////////////////////////// ///////////    //////////// /  ///
//////////////////////////// ///////////    //////////// /  ////
/////////////////////////// ///////////    //////////// /  /////
// Test Cases Passed:                                1115 / 1115
// Total Points Scored:                                    8 / 8
// Your Total Score:                                        1618
// Total Time Taken:                                        1.43
