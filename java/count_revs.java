///////////////8888888888888888888888888888888888888888/////////
///////////////8888888888888888888888888888888888888888/////////
///////////////8888888888888888888888888888888888888888/////////
///////////////888888888888888888888888888888 888888888/////////
///////////////8888888 88888888888888888888     8888888/////////
////________________     ________________         ______________
////______________         ________________         ____________
////____________         ____________________         __________
////__________         ________________________         ________
////________         ____________________________         ______
////______         _______`________________ _______     ________
////________     _______`````____________     _______ __________
////__________ _______`````````________         ________________
////____________________`````````____         __________________
///////////////88888888888````````8         88888888888/////////
///////////////8888888888888````8         8888888888888/////////
///////////////8888888888888888         888888888888888/////////
///////////////88888888888888         8``88888888888888/////////
///////////////888888888888         8``````888888888888/////////
///////////////8888888888         88`````````8888888888/////////
///////////////88888888         888888`````````88888888/////////
///////////////888888         8888888888`````````888888/////////
///////////////8888         88888888888888`````````8888/////////
///////////////8          888888888888888888``````````8/////////
/////////////           8888888888888888888888```````````///////
/////////            8888888888888888888888888888````````````///
/////////////    888888888888888888888888888888888888````///////
///////////////8888888888888888888888888888888888888888/////////
///////////////8888888888888888888888888888888888888888/////////
///////////////8888888888888888888888888888888888888888/////////
////////////////////////////////////////////////////////////////
////// Count the Reversals, 父、ちち( chichi )
////////////////////////////////////////////////////////////////
// Given a string S consisting of only opening and closing curly
// brackets '{' and '}' find out the minimum number of reversals
// required to convert the string into a balanced expression. A
// reversal means changing '{' to '}' or vice-versa.
////////////////////////////////////////////////////////////////
// Input:
// S = "}{{}}{{{"
// Output: 3
// Explanation: One way to balance is:
// "{{{}}{}}". There is no balanced sequence
// that can be formed in lesser reversals.
////////////////////////////////////////////////////////////////
// Input: 
// S = "{{}{{{}{{}}{{"
// Output: -1
// Explanation: There's no way we can balance
// this sequence of braces.
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(|S|).
// Expected Auxiliary Space: O(1).
////////////////////////////////////////////////////////////////
// 1 ≤ |S| ≤ 105
////////////////////////////////////////////////////////////////
// .. abgetragen und so ein Figurenrechteck als Hilfs- oder
// Kontrollrechteck gezeichnet, das auch die maximale 
// Breitenausdehnung ..                                        --
//////////////////////// //////////////////////// //////////////
// tragen -   to carry    als -        as
// rechteck - rectangle   hilfen -     to help
//   eck -    edje        zeichnen -   to draw
//   recht -  right       ausdehnung - extension
//////////////////////// //////////////////////// //////////////
//////////////////////// //////////////////////// //////////////
//////////////////////// //////////////////////// //////////////
//////////////////////// //////////////////////// //////////////
//////////////////////// //////////////////////// //////////////
//////////////////////// //////////////////////// //////////////
//////////////////////// //////////////////////// //////////////
////////////////////////\////////////////////////\//////////////
////////////////////////|////////////////////////|//////////////
////////////////////////|////////////////////////|//////////////
////////////////////////|////////////////////////|//////////////
////////////////////////|////////////////////////|//////////////
import java.io.         *                        ;
import java.util.*;
////////////////////////////////////////////////////////////////
/////////////////////////////////////////////   gehen - to go
/////////////////////////////////////////////-------------------
/////////////////////////////////////////////       Ich geh e
// Mddwoch / Wednessday   '//////////////////        Du geh st
// Nachmittag / afternoon ''///////////////// Er/Sie/Es geh t
// bis dann / until then  '''////////////////       Wir geh en
//                        ''''///////////////   Ihr/Sie geh t/en
//'''''''''''''''''''''''''''''//////////////       Sie geh en
///'''''''''''''''''''''''''''''/////////////-------------------
////'''''''''''''''''''''''''''''/////////////------------------
/////'''''''''''''''''''''''' > Gehen wir schwimmen am Mittwoch?
//////''''''''''''''''''''''' < 1001 0001 0111 0001                
///////'''''''''''''''''''''' > Ja, um drei Uhr?                   
////////''''''''''''''''''''' < 0010 1101 0101 0101           oo
/////////''''''''''''''''''''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//////////''''''''''''''''''''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
class GfG{ public static void main( String[]args){Scanner sc=new
Scanner(System.in);int t=sc.nextInt(); while(t-->0){String s=sc.
next();System.out.println(new Sol().countRev(s));}}}////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// 01234567 `   *   `   `   `   *   `   `   *
// }{{}}{{{ |   |   |   |   |   |   |   |   |
// ^^^^^^^^ |   |   |   |   |   |   |   |   |
// flip | 0 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |
// ryte | 0 | 1 | 2 | 3 | 2 | 1 | 2 | 3 | 4 |
//    j | ? | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
// flip + ryte / 2 = 3  |   |   |   |   |   |
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//// to-shi( year ) 年
//// maitoshi / watashi / wa / nihon / ni / ikimasu /
//// every year \ I \ <topic> \ Japan \ to \ go \
////                 \ <marker \
//// まい年｜わたし｜は｜日本｜に｜いきます。
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Sol {//                                
    boolean is_odd( int n ){//     ||      ||
        return ( n & 1 ) > 0;//    ||      || 
    }//                            ||      ||
    int countRev( String s ){//    ||      ||
        int n = s.length();//      ||oo   ..|
        if( is_odd( n )){//        ==========
            return -1;//           ==========
        }//                                  
        int flip = 0;//            ||      ||
        int ryte = 0;//            ||      ||
        for( int i = 0; i < n; ++i ){//    ||
            char c = s.charAt( i );//      ||
            if( c == '{' ){//      ||      ||
                ryte++;//          ||      ||      
            } else {//             ||      ||
                if( ryte == 0 ){// ||      ||
                    flip++;//      ||      ||
                    ryte++;//      ||      || 
                } else {//         ||      || 
                    ryte--;//      ||      || 
                }//                ||      || 
            }//                    ||    < 0100 1100 0111 0101
        }//                        ||    > O.K. Am Nachmittag!??
        return flip + ryte / 2;//  ||    < 0110 0111 0001
    }//                            ||    > Das geht. Bis dann.
}//                                ||      || oo
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//// ((( Listen )))
//// 1. newspaper / shinbun / しんぶん( ￥ 80 )
//// 2. umbrella / kasa / かさ（ ￥ 1000 )
//// 3. chocolate / chokoreeto / チョコレート ( ￥ ？ )
//// 4. cola / koora / コーラ ( ￥ 120 )
//// 5. gum / gamu / ガム ( ￥ 100 )
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                  200 / 200
// Total Points Scored:                                    4 / 4
// Your Total Score:                                        1522
// Total Time Taken:                                        0.51
