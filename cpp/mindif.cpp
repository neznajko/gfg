////////////////////////////////////////////////////////////////
// Find the Closest Element in BST
////////////////////////////////////////////////////////////////
// Given a BST and an integer. Find the least absolute
// difference between any node value of the BST and the given
// integer
////////////////////////////////////////////////////////////////
// Input: 10
//       /  \
//      2    11
//     / \ 
//    1   5
//       / \
//      3   6
//       \
//        4, K = 13
// Output: 2
// Explanation: The node that has value nearest to K is 11, so 
// the answer is 2
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(Height of the BST)
// Expected Auxiliary Space: O(Height of the BST)
////////////////////////////////////////////////////////////////
// 1 <= Number of nodes <= 10^5
// 1 <= Value stored at nodes(data), K <= 10^5
////////////////////////////////////////////////////////////////
# include <string>
# include <vector>
# include <queue>
# include <sstream>
# include <iostream>
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
struct Node{int data;Node*left;Node*right;Node(int val){data=val
;left=right=NULL;}};////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# define MAXDIF 100000
////////////////////////////////////////////////////////////////
class Solution {
private:
    int m = MAXDIF;
    int key;
    void search( Node* root );
public:
    int minDiff( Node* root, int key );
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// スーさんは今日うちに帰りません。
// Sue wird heute nicht nach Hause zurückkehren.
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int Solution::minDiff( Node* root, int key ){
    this->key = key;
    search( root );
    return m;
}
////////////////////////////////////////////////////////////////
void Solution::search( Node* root ){
    if(! root ){
        return;
    }
    int dif = root->data - key;
    m = min( m, abs( dif ));
    if(! dif ){
        return;
    }
    if( dif < 0 ){
        search( root->right );
    } else {
        search( root->left );
    }
}
////////////////////////////////////////////////////////////////
// 私はあした京都に行きます。
// Ich werde morgen nach Kyoto gehen.
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
Node*buildTree( string str ){ if( str.length()==0 ||str[0]=='N')
return NULL;vector<string>ip; istringstream iss(str); for(string
str;iss>>str;)ip.push_back(str);Node*root=new Node(stoi(ip[0]));
queue<Node*>queue;queue.push(root); int i=1;while(!queue.empty()
&&i<ip.size()){ Node*currNode= queue.front(); queue.pop();string 
currVal=ip[i]; if(currVal!="N") { currNode->left =new Node(stoi(
currVal));queue.push(currNode->left);}i++;if(i>=ip.size())break;
currVal=ip[i];if( currVal!="N"){ currNode->right= new Node(stoi(
currVal )); queue.push( currNode->right); } i++; } return root;}
////////////////////////////////////////////////////////////////
int main(){int t;string tc;getline(cin,tc);t=stoi(tc);while(t--)
{string s;getline(cin,s);Node*root1=buildTree(s);getline(cin, s)
;int k=stoi(s);Solution ob;cout<<ob.minDiff(root1,k);cout<<endl;
}}//////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                1120 / 1120
// Points Scored:                                          4 / 4
// Your Total Score:                                        1782 
// Time Taken:                                              0.09
