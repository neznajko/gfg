//           /   /                                
//   ___ ----/ s /              ----              
//    ___ ---/   /          #################           
//     ___ --/ e / -       #                 #          
//      ___ -/   / --      #  #############  #    
//       ___ / e / ---     #  #############  #    
//        ___/   / ----    #                 #    
//#        __///// -----   #  #############  #    
//##        __     ------  #  #############  #    
//###        _     ------- #                 #    
//####        ___ ---------#  #############  #    
//#####        ___ --------#  #############  #          
//######        ___ -------#                 #-         
//#######        ___ -------###  ######  ####--##       
//########        ___ ------###  #    #  #   -#  #          
//#########        ___ -####   ##     #  ######  #          
//##########        ___#     ##--      #        #--         
//###########        __ #####-----      ########----         
//############        ___ ---------              ----         
//############# 見、み                %%%%%%%%%%  ----  
//##############///////////////////////%%%%%%%%%% /----/////////
// ##############///////////////////////%%%%%%%%%% /----////////
//  ##############//////////////////////////////    /----///////
//            /////////////////////////         /    /----//////
//             /////////////////////////         /    /----/////
//              /////////////////////////         /    /////////
///              ///////////////////////////////////    ////////
/////////////////////////////////////////////////////    ///////
//////////////////////////////////////////////////////    //////

////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
// Quick Sort on Linked List
////////////////////////////////////////////////////////////////
// Sort the given Linked List using quicksort, which takes O(n^2)
// time in worst case and O(nlogn) in average and best cases, otherwise 
// you may get TLE.
////////////////////////////////////////////////////////////////
# include <iostream>
# include <cstdio>
# include <algorithm>
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
struct node{int data;struct node*next;node(int x){data=x;next=
NULL;}};
////////////////////////////////////////////////////////////////
void push(struct node**head_ref,int new_data){struct node*new_node 
=new node(new_data);new_node->next=(*head_ref);(*head_ref)=new_node
;}
////////////////////////////////////////////////////////////////
void printList(struct node *node){while(node!=NULL){printf("%d ",
node->data);node=node->next;}printf("\n");}
////////////////////////////////////////////////////////////////
void quickSort(struct node**headRef);
////////////////////////////////////////////////////////////////
int main(){int t,n,x;cin>>t;while(t--){cin>>n;n=n-1;cin>>x;node
*temp,*head=new node(x);temp=head;while(n--){cin>>x;temp->next=
new node(x);temp=temp->next;}quickSort(&head);printList(head);
while(head!= NULL){temp=head;head=head->next;free(temp);}}}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//
// Sie gehören, mit unterschiedlichen Zielen und Anwendungen, zum
// primären prektischen künstrelrischen Werkstattgebrauch.
//
// Sie[                                      zee ] they
// gehören[                          guh-huh-ren ] belong
// mit[                                     mitt ] with
// unterschiedlichen[        oon-ter-shee-dig-en ] different
// - Breakdown: 
//   - Unter[                            oon-ter ] between
//   - schiedlichen[                 shee-dig-en ] different
// Zielen[                             tsee-luhn ] goal
// und[                                     oont ] and
// Anwendungen[                 ahn-ven-doong-en ] applications
// zum[                                    tsoom ] to the
// primären[                        pree-may-ren ] primary
// praktischen[                    prahk-tish-en ] practical
// künstlerischen[           koonst-luh-ree-shen ] creative
// Werkstattgebrauch[ vairk-shtahht-ge-brah-ookh ] workshop application
// - Breakdown: 
//   - Werkstatt[                  vairk-shtahht ] workshop
//   - gebrauch[                    ge-brah-ookh ] application
//
// Please note that pronunciation can vary slightly depending on
// regional accents and dialects, but these are general guidelines
// for Standard German pronunciation.
//
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// die Großeltern                                   grandparents
// die Eltern                                            parents
// klein                                                   small
// sehr nett                                           very nice
// dick                                                      fat
// schlank                                                  thin
// jung                                                    young
// dunkelhaarig                                      dark-haired
// freundlich                                           friendly
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
            void quick_sort( node* ahead, node* guard ){
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
    if( ahead == guard ) return;
    auto stk{ ahead };
    auto p{ ahead->next };
    while( p != guard ){
        if( p->data < ahead->data ){
            swap( stk->next->data, p->data );
            stk = stk->next;
        }
        p = p->next;
    }
    swap( stk->data, ahead->data );
    quick_sort( ahead, stk );
    quick_sort( stk->next, guard );
}///////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
void quickSort( node** headptr ){
    node* ahead{ *headptr };
    if( ahead ){
        quick_sort( ahead, nullptr );
    }
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// 1. Japanese student にほんじんの　がくせい
// 2. Takeshi's telephone number たけしさんの　でんわばんごう
// 3. my friend わたしの　ともだち
// 4. English-language teacher えいごの　せんせい
// 5. Michiko's major みちこさんの　せんこう
////////////////////////////////////////////////////////////////
// i-ku-ra( いくら ) how much
// ...e-n( 〜えん ) ...yen
// ta-ka-i( たかい  ) expensive
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////// i  い
////////////////////////////////////////////////////////// ku く
////////////////////////////////////////////////////////// ra ら
////////////////////////////////////////////////////////// e  え
////////////////////////////////////////////////////////// n  ん
/////;//////////////////////////////////////////////////// ta た
//////;/////////////////////////////////////////////////// ka か
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                  100 / 100
// Total Points Scored:                                    4 / 4
// Your Total Score:                                        1406
// Total Time Taken:                                        0.01
