////////////////////////////////////////////////////////////////
// Sum of two large numbers
////////////////////////////////////////////////////////////////
// Given two strings denoting non-negative numbers X and Y.
// Calculate the sum of X and Y
////////////////////////////////////////////////////////////////
// Input: X = "25", Y = "23"
// Output: 48
// Explanation: The sum of 25 and 23 is 48
////////////////////////////////////////////////////////////////
// Input: X = "2500", Y = "23"
// Output: 2523
// Explanation: The sum of 2500 and 23 is 2523
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(|X|+|Y|)
// Expected Auxiliary Space: O(1)
////////////////////////////////////////////////////////////////
// 1 <= |X|,|Y| <= 10^5
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# include <iostream>
# include <algorithm> // reverse
# include <string>
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Solution {
private:
    static int to_int( char c )
    {
        return c - '0';
    }
    static char to_char( int n )
    {
        return '0' + n;
    }
    static char add( char a, char b, int& c )
    {
        int n = to_int( a ) + to_int( b ) + c;
        c = n / 10;
        return to_char( n % 10 );
    }
    static void preprocessor( string &s );
    static void compile( string &s, int m );
public:
    string findSum( string& a, string& b );
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// (1) aufstehen｜起きる｜起きます｜起きませ
// (2) sehen｜見る｜見ます｜見ません
// (3) essen｜たべる｜たべます｜たべません
// (4) schlafen｜寝る｜寝ます｜寝ません
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// (5) sprechen｜話す|はなします｜はなしません
// (6) hören｜聞く｜ききます｜ききません
// (7) gehen｜行く｜いきます｜いきません
// (8) lesen｜読む｜よみます｜よみません
// (9) trinken｜飲む｜のみます｜のみません
// (a) zurükkehren｜帰る｜かえります｜かえりません
////////////////////////////////////////////////////////////////
// (b) kommen｜くる｜きます｜きません
// (c) tun｜する｜します｜しません
// (d) studieren｜勉強｜べんきょうします｜べんきょうｈしません
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
void Solution::preprocessor( string &s )
{
    reverse( s.begin(), s.end());
    while( s.size() > 1 and s.back() == '0' ){
        s.pop_back();
    }
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
void Solution::compile( string &s, int m )
{
    for( int j = m - s.size(); j > 0; --j ){
        s.push_back( '0' );
    }
}
string Solution::findSum( string& a, string& b )
{
    preprocessor( a );
    preprocessor( b );
    int m = max( a.size(), b.size());
    compile( a, m );
    compile( b, m );
    int c = 0;
    for( int j = 0; j < m; ++j ){
        a[ j ] = add( a[ j ], b[ j ], c );
    }
    if( c ) a.push_back( '1' );
    reverse( a.begin(), a.end());
    return a;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// (1. Kf3  Nc3 1.Kd3 Nf2+ || B: Ke1, Nd1                     //
// (2. Rc2  Nd1            || W: Ke3, Rh2 <                   //
// (3. Re2+ Kf1            ||                                 //
// (4. Rd2  Ke1 4.Re8 Nf2  ||                                 //
// (5. Rc2  Kf1 5.Rh2 Nc3  ||                                 //
// (6. Ra2  Ke1 =          ||                                 //
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int main(){int t;cin>>t;while(t--){string x,y;cin>>x>>y;Solution 
ob;cout<<ob.findSum(x,y)<<"\n";}}///////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                1200 / 1200
// Points Scored:                                          4 / 4
// Your Total Score:                                        1818 
// Time Taken:                                              0.04
