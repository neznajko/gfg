//////////////////     .................................
//////////////////     .................................
//////////////////     .................................
//////////////////     .................................
//////////////////     .................................
//////////////////     ......   ........................
//////////////////     ..... `fa, ......................
//////////////////     ...... fEE ......................
//////////////////     [egijergijergerhas(sfhr834h3g3g3 
//////////////////            \GG                      .
//////////////////     ...... fGW ......................
////////////      l    ...... 'EA ......................
//////////////////     ...... b\=e[gijregerrgfklerg84 ..
//////////////    e    ..... ,Ee'        /ae         ...
//////////////////     ..... LE| ....... grs ...........
/////             f    .... |Ee ........ aaa ...........
//////////////////     ... fEe ......... eeb ...........
/////////////     t    .. eEo .......... 432 ...........
//////////////////      .Er` .. _03474!#$T#$%#ferghe8 ..
//////////////////         .....                     ...
//////////////////       ........                   ....
//////////////////     .................................
//////////////////     .................................
//////////////////     .................................
// Geek hates too many 1s, 左、ひだり
////////////////////////////////////////////////////////
// Given an non-negative integer n. You are only allowed
// to make set bit unset. You have to find the maximum
// possible value of query so that after performing the
// given operations, no three consecutive bits of the
// integer query are set-bits.
////////////////////////////////////////////////////////
// Input: n = 2, Output: 2
// Explanation: 2's binary form is 10, no 3 conse set 
// bits are here. So, 2 itself would be answer.
////////////////////////////////////////////////////////
// Input: n = 7, Output: 6
// Explanation: 7's binary form is ...00111. We can 
// observe that 3 consecutive bits are set bits. This 
// is not allowed. So, we can perfrom the operation of
// changing set bit to unset bit. Now, the number 
// becomes 6 that is ...00110. It satifies the given 
// condition. Hence, the maximum possible value is 6.
////////////////////////////////////////////////////////
// Expected Time Complexity: O(1)    \      \ 
// Expected Auxiliary Space: O(1)     \      \ 
///////////////////////////////////////      ///////////
// Constraints:                       \      \ 
// 0 ≤ n ≤ 10^9                        \      \
////////////////////////////////////////       /////////
//////////halves///////////////////////       //////////
//////////\\\\\\\\////////////////////       ///////////
//////////\\\\\\\\///////////////////       ////////////
///often//\\\\\\\\/////chintip//////       /////////////
///######/\\\\\\\\/////%%%%%%%%%%//       //////////////
///######/\\\\\\\\/////%%%%%%%%%%/       ///////////////
///######/\\\\\\\\/////%%%%%%%%%%       ////////////////
///######/\\\\\\\\/////%%%%%%%%%%      /////////////////
// Häufig halbiert die Kinnspitze das obere Viertel 
// (starker sehwarzer Pfeil).
////////////~~~~~~~~~///////////////////////////////////
////////////~~~~~~~~~///////////////////////////////////
////////////~~~~~~~~~///////////////////////////////////
////////////~~~~~~~~~///////////////////////////////////
////////////~~~~~~~~~///////////////////////////////////
////////////////black///////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////
# include <iostream>
# include <iomanip> // setw, setfill, hex
# include <climits> // CHAR_BIT
//////////%%%%%%%%%%%%%///////////////////#######///////
//        %%%%%%%%%%%%%        ///////////#######
//        %%%%%%%%%%%%%        ///////////#######
//     :. Zu Tisch bitte!      ///////////#######
//        %%%%%%%%%%%%%     :) Bedien dich bitte.
//     8| Ich habbe hunger.    ///////////#######
//        %%%%%%%%%%%%%     8. Danke./////#######
//        %%%%%%%%%%%%%        ///////////#######
//        %%%%%%%%%%%%%               ###########
//     :o Ich auch!%%%%            :D Guten Appetit!
//        %%%%%%%%%%%%%            8\ Danke gleichfalls!
//        %%%%%%%%%%%%%               ###########
//        %%%%%%%%%%%%%               ###########
// :. come to the table please        ###########
// 8| I'm hungy %%%%%%%               ###########
// :o me too %%%%%%%%%%               ###########
// :) help yourself, please           ###########
// 8. tnx                             ###########
// :) good appetite                   ###########  
// 8\ tnx, same to you                ###########
//////////////////////////////////////###########///////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
template <typename T>
T msb() {
    return 1<<( sizeof( T )*CHAR_BIT-1 ); 
}
////////////////////////////////////////////////////////
typedef unsigned u32;
////////////////////////////////////////////////////////
void debug( u32 n ) {
    cout << setw( 8 )
         << setfill( '0' ) 
         << hex
         << n
         << endl;
}
////////////////////////////////////////////////////////
class Solution {
public:
    u32 noConseBits( u32 n );
};
////////////////////////////////////////////////////////
constexpr int MAX_CONSE{ 3 };
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
u32 Solution::noConseBits( u32 n )
{
    int c{};
    for( u32 b{ msb<u32>() }; b; b >>= 1 ){
        if( b & n ){
            if( ++c == MAX_CONSE ){
                n &= ~b;
                c = 0;
            }
        } else {
            c = 0;
        }
    }
    return n;
}
////////////////////////////////////////////////////////
int main(){int tt;cin>>tt;Solution sol;while(tt--){int
n;cin>>n;int ans=sol.noConseBits(n);cout<<ans<<'\n';}}
////////////////////////////////////////////////////////
//        kissaten        
//         ginkoo c       
//         toire b a      
//     toshokan t a f        
// yuubinkyoku l o n e       
//            p i i k きさてん
//             o b l ぎんこう 
//              s r e 
//               t a t 
//                  r トイレ 
//                 o y 
//                  f としょかん
//                   f
//                    i
//                     c
//                      e 
//                       ゆうびんきょく
////////////////////////////////////////////////////////
// Test Cases Passed:                        1109 / 1109
// Total Points Scored:                            4 / 4
// Your Total Score:                                1454
// Total Time Taken:                                0.01
