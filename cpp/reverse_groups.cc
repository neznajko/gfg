////////////////////////////////////////////////////////////////
// #############################################################
// #############################################################
// #############################################################
// ############################       ##,`,`,`,`,`,`,`,`########
// #########-_-_-_-_-_-_#######       ##`,`,`,`,`,`,`,`,########
// #########_-_-_-_-_-_-#######       ##,`,`,`,`,`,`,`,`########
// ######                                                 ######
// ######                                                 ######
// ######       -_-_-_-_################,`,`,`,`,`,       ######
// ######       _-_-_-_-### #######################       ######
// ######       ##########      ###################       ######
// ######################      #################################
// #####################      ##################################
// #####\/\/\/\/\/\/\/\      #################  ################
// #####\/\/\/\/\/\/\/      ##################  ################
// #####\/\                                             ########
// #####\/\                                             ########
// #####\/\/\/\/\/\      #################      ################
// ###############      ##################      ################
// ##############           ############      ##################
// #############                ########      ##################
// #################                ##      ####################
// #####################                    ####################
// #########################                ####################
// ###################                          ################
// #############                                    ############
// #############                ########           #############
// ###############        ##################      ##############
// ###############  ############################ ###############
// #############################################################
// #############################################################
// ############################################# е ф т и н #####
// #############################################################
// #############################################################
//////////////////////////////////////////////////////////////// 
// 安い やすい
//////////////////////////////////////////////////////////////// 
// There will always be malicious people
// When you lie helpless on the floor,
// they’ll kick you, viciously
//
// They load their words with hate:
// “neger”, “woke”, “chaos”, “transgender”, “shame”, “etc.”
//
// These aren’t insults
// They are bullets
//
// They don’t want to humiliate you
// They want to kill you
//
// And if you survive, if you're successful,
// and their hate can't bring you down,
// they’ll spit on you with love
//
// Cheap love
// Love meant to flatten you
//
// If ignoring them is impossible,
// fight them
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Reverse array in groups
////////////////////////////////////////////////////////////////
// Given an array arr[] of positive integers. Reverse every
// sub-array group of size k.
////////////////////////////////////////////////////////////////
// Note: If at any instance, k is greater or equal to the array 
// size, then reverse the entire array. 
////////////////////////////////////////////////////////////////
// Examples:
////////////////////////////////////////////////////////////////
// Input: arr[] = [1, 2, 3, 4, 5], k = 3
// Output: [3, 2, 1, 5, 4]
// Explanation: First group consists of elements 1, 2, 3. Second
// group consists of 4, 5.
////////////////////////////////////////////////////////////////
// Input: arr[] = [5, 6, 8, 9], k = 5
// Output: [9, 8, 6, 5]
// Explnation: Since k is greater than array size, the entire
// array is reversed.
////////////////////////////////////////////////////////////////
// Constraints:
// 1 ≤ arr.size(), k ≤ 10^5
// 1 ≤ arr[i] ≤ 10^5
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# include <iostream>
# include <vector>
# include <algorithm>
# include <utility>
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
template<class T,template<class,class=allocator<T>>class C>
ostream&operator<<(ostream&os,const C<T>&items){os<<"[ ";for(
const auto&item:items){os<<item<<" ";}return os<<"]";}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Solution {
public:
    void reverseInGroups( vector<int>& a, int k) {
        if( k == 1 ){ return; }
        const int n = a.size();
        k = min( k, n );
        // 0 1 2 3 4
        // -   -   - 
        // 1 2 3 4 5
        // i, j = i + k - 1
        // j >= n, j = n - 1
        // old school loop
        int i = 0;
        while( i < n - 1 ){ // don't reverse a[n - 1] alone
            int j = min( i + k - 1, n - 1 );
            reverse( a, i, j );
            i = j + 1;
        }
    }
private:
    void reverse( vector<int>& a, int i, int j ){
        while( i < j ){
            swap( a[i++], a[j--] );
        }
    }
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int main()
{
    vector<int> a;
    while( cin.peek() != '\n' ){
        int y; cin >> y;
        a.push_back( y );
    }
    cin.ignore();
    int k; cin >> k;
    Solution().reverseInGroups( a, k );
    cout << a << endl;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                1120 / 1120
// Points Scored:                                          4 / 4
// Your Total Score:                                        1958 
// Time Taken:                                              0.29
