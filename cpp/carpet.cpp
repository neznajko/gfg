////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
//////================.`.`.`.`.`.`.`.`//////////////////
//////================.`.`.`.`.`.`.`.`//////////////////
//////================.`.`.`.`.`.`.`.`//////////////////
//////=====                      `.`.`//////////////////
//////=====                      `.`.`//////////////////
//////================.`.`.`.`.`.`.`.`//////////////////
//////================.`.`.`.`.`.`.`.`//////////////////
//////================.`.`.`.`.`.`.`.`//////////////////
//////`/`/`/`/`/`/`/`/~=~=~=~=~=~=~=~=//////////////////
//////`/`/`/`/`/`/`/`/~=~=~=~=~=~=~=~=//////////////////
//////`/`/`/`/`/`/`/`/~=~=~=~=~=~=~=~=//////////////////
//////`/                            ~=//////////////////
//////`/                            ~=//////////////////
//////`/`/`/`/`/`/`/`/~=~=~=~=~=~=~=~=//////////////////
//////`/`/`/`/`/`/`/`/~=~=~=~=~=~=~=~=//////////////////
//////`/`/`/`/`/`/`/`/~=~=~=~=~=~=~=~=//////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////                              に
////////                              ニ
// Carpet into Box /////////////////////////////////////
///////////////////////////////////////////////////////////
// There is a carpet of a size a*b [length*breadth]. You///
// are given a box of size c*d. The task is, one has to////
// fit the carpet in the box in a minimum number of moves./
// In one move, you can either decrease the length or the//
// breadth of the carpet by half (floor value of its half).
///////////////////////////////////////////////////////////
// Expected Time Complexity: O(max(log(a),log(b))) /////
// Expected Auxiliary Space: O(1) //////////////////////
////////////////////////////////////////////////////////
# include <iostream> ///////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
# include <algorithm> //////////////////////////////////
////////////////////////////////////////////////////////
using namespace std; ///////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
void order( int& a, int& b ){
    if( a > b ){
        swap( a, b );
    }
}
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
///////////////////////////////////////////////////////=
int carpet( int a, int b, int c, int d ){
    order( a, b );
    order( c, d );
    int n{};
    while( b > d ){
        b >>= 1;
        order( a, b );
        ++n;
    }
    while( a > c ){
        a >>= 1;
        order( a, b );
        ++n;
    }
    return n;
}
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
///////////////////////////////////////////////////////_
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
class Solution{
public:
    int carpetBox( int a, int b, int c, int d ){
        return carpet( a, b, c, d );
    }
};
////////////////////////////////////////////////////////
int main(){/////////////////////////////////////////////
    int t;//////////////////////////////////////////////
    cin>>t;/////////////////////////////////////////////
    while(t--){/////////////////////////////////////////
        int A,B,C,D;////////////////////////////////////
        cin>>A>>B>>C>>D;////////////////////////////////
        Solution ob;////////////////////////////////////
        int ans=ob.carpetBox(A,B,C,D);//////////////////
        cout<<ans<<endl;////////////////////////////////
    }///////////////////////////////////////////////////
}///////////////////////////////////////////////////////
////////////////////////////////////////////////////////
// Test Cases Passed:                        1067 / 1067
// Total Points Scored:                            4 / 4
// Your Total Score:                                1262
// Total Time Taken:                                0.01
