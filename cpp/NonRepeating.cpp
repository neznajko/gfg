////////////////////////////////////////////////////////////////
// Non Repeating Numbers
////////////////////////////////////////////////////////////////
// Given an array A containing 2*N + 2 positive numbers, out of 
// which 2*N numbers exist in pairs whereas the other two number 
// occur exactly once and are distinct. Find the other two numbers.
// Return in increasing order.
////////////////////////////////////////////////////////////////
// Input: N = 2, arr[] = { 1, 2, 3, 2, 1, 4 }
// Output: 3 4
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(N)
// Expected Space Complexity: O(1)
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# include <vector>
# include <iostream>
# include <set>
using namespace std;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Solution {
public:
    vector<int> singleNumber( const vector<int>& a );
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
vector<int> Solution::singleNumber( const vector<int>& a ){
    set<int> S;
    for( auto x: a ){
        if( S.count( x )){
            S.erase( x );
        } else {
            S.insert( x );
        }
    }
    return vector<int>( S.begin(), S.end());
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int main(){int T;cin>>T;while(T--){int n;cin>>n;vector<int>v(2*n
+2);for(int i=0;i<2*n+2;i++)cin>>v[i];Solution ob;vector<int>ans
=ob.singleNumber(v);for(auto i:ans)cout<<i<<" ";cout<<"\n";}}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// log: There should be some trick here if O(1) space complexity,
// but didn't find it. In this solution I'm using a set which by 
// default is ordered in STL then looping through all values and 
// inserting or erasing each value not present or present in the 
// set respectively. Upon finishing the set will contain all non 
//                              repeating values in sorted order.
// Test Cases Passed:                                1131 / 1131
// Total Points Scored:                                    4 / 4
// Your Total Score:                                        1198
// Total Time Taken:                                        0.48
