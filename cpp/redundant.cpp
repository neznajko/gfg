////////////////////////////////////////////////////////////////

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\
  //\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\
//\\//\\//\\//\\//\\//\\//\\   \//\\//\\//\\//\\//\\//\\//\\//\\
  //\\//\\//\\   \//\\//\\//   /\\//\\//\\/           //\\//\\//\\
//\\//\\//\\//   /\\/   //\\   \//\\//\\// r   v   R /\\//\\//\\
  //\\//\\//\\   \//\   \\//   /\\//\\//\\   i   e   \//\\//\\//\\
//\\//\\//\\//   /\\/   //\\   \//\\//\\//\           \\//\\//\\
  //\\//\\//\\   \//\   \\//   /\\//\\//\\//\\//\\//\\//\\//\\//\\
//\\//\\//\\//   /\\/   //\\   \//\\//\\//\\//\\//\\//\\//\\//\\
  //\\//\\//\   \\//\   \\//   /\\//\\//\\//\\//\\//\\//\\//\\//\\
//\\//\\//\\/  \//\\/   //\\   \//\\//\\//\\//\\//\\//\\//\\//\\
  //\\//\\// \//\\//\\//\\//   /\\//\\//\\//\\//\\//\\//\\//\\//\\
//\\//\\//\\//\\//\\//\\//\\   \//\\//\\//\\//\\//\\//\\//\\//\\
  //\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\
//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\
  //\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\
//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\
// 川（かわ）
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////_
// Expression contains redundant bracket or not
////////////////////////////////////////////////////////////////
// Given a string of balanced expression, find if it contains a 
// redundant parenthesis or not. A set of parenthesis are redundant
// if the same sub-expression is surrounded by unnecessary or multiple
// brackets. Print Yes if redundant, else No. Note: Expression may
// contain + , - , *, and / operators. Given expression is valid
// and there are no white spaces present.
////////////////////////////////////////////////////////////////
// Input: exp = ((a+b))
// Output: Yes
// Explanation: ((a+b)) can reduced to (a+b)
////////////////////////////////////////////////////////////////
// Input: exp = (a+b+(c+d))
// Output: No
// Explanation: ...
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(N)
// Expected Auxiliary Space: O(N)
////////////////////////////////////////////////////////////////
# include <iostream>
# include <string>
# include <vector>
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
class Solution{public:int checkRedundancy(string s);};
////////////////////////////////////////////////////////////////
int main(){int t;scanf("%d",&t);while(t--){string s;cin>>s;       
Solution obj;int res=obj.checkRedundancy(s);cout<<res<<endl;}}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// die( eine )Blume                                       flower
// das( ein  )Haus                                         house
// die( eine )Tür                                           door
// die( eine )Garage                                      garage
// das( ein  )Auto                                           car
// der( ein  )Zaun                                         fence
// der( ein  )Hund                                           dog
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
constexpr int LP = 0; // (
constexpr int OP = 1; // + - * /
constexpr int RP = 2; // )
////////////////////////////////////////////////////////////////
int Solution::checkRedundancy( string s ){
    vector<int> stk;
    stk.push_back( RP );
    for( char c: s ){
        switch( c ){
        case '(':
            stk.push_back( LP );
            break;
        case '+':
        case '-':
        case '*':
        case '/':
            if( stk.back() != OP ){
                stk.push_back( OP );
            }
            break;
        case ')':
            if( stk.back() != OP ){
                return 1;
            }
            stk.pop_back();
            stk.pop_back();
            break;
        default:
            break;
        }
    }
    return 0;
}
///////////////////////////////////////////////////////////////_
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//  1.( bossa nova )ぼさのば( bo-sa-no-ba )ボサノバ
//  2.( canoe )かぬー( ka-nu-u )カヌー
//  3.( herb )はーぶ( ha-a-bu )ハーブ
//  4.( bikinis )びきに( bi-ki-ni )ビキニ
//  5.( nuts )なっつ( na-t-tsu )ナッツ
//  6.( pet )ベっと( be-t-to )ベット
//  7.( connection )こね( co-ne )コネ
//  8.( happy )はっぴー( ha-p-pi-i )ハッピー
//  9.( necktie )ねくたい( ne-ku-ta-i )ケクタイ
// 10.( notebook )のーと( no-o-to )ノート
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                1020 / 1020
// Total Points Scored:                                    4 / 4
// Your Total Score:                                        1370
// Total Time Taken:                                        0.01
