// 
//              / ///////////////////////////////////////////// /
//             / ///////////////////////////////////////////// /
//            / ///////////////////////////////////////////// /
//           / /////////////////          ////////////////// /
//          / ///////////////////////////////////////////// /
//         / ///////                              //////// /
//        / ///////////////////////////////////////////// /
//       / //////////////                /////////////// /  
//      / ///////////////////////////////////////////// /   
//     / //////////////                /////////////// /    
//     \ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ \
//      \ \\\\\\\\\\\                      \\\\\\\\\\\\ \
//       \ \\\\\\\\\\\      \\\\\\\\\\      \\\\\\\\\\\\ \
//        \ \\\\\\\\\\\                      \\\\\\\\\\\\ \
//         \ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ \
//          \ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ \
//           \ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ \
//            \ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ \
//             \ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ \
//
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Swap Kth nodes from ends, 082 言、gen ケン say 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Given a singly linked list of size N, and an integer K. You 
 * need to swap the Kth node from the beginning and Kth node 
 * from the end of the linked list. Swap the nodes through the 
 * links. Do not change the content of the nodes.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Input: N = 4, K = 1, value[] = { 1,2,3,4 }
 * Output: 1
 * Explanation: Here K = 1, hence after swapping the 1st node 
 * from the beginning and end the new list will be 4 2 3 1.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Input: N = 5, K = 7, value[] = { 1,2,3,4,5 }
 * Output: 1
 * Explanation: K > N. Swapping is invalid. Return the head node 
 * as it is.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Expected Time Complexity: O(n)
 * Expected Auxillary space Complexity: O(1)
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * 1 <= N <= 10^3
 * 1 <= K <= 10^3
 *//////////////////////////////////////////////////////////////
// .. der Niederländer Samuel Hoogstraeten (l.u.) stellt u.a.
// Skelett- und Muskelmann vergleichend gegenüber.
// stellen - to put
// u.a.( unter anderem ) - by the way
// anderem - other
// gegenüber - opposite
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
#include <iostream>
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// dürfen - may
// apfel - apple
// kosten - to cost
// die Traube - grape
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
struct Node{int data; struct Node *next;Node(int x){data=x;next=
NULL;}};////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
Node*swapkthnode(Node*head,int num,int K);//////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
void addressstore(Node**arr,Node*head){ Node*temp =head;int i=0;
while(temp){arr[i]=temp;i++;temp=temp->next;}}//////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
bool check(Node**before, Node**after, int num, int K){if( K>num)
return 1;bool f=true;for(int i=0;i<num;i++){if((i==K-1)||(i==num
-K)){if(!((before[K-1]==after[num-K])&&(before[num-K]==after[K-1
]))) f=0;}else{if(before[i]!=after[i])f=0;}}return f;}//////////
////////////////////////////////////////////////////////////////
int main(){int T;cin>>T;while(T--){int num,K,firstdata; cin>>num
>>K;int temp;cin>>firstdata;Node*head=new Node(firstdata );Node*
tail=head; for( int i=0; i< num-1;i++){cin >>temp;tail->next=new 
Node( temp ); tail= tail-> next;}Node** before=new Node *[ num];
addressstore(before, head);head = swapkthnode(head,num,K);Node**
after=new Node*[ num]; addressstore(after,head);if(check(before,
after,num,K))cout<<1<<endl;else cout<<0<<endl;}}////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
static void debug_( Node* p ){
    while( p ){
        cout << p->data << " ";
        p = p->next;
    }
    cout << "=\n";
}
////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////// p -> q
static Node* unlinkq( Node* p ){
    Node* q{ p->next };
    p->next = q->next;
    return q;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
static void insertq( Node* p, Node* q ){
    q->next = p->next;
    p->next = q;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// ireru 入れるto put in
// I put it inside my bag.
// watashi no kaban no naka ni iremashita
// わたし｜の｜かばん｜の｜なか｜に｜入れました。
////////////////////////////////////////////////////////////////
// hairu 入るto enter
// Let's go inside.
// naka ni hairimashyoo
// なか｜に｜入りましょう。
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
Node* swapkthnode( Node* fish, int n, int k ){
    if( k > n ) return fish;
    Node* ahead{ new Node( 0 )};
    ahead->next = fish;
    Node* b{ ahead };
    int c{ 1 };
    k = min( k, n - k + 1 );
    while( c < k ){
        b = b->next;
        ++c;
    }
    Node* a{ b };
    k = n - k + 1;
    while( c < k ){
        b = b->next;
        ++c;
    }
    if( a == b ) return fish;
    if( a->next == b ){
        Node* a_{ unlinkq( a )};
        insertq( a->next, a_ );
    } else {
        Node* a_{ unlinkq( a )};
        Node* b_{ unlinkq( b )};
        insertq( a, b_ );
        insertq( b, a_ );
    }
    debug_( ahead->next );
    return ahead->next;
}
////////////////////////////////////////////////////////////////
// (1) sono kasa wa ikura desu ka( umbrella, 1,050 )
//     その｜かさ｜は｜いくら｜です｜か。
//     せんごじゅう｜えん｜です。
// (2) sono saifu wa ikura desu ka( wallet, 7,350 )
//     その｜さいふ｜は｜いくら｜です｜か。
//     ななせんさんびゃくごじゅう｜えん｜です。
// (3) kono enpitsu wa ikura desu ka( pencil, 53 )
//     この｜えんぴつ｜は｜いくら｜です｜か。
//     ごじゅうさん｜えん｜です。
// (4) ano tiishatsu wa ikura desu ka( T-shirt 3,780 )
//     あの｜Tシャツ｜は｜いくら｜です｜か。
//     さんぜんななひゃくはちじゅ｜えん｜です。
// (5) ano kutsu wa ikura desu ka( shoes 9,450 )
//     あの｜くつ｜は｜いくら｜です｜か。 
//     きゅうせんよんひゃくごじゅう｜えん｜です。
/////// ////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
/////// ////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
/////// ////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
/////// ////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
/////// ////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                  123 / 123
// Total Points Scored:                                    4 / 4
// Your Total Score:                                        1610
// Total Time Taken:                                        0.02
