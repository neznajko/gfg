////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//////////////                                                 
//////////////   c o m p                               oo 
//////////////   \\\\\\\                                ////////
//////////////   \\  \\\           ,,,,,,,,,,,,,,,      ////////
//////////////   \\\  \\           `.`.`.`.`.`.`.`      ////////
//////////////   \\\\\\\ a n y     ,,,,,,,,,,,,,,,      ////////
////////////888888888888888888     `.`.  `.`.`.`.`      ////////
////////////88              88     ,,,,  ,,,,,,,,,      ////////
////////////88888888888  8888||||||||||  ||||||||||||||||||/////
////////////88888888  8888888||||||||||  |||||||||||||||||| ////
////////////88888  888888\\\\\\\                 |||||||||| ////
////////////88  888888888\\  \\\|||||||  |||||||||||||||||| ////
////////////8888888888888\\\  \\|||||||  |||||||||||||||||| ////
//////////////     --  --\\\\\\\                            ////
//////////////     --  --        ==@@@@  @@                 ////
//////////////     --  --  ========@@@@  @@*********    ////////
//////////////     --  --  ===             *********    ////////
//////////////     ------  ========@@@@@@@@     ****    ////////
//////////////     ------  ========@@@@@@@@*********    ////////
//////////////     ------          @@@@@@@@*********    ////////
//////////////     ------          @@@@@@@@             ////////
///////////////////------//////////@@@@@@@@/////////////////////
///////////////////------//////////@@@@@@@@/////////////////////
///////////////////------//////////@@@@@@@@/////////////////////
///////////////////------//////////@@@@@@@@/////////////////////
///////////////////------//////////@@@@@@@@/////////////////////
// Make Binary Tree From Linked List, 社 シャ                  ..
////////////////////////////////////////////////////////////////
// Given a Linked List Representation of Complete Binary Tree.
// The task is to construct the Binary tree.
// Note: The complete binary tree is represented as a linked
// list in a way where if root node is stored at position i, its
// left, and right children are stored at position 2*i+1, 2*i+2
// respectively.
////////////////////////////////////////////////////////////////
// Input: N = 5, K = 1->2->3->4->5
// Output: 1 2 3 4 5
// Explanation: The tree would look like 1 Now, the level order
// traversal of the above tree is       / \ 1 2 3 4 5.
///////////////////////////////////////////\////////////////////
// Expected Time Complexity: O(N)     2     3
// Expected Auxiliary Space: O(N)    / \                ..
////////////////////////////////////4///5///////////////////////
// 1 <=  N <= 10^5
// 1 <= Ki <= 10^5
////////////////////////////////////////////////////////////////
// Mit -                With                           
// der Feststellung -   firm position                  ++
// daß -                that                        
// das Modell -         model                        ||||||
// nach -               after                        ||||||
// dem 8-Kopf-Kanon -   the 8-head canon             ||  ||
// proportioniert ist - is proportioned               |  |
// wurde -              was                           |  |
// von -                from                          |  |      
// der Mittelachse -    middle axis                ==========
// aus / je / eine / -  from / each / a /          fig. 1
// Kopflänge( KL ) -    head lenght
// ..                                                        ox
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
# include <iostream>
# include <vector>
# include <queue>
   ///////////   ///////////   ///////////   ///////////   /////
  ///////////   ///////////   ///////////   ///////////   //////
 ///////////   ///////////   ///////////   ///////////   ///////
//stehen/to stand////////   ////////:v/Wann/spielen/wir Tennis?/
//////////   ///////////   /////////:x Am/Dienstag?/   /////////
//wann/when////////////   //////////:o Ja,/prima./Bis Dienstag./
//Dienstag/Tuesday////   ///////////   ///////////   ///////////
//ja,/prima/yes/excellent//////////   ///////////   /////////// 
//////   ///////////   ///////////   ///////////   ///////////  
/////   ///////////   ///////////   ///////////   ///////////   
////   ///////////   ///////////   ///////////   ///////////   /
///   ///////////   ///////////   ///////////   ///////////   //
//   ///////////   ///////////   ///////////   ///////////   ///
struct Node{int data;struct Node*next;Node( int x ){data=x;next=
NULL;}};////////////////////////////////////////////////////////
struct TreeNode{int data; TreeNode*left;TreeNode*right;TreeNode(
int x){data=x;left=NULL;right=NULL;}};//////////////////////////
void push( struct Node **head_ref, int new_data ) { struct Node*
new_node = new Node( new_data ); new_node->next = (*head_ref);(*
head_ref)=new_node;}////////////////////////////////////////////
void convert(Node*head,TreeNode*&root);/////////////////////////
void lvl(TreeNode*r){if(r==NULL)return;queue<TreeNode*>q;q.push(
r);while(!q.empty()){TreeNode*j=q.front(); cout<<j->data<<" ";q.
pop();if(j->left)q.push(j->left);if(j->right)q.push(j->right);}}
////////////////////////////////////////////////////////////////
void reverses(Node**head){Node*prev=NULL;Node*cur=*head;Node*nxt
;while(cur!=NULL){nxt=cur->next;cur->next=prev;prev=cur;cur=nxt;
}*head=prev;}///////////////////////////////////////////////////
int main(){int T,i,n,l,k;cin>>T;while(T--){struct Node*head=NULL
;cin>>n;for(i=1;i<=n;i++){cin>>l;push(&head,l);}reverses(&head);
TreeNode*root=NULL;convert(head,root);if(root==NULL)cout<<"-1\n"
;lvl(root);cout<<endl;getchar();}}//////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# define key( P ) (P)->data
# define ryte right
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// ねん、年 year( ne-n )
// next year, ra-i-ne-n　らいねん
// let's go, i-ki-ma-sho-u　いきましょう
// らいねん｜日本｜に｜いきましょう。
// Let's go to Japan next year.
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
void convert( Node* ahead, TreeNode* &root ){
    root = new TreeNode( key( ahead ));
    vector<TreeNode*> vect{ nullptr, root };
    Node* n{ ahead->next };
    while( n ){
        vect.push_back( new TreeNode( key( n )));
        TreeNode* p{ vect[ vect.size()/2 ]};
        if( p->left ){
            p->ryte = vect.back();} 
        else {
            p->left = vect.back();}
        n = n->next;}}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// 1. いいえ、わたしは　かいしゃいん　じゃないです。
// 2. いいえ、わたしは　にほんじん　じゃないです。
// 3. いいえ、わたしの　せんこうは　れきしじゃないです。
// 4. いいえ、あれは　わたしの　じてんしゃじゃないです。
// 5. いいえ、それは　わたしの　かさじゃないです。
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                  315 / 315
// Total Points Scored:                                    4 / 4
// Your Total Score:                                        1518
// Total Time Taken:                                        0.07
