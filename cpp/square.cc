////////////////////////////////////////////////////////////////
// Largest square formed in a matrix
////////////////////////////////////////////////////////////////
// Given a binary matrix mat of size n*m, find out the maximum 
// length of a side of square sub-matrix with all 1s
////////////////////////////////////////////////////////////////
// Input: n = 2, m = 2, mat = {{1, 1}, 
//                             {1, 1}}
// Output: 2
////////////////////////////////////////////////////////////////
// Input: n = 2, m = 2, mat = {{0, 0}, 
//                             {0, 0}}
// Output: 0
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(n*m)
// Expected Auxiliary Space: O(n*m)
////////////////////////////////////////////////////////////////
// 1 ≤ n, m ≤ 100
// 0 ≤ mat[i][j] ≤ 1 
////////////////////////////////////////////////////////////////
# include <vector>
# include <iostream>
# include <algorithm>
using namespace std;
////////////////////////////////////////////////////////////////
typedef vector <vector <int>> mat_t;
////////////////////////////////////////////////////////////////
class Solution {
public:
    int maxSquare( int n, int m, mat_t& a );
};
////////////////////////////////////////////////////////////////
void guard( mat_t& a ){
    for( auto& vec: a ){
        vec.push_back( 0 );
    }
    a.push_back( vector <int> ( a[0].size(), 0 ));
}
////////////////////////////////////////////////////////////////
int Solution::maxSquare( int n, int m, mat_t& a ){
    guard( a );
    int s = 0;
    for( int i = n - 1; i >= 0; --i ){
        for( int j = m - 1; j >= 0; --j ){
            if(! a[i][j] ) continue;
            int d = min( a[i+1][j], a[i][j+1] );
            a[i][j] += d - 1 + !!a[i+d][j+d];
            s = max( s, a[i][j] );
        }
    }
    return s;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int main(){ int t; cin>>t; while(t--){ int n,m;cin>>n>>m;vector<
vector<int>>mat(n,vector<int>(m,0)); for(int i=0;i<n*m;i++)cin>>
mat[i/m][i%m]; Solution ob; cout<<ob.maxSquare(n,m,mat)<<"\n";}}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// あさごはん 朝ご飯
// ときどき
// 食べる
// メアリーさんはときどき朝ご飯を食べません。
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                1115 / 1115
// Points Scored:                                          4 / 4
// Your Total Score:                                        1778 
// Time Taken:                                               0.1
