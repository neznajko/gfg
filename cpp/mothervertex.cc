////////////////////////////////////////////////////////////////
// Mother Vertex
////////////////////////////////////////////////////////////////
// Given a Directed Graph, find a Mother Vertex in the Graph (if
// present). A Mother Vertex is a vertex through which we can
// reach all the other vertices of the Graph
////////////////////////////////////////////////////////////////
// Input: 2 -> 1 <- 0
// Output: -1
// Explanation: According to the given edges, no vertices are
// there from where we can reach all vertices. So, output is -1
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(V + E)
// Expected Space Complexity: O(V)
////////////////////////////////////////////////////////////////
// Constraints:
// 1 ≤ V ≤ 10^5
//////////////////////////////////////////////////////////////// ゆ
////////////88888888888888////////////////////////////////////// み
////////////8888888888888888////////////////////////////////////
////////////8888888888888888////////////////////////////////////
//////////////////////888888////////////////////////////////////
//////////////////////888888////////////////////////////////////
///////////```````````````88////////////////////////////////////
///////////```````````````//////////////////////////////////////
///////////```````````````//////////////////////////////////////
///////////|////////////////////////////////////////////////////
///////////|////////////////////////////////////////////////////
///////////|||||||||||||||//////////////////////////////////////
///////////|||||||||||        //////////////////////////////////
///////////|||||||||||        //////////////////////////////////
//////////////////////        //////////////////////////////////
//////////////////////        //////////////////////////////////
//////////////////////        //////////////////////////////////
//////////////////////        //////////////////////////////////
//////////////////////        //////////////////////////////////
# include <iostream>          
# include <vector>            
/////////////////////        ///////////////////////////////////
////////////////////        ////////////////////////////////////
/////////                  /////////////////////////////////////
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Solution 
{
private:
    int mother_vertex;
    void explore( int v );
    vector <bool> vztd;
    vector <int> * adj;
    bool tscheck();
    void _( int v );
    int c;
public:
	int findMotherVertex( int n, vector <int> * adj );
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int Solution::findMotherVertex( int n, vector <int> * adj )
{
    vztd = vector <bool> ( n, false );
    this->adj = adj;
    // dfs
    for( int v = 0; v < n; ++v ){
        if(! vztd[ v ]) explore( v );
    }
    return tscheck() ? mother_vertex : -1;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
void Solution::explore( int v )
{
    vztd[ v ] = true;
    for( int u: adj[ v ]){
        if(! vztd[ u ]) explore( u );
    }
    mother_vertex = v;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
bool Solution::tscheck()
{
    int n = vztd.size();
    for( int j = 0; j < n; ++j ){
        vztd[ j ] = false;
    }
    c = 0;
    _( mother_vertex );
    return c == n;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
void Solution::_( int v )
{
    vztd[ v ] = true;
    ++c;
    for( int u: adj[ v ]){
        if(! vztd[ u ]) _( u );
    }
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int main(){ int tc;cin>>tc;while(tc--){ int V,E;cin>>V>>E;vector
<int>adj[V]; for( int i=0;i<E; i++){ int u,v; cin>>u>>v; adj[u].
push_back(v);} Solution obj;int ans=obj.findMotherVertex(V, adj)
;cout<<ans<<"\n";}}/////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// 学校で勉強をします。Ich lerne in der Schule.
// うちでテレビを見ます。Ich sehe zu Hause fern.
// 喫茶店でコーヒーを飲みます。Ich trinke Kaffee im Café.
// 図書館に行きます。Ich gehe in die Bibliothek.
// 家に帰ります。Ich gehe nach Hause zurück.
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                1223 / 1223
// Points Scored:                                          4 / 4
// Your Total Score:                                        1822 
// Time Taken:                                              0.18
