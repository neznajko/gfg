////////////////////////////////////////////////////////////////
// Find duplicate rows in a binary matrix
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Given a boolean matrix of size RxC where each cell contains e
// ither 0 or 1, find the row numbers ( 0-based ) of row which a
// lready exists or are repeated
////////////////////////////////////////////////////////////////
// Input: R = 2, C = 2 matrix[][] = {{1, 0},
//                                   {1, 0}}
// Output: 1
// Explanation: Row 1 is duplicate of Row 0
////////////////////////////////////////////////////////////////
// Input: R = 4, C = 3 matrix[][] = {{1, 0, 0},
//                                   {1, 0, 0},               <<
//                                   {0, 0, 0},
//                                   {0, 0, 0}}               <<
// Output: 1 3 
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(R*C)
// Expected Auxiliary Space: O(R*C)
////////////////////////////////////////////////////////////////
// 1 ≤ R, C ≤ 10^3
// 0 ≤ matrix[i][j] ≤ 1
////////////////////////////////////////////////////////////////
# include <vector>
# include <iostream>
////////////////////////////////////////////////////////////////
using namespace std; 
////////////////////////////////////////////////////////////////
// あなた の 町 に 日本 の レストラン が ありますか。
// いいえ。
// あなた の 家 に 猫 が いますか。
// はい。
// あなた の 学校 に 何 が ありますか。
// ......
// あなた の 学校 に 日本人 の 学生 が いますか。
// ......
// デパート に 何 が ありますか。
//                                                   oo 
///////////#######################/////////// ////////////////// 
///////////#######################////////// ///////////////////
///////////###  ##################///////// ////////////////////
///////////                     ##//////// //////////////////// 
///////////##   #####   #####   ##/////// //////////////////// /
///////////##                   ##////// //////////////////// //
///////////##   #####   #####   ##///// //////////////////// ///
///////////##                   ##//// //////////////////// ////
///////////##   #############   ##/// //////////////////// /////
///////////##   #           #   ##// //////////////////// //////
///////////##   #   #####   #   ##/ //////////////////// ///////
///////////##   #           #   ## //////////////////// ////////
////////// ##   ### #   # # #   ##//////////////////// /////////
///////// /##   ##              ##/////////////////// //////////
//////// //##   #       #   #   ##////////////////// ///////////
/////// ///##                     ///////////////// /////////// 
////// ////##  ##  ######## #   ##//////////////// /////////// /
///// /////##en##############   ##/////////////// /////////// //
//// //////##################   ##////////////// /////////// ///
/// ////////////////////// //////////////////// /////////// ////
// ////////////////////// //////////////////// /////////// /////
struct Node {
    static int nfcons;
    Node* left = nullptr;
    Node* ryte = nullptr;
    Node() { ++nfcons; }
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// この 教室 に だれ が いますか。
// % , - - _ ! / \
// 動物園 に 何 が いますか。
// Non capisco!!
// あなた の 国 に 何 が ありますか。
// [ n o   c o mm e n t ]
// あなた の 家 に 何 が ありますか。
// 猫
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int Node::nfcons = 0;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
typedef vector <int> ivec_t;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Solution {
private:
    Node* trie = new Node();
    bool isdupl( const ivec_t& vec ){
        Node::nfcons = 0; //                    reset eN eF Cons
        Node* p = trie;
        for( int y: vec ){
            if( y == 1 ){
                if( p->ryte == nullptr ){
                    p->ryte = new Node();
                }
                p = p->ryte;
            } else {
                if( p->left == nullptr ){
                    p->left = new Node();
                }
                p = p->left;
            }
        }
        return !Node::nfcons;
    }
public:
    ivec_t repeatedRows( vector <ivec_t> &mat, int m, int n ){
        const int siz = mat.size();
        ivec_t ranks;
        for( int i = 0; i < siz; ++i ){
            if( isdupl( mat[ i])){
                ranks.push_back( i );
            }
        }
        return ranks;
    }
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int main(){ int t;cin>>t;while( t--){ int row,col;cin>>row>>col;
vector<vector<int>>matrix(row);for(int i=0;i<row;i++){matrix[i].
assign(col,0);for(int j=0;j < col; j++){cin >> matrix[ i][ j];}}
Solution ob; vector<int>ans=ob.repeatedRows(matrix,row,col);for(
int i=0;i < ans.size(); ++i ){ cout<<ans[ i]<<" ";}cout<<endl;}}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                1120 / 1120
// Points Scored:                                          4 / 4
// Your Total Score:                                        1870
// Time Taken:                                              0.51
////////////////////////////////////////////////////////////////
//    |                      |    // 1.5.2: The angular speed of
//    |                      |    // a coil is ω the radius of i 
//    |                      |    // nner cylinder is r, the out 
//  ===|||=== R        ===|||===  // er is R. What are the speed
//  ===|||===          ===|||===  // of coil's axis and the weig
//     |||   --||--||--   |||     // ht with respect to the grou
//  ---|||---  ||r ||  ---|||---  // nd?
//  ---|||---==||==||==---|||---  //////////////////////////////
//  ===|||===--||--||--===|||===  // If there is no slipping the
//  ===|||=== |      | ===|||===  // speed of the axis is v = ωR
//  ===|||=== |      | ===|||===  // , for the other question it
//            |      |            // s interesting that with res
//            |      |            // pect of the system moving a
//            |      |            // longside the coil the weigh
//     \/\/\/\/\/\/\/\/\/\/\/     // t will move towards us with
//                                // speed ωr, that is if we pic
//                                // k positive direction to poi
//////////////////////////////////// nts downward the weight wil
// l have speed -ωr, now if we add the speed of the axis, to get
// back to the ground system we'll get ω(R - r)                «
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
