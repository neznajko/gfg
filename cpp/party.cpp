//##############################################################
//==============================================================
//==============================================================
//=======================     ==================================
/////////////////////////     //////////////////////////////////
/////////////                           ////////////////////////
///////////////'''''///////////////     ////////////////////////
//88888:::::::8     88888:::::::888     888:::::::::::888888888:
//88888:::::::8     88888:::::::888     888::::::::::88888888888
//88888:88888:8     88888::::::::::     888888888888:88888:88888
//88888:88888:8     8888888888::888     888888888888:88888888888
//88888:88888                            88::::::::::88888888888
//88888:88888:8     88888:88888:888     888::::88888:88888::::::
//8888888888888     88888:88888:888     888888888888:88888888888
//::888888:8888     88888:88888:888     88888888888:::8888888888
//. . . . . . .     . . . . . . . .     . . . . . . . . . . . . 
//. . . . . . .                         . . . . . . . . . . . . 
//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
//==============================================================
//==============================================================
//##############################################################
////////////////////////////////////////////////////////////////
// 白 しろ
////////////////////////////////////////////////////////////////
// Party in Town
////////////////////////////////////////////////////////////////
// Geek t o w n has N Houses numbered f r o m 1 to N. They a r e
// connnected with each other via N-1 bidirectional roads. Given
// an adjacency list adj to represent t h e connections. To host
// the optimal pparty, you need to identify the house from which
// the distance t o the farthest h o u s e is minimum. Find this
// distance                                                    .
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(N^2)
// Expected Auxiliary Space: O(1)
////////////////////////////////////////////////////////////////
// 1 <= N <= 1000
// 1 <= adj[i][j] <= N
////////////////////////////////////////////////////////////////
// Die graue Frontalfigur( ähnlich den Dürer-Figuren, nächste
// Seite ) erfaßt die Grundformen des Körpers in Gestalt von
// geometrischen Formen: ..
////////////////////////////////////////////////////////////////
// ähnlich - similar
// erfassen - capture
// gestalt - form
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
# include <vector>
# include <iostream>
# include <ostream>
////////////////////////////////////////////////////////////////
typedef vector<int> ivector_t;
////////////////////////////////////////////////////////////////
//// 1. Mutter / die Mutter //// 1. die Tochter / die Töchter
//// 2. Sommer / der Sommer //// 2. der Vater / die Väter
//// 3. Tag    / der Tag    //// 3. die Frau / die Frauen
//// 4. Kind   / das Kind   //// 4. der Tag / die Tage
//// 5. Bett   / das Bett   //// 5. das Telefon / die Telepone
////                        //// 6. das Hotel / die Hotels
////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
ostream& operator<<( ostream& om, const ivector_t vec ){
    om << '[';
    string sep = "";
    for( int key: vec ){
        om << sep << key;
        sep = ",";
    }
    return om << ']';
}
////////////////////////////////////////////////////////////////
class GeekTown {
private:
    const int n;
    const vector<ivector_t>& adj;
    int currentLevel;
    int ma8imumLevel;
    ivector_t vzted;
    //
    int getma8imumLevel( const int v );
    void dfs( const int v );
public:
    GeekTown( const int n, const vector<ivector_t>& adj )
    : n( n ), adj( adj ), vzted( ivector_t( n + 1 ))
    {
    }
    int partyHouse();
};
////////////////////////////////////////////////////////////////
void GeekTown::dfs( const int v ){
    vzted[v] = 1;
    ++currentLevel;
    for( const int u: adj[v] ){
        if( !vzted[u] ){
            dfs( u );
        }
    }
    vzted[v] = 0;
    --currentLevel;
    if( ma8imumLevel < currentLevel ){
        ma8imumLevel = currentLevel;
    }
}
////////////////////////////////////////////////////////////////
int GeekTown::getma8imumLevel( const int v ){
    currentLevel = ma8imumLevel = 0;
    dfs( v );
    return ma8imumLevel;
}
////////////////////////////////////////////////////////////////
int GeekTown::partyHouse() {
    int minimumDistance = n;
    for( int j = 1; j <= n; ++j ){
        int distance = getma8imumLevel( j );
        if( minimumDistance > distance ){
            minimumDistance = distance;
        }
    }
    return minimumDistance;
}
////////////////////////////////////////////////////////////////
//// ーーーーーーーーーーーーーーーーーー
//// 中がっこう｜は｜たのしい｜です｜か。
//// ーーーーーーーーーーーーーーーーーー
//// いえ｜の｜中｜は｜きれい｜ですか。
//// ーーーーーーーーーーーーーーーーーー
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Solution {
public:
    int partyHouse( const int n, const vector<ivector_t>& adj ){
        return GeekTown( n, adj ).partyHouse();
    }
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int main(){ int t;cin>>t; while(t--){ int N,x,y; cin>>N; vector<
vector<int>>adj(N+1); for(int i=0; i<N-1; i++){ cin>>x>>y;adj[x]
.emplace_back(y); adj[y].emplace_back(x);} Solution ob; cout<<ob
.partyHouse(N,adj)<<"\n";}return 0;}////////////////////////////
////////////////////////////////////////////////////////////////
//// たけし：　メアリーさん、週末はたいてい何をしますか。
//// メアリー：　そうですね。たいていうちで勉強するします。
//// でも、ときどき映画を見ます。
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////--__``**
// usually                                              たいてい
// make effort                                                勉
// strong                                                     強
// to do                                            する、します
////////////////////////////////////////////////////////////////
// to study べんきようする 勉強する
////////////////////////////////////////////////////////////////
// 週 week 末 end
////////////////////////////////////////////////////////////////
// そうですね let me see
// うち home
// でも but
// ときどき sometimes
////////////////////////////////////////////////////////////////
// 映 to project + 画 picture = movie
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                    12 / 12
// Total Points Scored:                                    4 / 4
// Your Total Score:                                        1658
// Total Time Taken:                                        0.58
// error:               ‘console’ was not declared in this scope
