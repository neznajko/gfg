////////////////////////////////////////////////////////////////
//                        1                   2
//    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 
//  0 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//  1 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//  2 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//  3 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@
//  4 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@
//  5 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @@@@@@@@@@@@@@@@@@@@@@
//  6 @@@@@@@@@@@@@@                            @@@@@@@@@@@@@@@@
//  7 @@@@@@@@@@@@@        @@@@@@@@@@@@@       @@@@@@@@@@@@@@@@@
//  8 @@@@@@@@@@@@         @@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@
//  9 @@@@@@@@@@@@@@@@@@@  @@@  @@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@
// 10 @@@@@@@@@@@@@@@@@@@  @@@@@  @@@@@  @@@@@@@@@@@@@@@@@@@@@@@
//  1 @@@@@@@@@@@@@@@@@@@  @@@@@@@@@@@@  @@@@@@@@@@@@@@@@@@@@@@@
//  2 @@@@@@@@@@@                             @@@@@@@@@@@@@@@@@@
//  3 @@@@@@@@@@@@        @@@@@@@@@@@@         @@@@@@@@@@@@@@@@@
//  4 @@@@@@@@@@@@@       @@@@  @@@@@@          @@@@@@@@@@@@@@@@
//  5 @@@@@@@@@@@@@@@@@@  @@@@@@  @@@@  @@@@@@@@@@@@@@@@@@@@@@@@
//  6 @@@@@@@@@@@@@@@@@@  @@@@@@@@@@@@  @@@@@@@@@@@@@@@@@@@@@@@@
//  7 @@@@@@@@@@@@@@@@@@         @@@@@  @@@@@@@@@@@@@@@@@@@@@@@@
//  8 @@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@@@@@@@@
//  9 @@@@@@@@@@@@@@@@@@@@@@@@                 @@@@@@@@@@@@@@@@@
// 20 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@         @@@@@@@@@@@@@@@@@@
//  1 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @@@@@ @@@@@@@@@@@@@@@@@@@
//  2 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @@@@@@@@@@@@@@@@@@@@@@@@@
//  3 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @@@@@@@@@@@@@@@@@@@@@@@@@
//  4 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@
//  5 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@
//  6 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//  7 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//  8 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//    Check if Tree is Isomorphic, 母、はは( haha )
////////////////////////////////////////////////////////////////
// Given two Binary Trees. Check whether they are Isomorphic or not.
////////////////////////////////////////////////////////////////
// Note: Two trees are called isomorphic if one can be obtained from
// another by a series of flips, i.e. by swapping left and right
// children of several nodes. Any number of nodes at any level can
// have their children swapped. Two empty trees are isomorphic.
////////////////////////////////////////////////////////////////
//        T1    T2
// Input: 1     1
//       / \   / \
//      2   3 3   2 Output: No
//     /     /
//    4     4 
////////////////////////////////////////////////////////////////
//        T1    T2
// Input: 1     1
//       / \   / \
//      2   3 3   2 Output: Yes
//     /           \
//    4             4 
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(N)
// Expected Auxiliary Space: O(N)
////////////////////////////////////////////////////////////////
// 1 <= Number of nodes <= 10^5
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// .. des Mannes im knöchernen Schulterdach, nämlichnbei knappen
// oder vollen 2 KL, signalisiert( im GegensatzvzureFrau mit
// etwa 1½ KL).                                vollen
//                                             vollen
// öò                                          vollen 
// knochen -      bone                         vollen     - full
// Schulterdach - acromion                  gegensatz - contrast
// nämlich -      namely                          zur       - to
// bei -          at                             etwa    - about
// knapp -        almost
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
# include <vector>
# include <sstream>
# include <queue>
# include <iostream>
////////////////////////////////////////////////////////////////
struct Node{int data;Node*left;Node*right;Node(int val){data=val
;left=right=NULL;}};////////////////////////////////////////////
Node* buildTree( string str ){ if( str.length()==0||str[0]=='N')
return NULL; vector<string>ip; istringstream iss(str);for(string
str;iss>>str;)ip.push_back(str);Node*root=new Node(stoi(ip[0]));
queue<Node*>queue; queue.push(root);int i=1;while(!queue.empty() 
&&i<ip.size()){ Node*currNode=queue.front(); queue.pop(); string 
currVal =ip[i]; if(currVal!="N"){ currNode->left =new Node(stoi(
currVal));queue.push(currNode->left);}i++;if(i>=ip.size())break;
currVal=ip[i];if( currVal !="N"){ currNode->right=new Node(stoi(
currVal));queue.push(currNode->right);}i++;}return root;}///////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Freitag    | Friday
// Samstag    |
// Sonntag    |
// Montag     |
// Dienstag   |
// Mittwoch   |
// Donnerstag |                                              öó
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# define i( W ) ( W )->data
# define l( W ) ( W )->left
# define r( W ) ( W )->right
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
bool f( Node* Y, Node* N ){
    if(!( Y and N )) return Y == N; // Y = N = NULL
    if( i( Y ) != i( N )) return false;
    return ((f(l( Y ),l( N )) and f(r( Y ),r( N ))) or
            (f(l( Y ),r( N )) and f(r( Y ),l( N ))));
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Solution {
public:
    bool isIsomorphic( Node* Y,Node* N ){
        return f( Y, N );
    }
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
/////                                             cvrect / wrxng
////////////////////////////////////////////////////////////////
///// 1. わたし｜の｜たんじょうび｜は｜ついたち｜です。( v )
////////////////////////////////////////////////////////////////
///// 2. まいとし｜わたし｜は｜日本｜に｜いきます。( v )
////////////////////////////////////////////////////////////////
///// 3. だいがくせい｜ですか。( v )
////////////////////////////////////////////////////////////////
///// 4. らい年｜日ほん｜に｜いきましょう。( v )
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int main(){int t;scanf("%d ",&t);while(t--){string s1,s2;getline
(cin,s1); getline(cin,s2); Node*root1=buildTree(s1); Node*root2=
buildTree(s2);Solution obj;if(obj.isIsomorphic(root1,root2))cout
<<"Yes"<<endl;else cout<<"No"<<endl;}}//////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////// Christy ku-ri-su-te-i sa-n クリステイ｜さん
////// France  fu-ra-n-su フランス
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////// 1. クリステイさんは｜アメリカじんですか。
//////    いいえ、アメリカじんじゃないです。フランスじんです。
////// 2. クリステイさんの｜せんこう｜なんですか。
//////    えいごです。
////// 3. クリステイさんの｜おとうさんは｜にほんじんですか。 
//////    ええ、にほんじんです。
////// 4. クリステイさんの｜おかあさんは｜にほんじんですか。 
//////    いいえ、にほんじんじゃないです。フランスじんです。
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                1144 / 1144
// Total Points Scored:                                    4 / 4
// Your Total Score:                                        1526
// Total Time Taken:                                        0.56
