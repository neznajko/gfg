//88888888888888888888888888|||||-------------------------------
//88888888888888888888888888|||||-------------------------------
//             %%%%%%8888888|||||-------------------------------
//  e  a  s  t  %%%%%888888 |||||-------------------------------
//             __%%%%888888 |||||------------------------------/
//8888888%%%%%%                         ----------------------//
//8888888%%%%%%%%%%%%888888 |||||----------------------------///
//8888888%%%%%%%%                     ----------------------////
//8888888%%%%%%%% %%%888888 |||||==== =====================/////
//8888888%%%%%%%%                     ====================//////
//-------%%%%%%%% %%%------ |||||==== ===================///////
//-------%%%%%%%%                     ==================////////
//-------%%%%%%%%%%%%--"` _ , `'|======================/////////
//-------%%%%%%%%%%%"` _--- |||, `'===================//////////
//-------%%%%%%%%"` _------ |||||=, `'===============///////////
//-------%%%%%"` _%%%------ |||||====, `'===========////////////
//-------%%%%%%%%%%%%-------|||||==================/////////////
//-------%%%%%%%%%%%%-------|||||=================//////////////
//-------%%%%%%%%%%%%-------|||||================///////////////
//--------------------------|||||===============////////////////
//--------------------------|||||==============/////////////////
//                                            //////////////////
//                                           // 東 ひがし
// Merge Sort on Doubly Linked List         ////////////////////
////////////////////////////////////////////////////////////////
// Given Pointer/Reference to the head of a doubly linked list o f
// N nodes, the task is to Sort the given doubly linked list usi  n g
// Merge Sort in both non-decreasing and non-increasing order.
////////////////////////////////////////////////////////////////
// Input: N = 8 value[] = { 7,3,5,2,6,4,1,8 }
// Output: 1 2 3 4 5 6 7 8
//         8 7 6 5 4 3 2 1
// Explanation: ...
////////////////////////////////////////////////////////////////
// 1 <= N <= 10^5
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
# include <iostream>
////////////////////////////////////////////////////////////////
struct Node{int data;struct Node*next,*prev;Node(int x){data=x;
next=NULL;prev=NULL;}};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////[ GPT-3.5 ]
// "Mit Hilfe des Vergleichs von gleich oder ähnlich langen     
// Strechken gewinnen wir Übersicht und Ordnung."               
//                                                              
//  > Mit Hilfe ? veer + and 
//  = des Vergleichs - OHR-doong ' long
//  : von ` UEH-buhr-zikt / equal
//  / gleich > mit HIL-fuh - order
//  ^ oder : fon = of the comparison
//  _ ähnlich + oont > With the help of
//  ' langen / glykh ^ or
//  * Strecken _ AEH-nlikh ` overview
//  % gewinnen = dess Fer-GLEIHS * stretches
//  ? wir ' LAHN-ghen _ similar
//  ` Übersicht ^ OH-der % we gain
//  + und * SHTREH-ken ? we
//  - Ordnung % geh-VIHN-en : of
// 
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//#####################            ``````````````````````````````````
//#### da #############            `````````````````````` under ````
//#####################            ````````````````````````````````
// \\\\\\\\\\\\\\\\\\\\\\\\\\\\>>>>>>>>>>>>>>>>>>>>>             
// \\\\ suchen \\\\\\\\\\\\\\\\>>>>>>> next to >>>>              
// \\\\\\\\\\\\\\\\\\\\\\\\\\\\>>>>>>>>>>>>>>>>>>>               
//%%%%%%%%%%%%%%%#######################################          
//%%%% etwas %%%%########################### there ####          
//%%%%%%%%%%%%%%%#####################################           
//----------------------%\\\\\\....``````....................    
//---- der Hamster -----%\\\\\\....``````....... him/it ....     
//----------------------%\\\\\\....``````..................      
//  3333333333333333333-%\\\\\\\\\\\\\\\\\\\\\\\\\\\\\`           
//  3333 finden 3333333-%\\\\\\\\\\\\ to look for \\\\\`          
//  3333333333333333333-%\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\`         
// .................--3-%%%%%%...%%``````%%%%%%%%%%%%%%%%%%%%    
// .... ihm ........--3-%%%%%%...%%``````%%%%%% something %%%%   
// .................--3-%%%%%%...%%``````%%%%%%%%%%%%%%%%%%%%%%   
//  @@@@@@@@@@@@@@@@@@@@@@@33333333333333333333333               
//  @@@@ auf @@@@@@@@@@@@@@333333333 to find 3333                
//  @@@@@@@@@@@@@@@@@@@@@@@333333333333333333333                  
//  `````````````````````````````````````------------------------
//  ```` unter ``````````````````````````---------- hamster ---- 
//  `````````````````````````````````````----------------------  
// """""""""""""""xxx@@@@@@xxxxxxxxxxxxxxxxxxxxx                 
// """" hinter """xxx@@@@@@xxxxxxxxx between xxxx                
// """""""""""""""xxx@@@@@@xxxxxxxxxxxxxxxxxxxxxxx               
//  ||||||||||||||xxx@@@@@@@@@@@@@@@@@@@@@@@@                    
//  |||| vor |||||xxx@@@@@@@@@@@@@@@ on @@@@                     
//  ||||||||||||||xxx@@@@@@@@@@@@@@@@@@@@@@                      
// xxxxxxxxxxxxxxxxxxxx"""""""""""""""""""""""""
// xxxx zwischen xxxxxx"""""""""""" behind """"
// xxxxxxxxxxxxxxxxxxxx"""""""""""""""""""""""
//   >>>>>>>>>>>>>>>>>>>>>>>>|||||||||||||||||||||||||||||        
//   >>>> neben >>>>>>>>>>>>>||||||||||||| in front of ||||        
//   >>>>>>>>>>>>>>>>>>>>>>>>|||||||||||||||||||||||||||||||
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
void insert(struct Node** head, int data)
{struct Node*temp=new Node(data);if(!(*head))(*head)=temp;else{temp
->next=*head;(*head)->prev=temp;(*head)=temp;}}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
void print(struct Node*head){struct Node*temp=head;while(head){
cout<<head->data<<' ';temp=head;head=head->next;}cout<<endl;while
(temp){cout<<temp->data<<' ';temp=temp->prev;}cout<<endl;}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
void dump( Node* ahead, Node* end ){
    char sep{};
    Node* p{ ahead->next };
    while( p != end ){
        cout << sep << p->data;
        sep = ' ';
        p = p->next;
    }
    cout << endl;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
Node* split( Node* ahead, Node* end ){
    Node* p{ ahead->next };
    Node* f{ p };
    while( true ){
        if(( f = f->next ) == end ) break;
        if(( f = f->next ) == end ) break;
        p = p->next;
    }
    return p;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
void detatch( Node* q ){
    q->prev->next = q->next;
    if( q->next ){
        q->next->prev = q->prev;
    }
}
////////////////////////////////////////////////////////////////
void insert( Node* q, Node* p ){// r <-> p => r <-> q <-> p
    p->prev->next = q;
    q->prev = p->prev;
    p->prev = q;
    q->next = p;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
void merge( Node* ahead_p, Node* ahead_q, Node* end_q ){
    auto aux{ Node( 0 )};
    insert( &aux, ahead_q->next );
    ahead_q = &aux;
    auto end_p{ &aux };
    auto p{ ahead_p->next };
    auto q{ ahead_q->next };
    while( p != end_p and q != end_q ){
        if( p->data <= q->data ){
            p = p->next;
        } else {
            auto next{ q->next };
            detatch( q );
            insert( q, p );
            q = next;
        } 
    }
    detatch( &aux );
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
void mergesort( Node* ahead, Node* end ){
    if( ahead->next->next == end ){
        return;
    }
    auto mid{ split( ahead, end )};
    auto end_p{ mid->next };
    mergesort( ahead, end_p );
    auto ahead_q{ end_p->prev };
    mergesort( ahead_q, end );
    merge( ahead, ahead_q, end );
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
Node* sortDoubly( Node* p ){
    Node* ahead{ new Node( 0 )};
    ahead->next = p;
    p->prev = ahead;
    //
    mergesort( ahead, nullptr );
    //
    Node* res{ ahead->next };
    res->prev = nullptr;
    ahead->next = nullptr;
    delete ahead;
    return res;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int main(void){long test;cin>>test;while(test--){int n,tmp;struct 
Node*head=NULL;cin>>n;while(n--){cin>>tmp;insert(&head,tmp);}head
=sortDoubly(head);print(head);}}
////////////////////////////////////////////////////////////////
// > ko-no * over there + あの                                  
// : so-no , here _ どこ                                        
// + a-no - there > この                                        
// < do-no _ where , ここ                                       
// , ko-ko : that... * あそこ                                   
// - so-ko ? who : その                                         
// * a-so-ko > this... ? だれ                                   
// _ do-ko < which... - そこ                                    
// ? da-re + that...(over there) < どの                         
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// さようなら、さようなら、さようなら、さようなら、さようなら、
// こんにちは、こんにちは、こんにちは、こんにちは、こんにちは
// はじめまして　よろしくおねがいします、
// いってきます、いってきます、いってきます、いってきます
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                  217 / 217
// Total Points Scored:                                    4 / 4
// Your Total Score:                                        1426
// Total Time Taken:                                        0.26
