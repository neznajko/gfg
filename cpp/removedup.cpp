////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////                    
////  ########################################################## 屈
////  ########################################################## 
////  #########                                        ######### 
////  ########################################################## 
////  ########################################################## SE PliER
////  #########       \ \ \     \ \ \ \                         
////  #########      \ \ \ \   \ \ \ \ \________________________ bieden
////  #########     \ \ \ \ \   \ \ \ \_________________________
////  #########      \ \ \ \ \   \ \ \__________________________
////  #########       \ \ \ \ \   \ \____ \
////  #########        \ \ \ \ \ \ \____ \ \
////  #########         \ \ \ \ \ \____ \ \ \
////  #########          \ \ \ \ \____ \ \ \ \
////  #########       \   \ \ \ \ \   \ \ \ \ \_________________
////  #########      \ \   \ \ \ \ \   \ \ \ \__________________
////  #########     \ \ \   \ \ \ \ \   \ \ \___________________
////  #########    \ \ \ \ \ \ \ \ \ \   \ \____________________
////  #########   \ \ \ \ \ \_\ \ \ \ \ \ \_____________________
////  #########    \ \ \ \ \___\ \ \ \ \ \______________________
////  #########     \ \ \ \_____\ \ \ \ \_______________________
////  #########      \ \ \_______\ \ \ \________________________
////  #########       \ \____ \   \ \ \_________________________
////  #########        \____ \ \   \ \__________________________
////  #########             \ \ \ \ \___________________________ クツ
////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Recursively remove all adjacent duplicates
////////////////////////////////////////////////////////////////
// Given a string s remove all its adjacent duplicate characters
// recursively
////////////////////////////////////////////////////////////////
// Note: For some test cases, the resultant string would be an
// empty string. In that case, the function should return the 
// empty string only
////////////////////////////////////////////////////////////////
// Input: S = "abccbccba"
// Output: ""
// Explanation: 
// ab(cc)b(cc)ba->abbba->a(bbb)a->aa->(aa)->""(empty string)
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(|S|)
// Expected Auxiliary Space: O(|S|)
////////////////////////////////////////////////////////////////
// 1<=|S|<=10^5
////////////////////////////////////////////////////////////////
# include <string>
# include <iostream>
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Solution {
public:
    string rremove( const string& s ){
        if( s.empty()) return {};
        string t;
        bool flag{};
        for( int i, j{}, n = s.length(); j < n; j = i ){
            i = j + 1;
            for(; i < n && s[j] == s[i]; ++i )
                ;
            if( i == j + 1 ){
                t.push_back( s[j] );
            } else {
                flag = true;
            }
        }
        return flag ? rremove( t ) : t;
    }
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int main(){int t;string tc;getline(cin,tc);t=stoi(tc);while(t--) 
{string s;getline(cin,s);Solution ob;cout<<ob.rremove(s)<<"\n";}
return 0;}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                  358 / 358
// Points Scored:                                          4 / 4
// Your Total Score:                                        1722 
// Time Taken:                                              0.27
// npegu ga 3ano4He cBoeTo u3nt7HeHue, eguH TaHFbop Ka3à7:    Co
//                         KpoTFe, co 67aro u co Ma7Kø K54eK ...
