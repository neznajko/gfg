//##############################################################
//##############################################################
//##############################################################
//##############################################################
//#############\                      \#########################
//############# \                      \########################
//#############\ \                      \#######################
//##############\ \______________________\######################
//###############\                        ######################
//################\_________________\ \___######################
//#######################\ \\ \\ \\_\  #########################
//##########\            \\ \\ \\_\      \######################
//########## \            \\ \\_\         \#####################
//##########\ \            \\_\            \####################
//###########\ \____________\  _____________\###################
//############\                              ###################
//#############\____________   ______________######### H #######
//#######################      #################################
//#######################      ################# C #############
//#######################      #################### H ##########
//#######################      ########################## L ####
//#######################\     ############ D ##################
//########################\    #################################
//#########################\   #################################
// Insertion Sort for Singly Linked List, 子、こko
////////////////////////////////////////////////////////////////
// Given a singly linked list sort the list (in ascending order)
// using insertion sort algorithm.
////////////////////////////////////////////////////////////////
// Input: N = 10
// Linked List = 30->23->28->30->11->14->19->16->21->25 
// Output: 11 14 16 19 21 23 25 28 30 30 
// Explanation: The resultant linked list is sorted.(!)
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(n^2)
// Expected Auxiliary Space: O(1)
////////////////////////////////////////////////////////////////
// 1 <= n <= 10^3
///////////////////////////////////////////////////////////////|
///////////////////////////////////////////////////////////////|
//// ..( Simultan- oder Analogiverfahren ) wird hier auf die   |
//// Verhältnisse der Höhen- und Breitenausdehnung des Mannes  |
//// angewendet.                                               |
////                                                           |
//// wird - will                                               |
//// hier - here                                               |
//// Verhältnisse - conditions                                 |
//// Breitenausdehnung - latitude     \\\\\\\\\\               |
////   Breite - breadth              //\\\\\\\\\\              |
////   Ausdehnung - extension       ////\\\\\\\\\\             |
//// angewendet - applied          //////\\\\\\\\\\            |
////   wenden - turn around       ////////\\\\\\\\\\           |
////                             //////////\\\\\\\\\\          |
//////////////////////////////////////////  \\\\\\\\\\\\\\\\\\\|
/////////////////////////////////////////    \\\\\\\\\\\\\\\\\\|
////////////////////////////////////////      \\\\\\\\\\\\\\\\\|
# include <iostream>
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
using namespace std;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
struct Node{ int data; struct Node*next;Node(int x){data=x;next=
NULL;}};////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
void printList( struct Node*head){ struct Node*temp=head;while (
temp != NULL ){ printf( "%d ", temp->data); temp = temp->next;}}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//// wie spät ist es? what is the time
//// wie viel Uhr ist es? what is the time
//// er ist ein Uhr it is one o'clock
//// nach/vor past/to
//// Viertel nach quarter past
//// Viertel vor quarter to
//// halb half past
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
Node* ahead{ new Node( 0 )};
////////////////////////////////////////////////////////////////
class Solution {
public:
    Node* insertionSort( Node* ref );
};
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
# define key( P ) ((P)->data)
////////////////////////////////////////////////////////////////
void insert( Node* q ){
    Node* p{ ahead };
    while( key( p->next ) < key( q )){
        p = p->next;
    }
    q->next = p->next;
    p->next = q;
}
///////////////////////////////////////////////////////////////_
Node* Solution::insertionSort( Node* ref ){
    ahead->next = ref;
    Node* p{ ahead->next };
    while( p and p->next ){
        Node* q{ p->next };
        if( key( q ) < key( p )){
            p->next = q->next;
            insert( q );
        } else {
            p = p->next;
        }
    }
    return ahead->next;
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//// Vhen is your birthday?
//// び、日, bi( day ) 
//// i-tsu, いつ、vhen?
//// だんじょ日｜は｜いつ｜です｜か。
////
//// Saturday is my birthday.
//// do-yo,o:bi wa wa\ta\shi no do'jo'bi de,su.
//// do,yo`o,bi Saturday, どようび、土曜日
////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
int main(){int T;cin>>T; while(T--){int n;cin>>n;Node*head=NULL;
Node*temp=head;for(int i=0;i<n;i++){int data;cin>>data;if(head==
NULL)head=temp = new Node(data);else{ temp->next=new Node(data);
temp = temp->next; }} Solution ob; head =ob.insertionSort(head);
printList(head);cout<<"\n";}}///////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// 1. You: ko`re`wa da,re,no bo:o:shi:de:su:ka.
//    You：これは｜だれの｜ぼうしですか。
//    You: Whom do you serve?!
//    みちこ：それは｜たけしさんの｜ぼうしです。
//    みちこ: so:re:wa ta_ke_shi_no bo/o/shi/de/su.         
//    みちこ: Sarumaaaaaaan!                                  
//    //\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//
// 2. You: ko\re\wa da/re/no sa,i,fu,de,su,ka.
//    You：これは｜だれの｜さいふですか。
//    You: Whose wallet is this???
//    みちこ：それは｜わたしの｜さいふです。
//    みちこ: so\re\wa wa:ta:shi:no sa|i|fu|de|su.
//    みちこ: That's my wallet!!!
//    /|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|
// 3. You: a're,wa da,re`no ka,sa de'su,ka.
//    You：あれは｜だれの｜かさ｜ですか。
//    You: Whose umbrella is that over there?!
//    みちこ：あれは｜メアリーさんの｜かさです。
//    みちこ: a,re|wa me\a\ri\i\sa\n\no ka'sa"de,su.
//    みちこ: That's Mary's umbrella!?
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                    20 / 20
// Total Points Scored:                                    4 / 4
// Your Total Score:                                        1498
// Total Time Taken:                                        0.01
