#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#------------------------                  -------------
#------------------------------ ---- -------------------
#------------------------------ ---- -------------------
#-------------------------                --------------
#------------------------- ---- ---- ---- --------------
#------------################## ---- ---  --------------
#------------------#----#- ---  ----    - --------------
#------------------#----#- -  ----------- --------------
#-------------################----------- --------------
#-------------#----#----#-   #            --------------
#-------------#----#----#- -##----------- --------------
#-------------#---##----####-#--------------------------
#-------------#-##-----------#--------------------------
#-------------#--------------#--------------------------
#-------------################--------------------------
#-------------#--------------#--------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
#-------------------------------------------------------
# 西、にし ni-shi, west
########################################################
########################################################
########################################################
########################################################
# Best Node
########################################################
# You are given a tree rooted at node 1. The tree is
# given in form of an array P where Pi denotes the
# parent of node i, Also P1 = -1, as node 1 is the root
# node. Every node i has a value Ai associated with it.
# At first, you have to choose any node to start with,
# after that from a node you can go to any of its child
# nodes. You've to keep moving to a child node until you
# reach a leaf node. Every time you get to a new node,
# you write its value. Let us assume that the integer
# sequence in your path is B. Let us define a function
# f over B, which is defined as follows:
# f(B) = B1 - B2 + B3 - B4 + B5.... + (-1)^(k-1)Bk.
# You have to find the maximum possible value of f(B).
########################################################
# Input: N = 3, A = { 3, 1, 2}
#               P = {-1, 1, 2}, Output: 4
# Explanation: The resulting tree is: 1(3)
#                                     |
#                                     2(1)
#                                     |
#                                     3(2), If we choose
# our starting node as 1, then the resulting sequence
# will be B = { 3, 1, 2 }. The value which we'll get is,
# 3-1+2 = 4, which is the maximum possible value.
########################################################
# Expected Time Complexity: O(N)
# Expected Space Complexity: O(N)
########################################################
# 1 ≤ N ≤ 10^5
# -10^5 ≤ Ai ≤ 10^5
# -1 ≤ Pi ≤ N
########################################################
########################################################
########################################################
########################################################
# [                                           ]ourselves
# \   Wir orientieren [uns] \dabei\ :durch:     \thereby
# :                                             :through
# `  (nach) dem "lebenden" Modell und         `measuring
# (                                               )after
# "    'entdecken' (siehe ^rechte^               "living
# '                                            'discover
# ^        <Abbildung>):                          ^right
# <                                        >illustration
########################################################
#######################################################_
# d d d d d               
# e e e a a                 
# r R r s s                              a r m c h a i R                      
#                         
# s s v B s                            B o o k s h e l f
# c e o ü O                                      s O f a
# h s r c f
# R s h h a                              c u p b o a R d
# a e a e
# n l N r                                  c u r t a i N
# k   g r
#       e                  - Er ist nich auf dem Schrank.
#       g                    - Ist er hinter dem Vorhang?
#       a                                         - Nein.
#       l                  - Er ist nicht unter dem Sofa.
#
from math import inf
########################################################
########################################################
########################################################
########################################################
class Solution:
    def bestNode( self, n, a, p ):
        a.insert( 0, 0 )
        p.insert( 0, 0 )
        m = -inf
        for leaf in get_leafs( p ):
            m = max( m, get_leaf_maxseq( leaf, a, p ))
        return m
########################################################
########################################################
########################################################
########################################################
def get_leaf_maxseq( leaf, a, p ):
    seq = 0
    maxseq = -inf
    sign = 1
    node = leaf
    while node != -1:
        seq += a[ node ] * sign
        maxseq = max( maxseq, sign * seq )
        sign = -sign
        node = p[ node ]
    return maxseq
#######################################################_
########################################################
########################################################
########################################################
def get_leafs( p ):
    t = set( range( 1, len( p )))
    s = set()
    for u in p[2:]: s.add( u )
    return t.difference( s )
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
class IntArray:#########################################
    def Input(self,n):##################################
        arr=[int(i) for i in input().strip().split()]###
        return arr######################################
    def Print(self,arr):################################
        for i in arr:###################################
            print(i,end=" ")############################
        print()#########################################
########################################################
if __name__=="__main__":################################
    t = int(input())####################################
    for _ in range(t):##################################
        N = int(input())################################
        A=IntArray().Input(N)###########################
        P=IntArray().Input(N)###########################
        obj = Solution()################################
        res = obj.bestNode(N, A, P)#####################
        print(res)######################################
########################################################
########################################################
#### 1) Paris パリ 4:00 am
#### 2) Seoul ソウル 9:00 pm
#### 3) New York ニューヨーク 1:00 pm
#### 4) London ロンドン 7:30 am
#### 5) Taipei タイペイ 11:00 am
#### 6) Sydney シドニー 3:30 pm
####
####
####
####
#### 火、ひ。火、ひ。火、ひ。火、ひ。
####
########################################################
########################################################
# Test Cases Passed:                         1124 / 1124
# Total Points Scored:                             4 / 4
# Your Total Score:                                 1430
# Total Time Taken:                                 1.42
