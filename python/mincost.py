#########################################################
#
#                      . . .
#                     . / / .               
#        . . . . . . . / / / . . . . . . .  
#       . / / / / / / / / / / / / / / / / . 
#        . . . . . . . / / / . . . . . . .  
#           . / / / / / / / / / / / / .     
#          . / / / . . / / / . . / / / .  
#           . / / / / / / / / / / / / .   
#            . . . . . / / / . . . . .      
#           . / / / / / / / / / / / / .     
#        . . . . . . . / / / . . / / . . .  
#       . / / / / / / / / / / / / / / / / .           
#        . . . . . . . / / / . . / / . . .  
#           . / / / / / / / / / / / / .     
#            . . . . . / / / . . . . .     
#                     . / / .                        h i
#                      . . .                        t   n
#                                                    . g
#########################################################
# Minimum Cost Path, 事、jiジ
#########################################################
# Given a square grid of size N, each cell of which
# contains integer cost which represents a cost to
# traverse through that cell, we need to find a path from
# top left cell to bottom right cell by which the total
# cost incurred is minimum. From the cell (i,j) we can go
# (i,j-1),(i,j+1),(i-1,j),(i+1,j). 
#########################################################
# Input: grid = {{9, 4, 9, 9},
#                {6, 7, 6, 4},
#                {8, 3, 3, 7},
#                {7, 4, 9,10}}
# Output: 43
# Explanation: 9 + 4 + 7 + 3 + 3 + 7 + 10 = 43
#########################################################
# Input: grid = {{4,4},
#                {3,7}}
# Output: 14
# Explanation: 4 + 3 + 7 = 14
#########################################################
# Expected Time Compelxity: O(n^2log(n))
# Expected Auxiliary Space: O(n^2) 
#########################################################
# 1 ≤ n ≤ 500
# 1 ≤ cost of cells ≤ 1000
#########################################################
#########################################################
## [ Brustwarsenzwischenraum, ]
##   raum - room
## [ die Außenseiten ]
##   außen - outer
## [ beider ]
##   beider - both
## [ Knie und der Sohle betragen je I KL. ]
#########################################################
#########################################################
#########################################################
#########################################################
def flatten( grid ):
    n = len( grid )
    flat = [0]*( n + 3 )
    for row in grid:
        flat.extend( row )
        flat.extend([ 0, 0 ])
    flat.extend( [0]*( n + 1 ))
    return flat
#########################################################
#########################################################
#########################################################
#########################################################
# sonst noch etwas? anything else
#  sonst - otherwise
#  noch - yet
# gerne - gladly
# bitte schön
#  bitte - please
#  sch"n - beautiful
#     o
#########################################################
#########################################################
#########################################################
#########################################################
#########################################################
#########################################################
#########################################################
#########################################################
def dump2d( flat, n ):
    k = 0
    _range = range( n )
    for i in _range:
        for j in _range:
            print( str( flat[ k ]).rjust( 5 ), end='' )
            k += 1
        print()
#########################################################
#########################################################
#########################################################
#########################################################
import heapq
#########################################################
#########################################################
class Heap:
    def __init__( self ):
        self.q = []
    def push( self, value ):
        heapq.heappush( self.q, value )
    def pop( self ):
        return heapq.heappop( self.q )
#########################################################
#########################################################
from math import inf
#########################################################
#########################################################
class Solution:
    def debug( self ):
        dump2d( self.flat, self.n )
        dump2d( self.total, self.n )
    def minimumCostPath( self, grid ):
        self.n = len( grid ) + 2
        self.flat = flatten( grid )
        self.total = [ inf ]*len( self.flat )
        return self.mincost()
    def mincost( self ):
        heap = Heap()
        start = self.n + 1
        end = len( self.flat ) - self.n - 2
        heap.push(( self.flat[ start ], start ))
        DR = -1, +1, -self.n, +self.n
        while True:
            cost, off = heap.pop()
            if off == end: break
            if cost > self.total[ off ]: continue
            for dr in DR:
                off_ = off + dr
                if self.flat[ off_ ] == 0: continue
                cost_ = cost + self.flat[ off_ ]
                if cost_ < self.total[ off_ ]:
                    self.total[ off_ ] = cost_
                    heap.push(( cost_, off_ ))
        return self.total[ end ]
#########################################################
#########################################################
#### 出、ger out, exit, deで、de_ruで＿る
#### 
#### I am going to leave at 1 o'clock.
#### わたし｜は｜一じ｜に｜出ます。
#### watashi wa ichiji ni demasu
####
#### 入る、enter, hai_ruはい＿る
#### 
#### Let's go inside.
#### なか｜に｜入りましょう。
#### naka ni hairimashoo
####
#### inside - なか - naka
#########################################################
#########################################################
#########################################################
#########################################################
#########################################################
#########################################################
T=int(input())###########################################
#########################################################
for i in range(T):#######################################
    n=int(input())#######################################
    grid=[]##############################################
    for _ in range(n):###################################
        a=list(map(int,input().split()))#################
        grid.append(a)###################################
    obj=Solution()#######################################
    ans=obj.minimumCostPath(grid)########################
    print(ans)###########################################
#########################################################
#########################################################
#########################################################
#########################################################
###### これ｜は｜なん｜ですか。
###### (7) sore wa saifu desu( wallet )
######     それ｜は｜さいふ｜です。
###### (8) sore wa nihon hon desu( japanese book )
######     それ｜は｜にほん｜ほん｜です。
###### (9) sore wa nooto desu( notebook )
######     それ｜は｜ノート｜です。
###### (a) sore wa kutsu desu( shoes )
######     それ｜は｜くつ｜です。
###### (b) sore wa tokee desu( watch )
######     それ｜は｜とけい｜です。
###### (c) sore wa shinbun desu( newspaper )
######     それ｜は｜しんぶん｜です。
#########################################################
#########################################################
#########################################################
#########################################################
#########################################################
#########################################################
# Test Cases Passed:                              90 / 90
# Total Points Scored:                              8 / 8
# Question: Is there scarcity because of the human greed,
#      or there is human greed because there is scarcity?
# Your Total Score:                                  1582
# Answer:  Ai chink fyorst, becooz more and more and more
#    for someone means less and less and less for others.
# Total Time Taken:                                  5.53
