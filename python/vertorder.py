##############################################################
##--- ___ --- ___ --- ___ --- ___ --- ___ --- ___ --- ___ --- 
## ###########################################################
## ###########################################################
## ###########################################################
## ###########################################################
## ####                                                   ####
## ####                                                   ####
## ####                         _____                     ####
## ####            ____________ -----------               ####
## ####             ----- ----- _____ _____               ####
## ####             ___________ -----------               ####
## ####             ----- ----- _____ _____               ####
## ####             ___________ -----------               ####
## ####             -----             _____               ####
## ####             _____ \\\\\\\\\\\ -----               ####
## ####             -----  |||   |||  _____               ####
## ####             _____ \\\\\\\|||\ -----               ####
## ####             -----  |||   |||  _____               ####
## ####             _____ \\\\\\\|||\ -----               ####
## ####             -----  |||   |||  _____               ####
## ####             _____ \\\\\\\|||\ -----               ####
## ####             -----        |||  _____               ####
## ####             _____            -----                ####
## ####                                                   ####
## ####                                                   ####
## ####                                                   ####
##                                                        ####
## ####################################################   ####
## ####################################################   ####
## ####################################################   ####
## 聞, [き]く、to listen
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
# Vertical Traversal of Binary Tree
##############################################################
# Given a Binary Tree, find the vertical traversal of it 
# starting from the leftmost level to the rightmost level.
# If there are multiple nodes passing through a vertical line,
# then they should be printed as they appear in level order
# traversal of the tree.
##############################################################
# Input:    1
#          / \
#         2   3
#        / \ / \
#       4  5 6  7
#             \  \
#              8  9 Output: 4 2 1 5 6 3 8 7 9 
# Explanation: ...
##############################################################
# Input:    1
#          / \
#         2   3
#        / \   \
#       4   5   6 Output: 4 2 1 5 3 6
# Explanation: ...
##############################################################
# Expected Time Complexity: O(NlogN)
# Expected Auxiliary Space: O(N)
##############################################################
# 1 <= Number of nodes <= 3*10^4
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
# schienbeinstachel  # stachel stachel stachel s##############
# schien - shin      #                         t##############
# bein - leg         # knöchel knö             achel stachel s
# scheinbein - tibia #           c
# stachel - thorn    #           hel *
# Knőchel - ankle    #           
# Sohle - sole       #
##############################################################
##############################################################
##############################################################
##############################################################
#### Frau Voss goes shopping
#### kaufen - to buy
#### einkaufen gehen - to go shopping
#### die Bäckerei - baker's
#### Brötchen - bread roll
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
def push( tab, off, value ):
    if off == len( tab ):
        tab.append([ value ])
    else:
        tab[ off ].append( value )
##############################################################
##############################################################
def merge( pos, neg ):
    vrt = []
    for ls in reversed( neg[ 1: ]):
        vrt.extend( ls )
    for ls in pos:
        vrt.extend( ls )
    return vrt
##############################################################
##############################################################
class Solution: # O(N)
    def verticalOrder( self, root ): 
        deq = deque([( root, 0 )])
        pos = [[]]
        neg = [[]]
        while deq:
            node, off = deq.popleft()
            if off < 0:
                push( neg, -off, node.data )
            else:
                push( pos, +off, node.data )
            if node.left:
                deq.append(( node.left,  off - 1 ))
            if node.right:
                deq.append(( node.right, off + 1 ))
        return merge( pos, neg )
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
############################################################==
########################################################======
####################################################==========
################################################==============
############################################==================
########################################====================== 
####################################-----===================== 
################################---------.==================== 
############################-----------....===================
########################-------------.......==================
####################---------------..........=================
################-----------------    .........================
############-------------------        ........===============
########---------------------            .......==============
from collections import deque
##############################################################
class Node:###################################################
    def __init__(self,val):###################################
        self.right=None#######################################
        self.data=val#########################################
        self.left=None########################################
##############################################################
##############################################################
##############################################################
##############################################################
def buildTree(s):#############################################
    if(len(s)==0 or s[0]=="N"):###############################
        return None###########################################
    ip=list(map(str,s.split()))###############################
    root=Node(int(ip[0]))#####################################
    size=0####################################################
    q=deque()#################################################
    q.append(root)############################################
    size=size+1###############################################
    i=1#######################################################
    while(size>0 and i<len(ip)):##############################
        currNode=q[0]#########################################
        q.popleft()###########################################
        size=size-1###########################################
        currVal=ip[i]#########################################
        if(currVal!="N"):#####################################
            currNode.left=Node(int(currVal))##################
            q.append(currNode.left)###########################
            size=size+1#######################################
        i=i+1#################################################
        if(i>=len(ip)):#######################################
            break#############################################
        currVal=ip[i]#########################################
        if(currVal!="N"):#####################################
            currNode.right=Node(int(currVal))#################
            q.append(currNode.right)##########################
            size=size+1#######################################
        i=i+1#################################################
    return root###############################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
## らい｜年日｜ほんにいきましょう。boom
## わたしのたんじょ｜日｜は｜１日｜です。boom
## げつよう｜日｜に｜日｜ほんにいきます。boom
## 日｜ようびにこうえんにいきます。boom
## まい｜日｜ほんをよみます。boom
##############################################################
if __name__=="__main__":######################################
    t=int(input())############################################
    for _ in range(0,t):######################################
        s=input()#############################################
        root=buildTree(s)#####################################
        res=Solution().verticalOrder(root)####################
        for i in res:#########################################
            print(i,end=" ")##################################
        print()###############################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
# かさはいくらですか。
# せんにひゃくえんです。
# じてんしゃはいくらですか。
# さんもんろくせんえんです。
# とうけはいくらですか。
# いちもんえんです。
# かばんはいくらですか。
# はっせんえんです。
##############################################################
# Test Cases Passed:                                   13 / 13
# Total Points Scored:                                   4 / 4
# Your Total Score:                                       1562
# Total Time Taken:                                       0.36
