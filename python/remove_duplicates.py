########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
#############                          #################
#############::::::::::::  ::::::::::::#################
#############::::::::::::  ::::::::::::#################
#############                          #################
#############::::::::::::  ::::::::::::#################
#############::::::::::::  ::::::::::::#################
#############:::::::::::    :::::::::::#################
#############::::::::::  ::  ::::::::::#################
#############::::::::  ::::::  ::::::::#################
#############::::::  ::::::::::  ::::::#################
#############:::   ::::::::::::::   :::#################
#############   ::::::::::::::::::::   #################
#############::::::::::::::::::::::::::#################
#############::::::::::::::::::::::::::#################
#############::::::::::::::::::::::::::#################
#############::::::::::::::::::::::::::#################
#############::::::::::::::::::::::::::#################
#############::::::::::::::::::::::::::#################
# 天（テン）
########################################################
########################################################
# Remove all occurences of duplicates in a linked list \
########################################################
########################################################
# Given a sorted linked list, delete all nodes that have
# duplicate numbers (all occurrences), leaving only numbers
# that appear once in the original list.               \
########################################################
########################################################
# Input: N = 8, Linked List = 23->28->28->35->49->49->53->53
# Output: 23 35                                      \
# Explanation: The duplicate numbers are 28, 49 and 53 which 
# are removed from the list.                           \
########################################################
########################################################
# Expected Time Complexity: O(N)                      \
# Expected Auxiliary Space: O(1)                       \
########################################################
########################################################
# Constraints:                                        \
# 1 ≤ N ≤ 10^5                                         \
########################################################
# eins   : eins,eins,eins;eins\eins;eins eins eins eins/
# zwei   , zwei zwei zwei zwei zwei zwei zwei zwei zwei
# drei   ` drei drei drei drei drei drei drei drei drei
# vier   , vier vier vier vier vier vier vier vier vier
# fünf   ' fünf fünf fünf fünf fünf fünf fünf fünf fünf 
# sechs  " sechs     sechs     sechs     sechs     sechs
# sieben | sieben    sieben    sieben    sieben    sieben
# acht   : acht acht acht acht acht acht acht acht acth
# neun   . neun neun neun neun neun neun neun neun neun
# zehn   ' zehn zehn zehn zehn zehn zehn zehn zehn zehn
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
# ahead---->23--------->35-------------------->nil
#                       p                      r
class Solution:
    def removeAllDuplicates( self, q ):
        ahead = Node(-1 )
        ahead.next = q
        p = ahead
        while q:
            c = 0
            r = q.next
            while r and r.data == q.data:
                c += 1
                r = r.next
            if c:
                p.next = r
            else:
                p = q
            q = r
        return ahead.next
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
#　１．メアリーさんは　アリゾナだいがくの　がくせいですか。
#　ええ、そうです。
#　２．メアリーさんは　いちねんせいですか。
#　いいえ、にねんせいです。
#　３．たけしさんは　にほんじんですか。
#　ええ、そうです。
#　４．たけしさんは　にほんだいがくの　がくせいですか。
#　いいえ、さくらだいがくの　がくせいです。
#　５．たけしさんは　じゅうきゅうさいですか。
#　いいえ、にじゅうにさいです。
#　６．スーさんは　スウエーデンじんですか。
#　いいえ、かんこくじんです。
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
class Node: ########################################
    def __init__(self, data): #######################
        self.data = data #############################
        self.next = None ##############################
########################################################
class LinkedList: #################
    def __init__(self): ############
        self.head = None ############
        self.tail = None #############
    def append(self, new_value): ######
        new_node = Node(new_value) #####
        if self.head is None: ###########
            self.head = new_node #########
            self.tail = new_node ##########
            return #########################
        self.tail.next = new_node ###########
        self.tail = new_node #################
    def printList(self, head): ################
        if head is None: #######################
            print(' ') ##########################
            return ###############################
        curr_node = head ##########################
        while curr_node: ###########################
            print(curr_node.data,end=" ") ###########
            curr_node=curr_node.next #################
        print(' ') ####################################
########################################################    
if __name__ == '__main__': ##################
    t=int(input()) ###########################
    for cases in range(t): ####################
        N = int(input()) #######################
        a = LinkedList() ########################
        nodes = list(map(int, input().strip().split()))
        for x in nodes: ###########################
            a.append(x) ############################
        ob=Solution() ###############################
        head = ob.removeAllDuplicates(a.head) ########
        a.printList(head) #############################
########################################################
# Test Cases Passed:                           155 / 155
# Total Points Scored:                             4 / 4
# Your Total Score:                                 1382
# Total Time Taken:                                 4.09
