################################################################
################################################################
################################################################
###############################################################*
# Flatten binary tree to linked list
################################################################
################################################################
# Given the root of a binary tree, flatten the tree into a linked 
# list. The linked list should use the same Node class where the 
# right child pointer points to the next node in the list and the 
# left child pointer is always null. The linked list should be in
# the same order as a pre-order traversal of the binary tree.
###############################################=================
# Input: 1                                     1 3 4 N N 2 N N 5
#       / \
#      3   4
#         /
#        2
#         \
#          5 
# Output: 1 3 4 2 5  
# Explanation: After flattening, the tree looks like this: 
# 1
#  \
#   3
#    \
#     4
#      \
#       2
#        \ 
#         5 
################################################################
################################################################
################################################################
# Expected Time Complexity: O(n)
# Expected Auxiliary Space: O(1)
################################################################
##################################1#############################
################################# # ############################
################################ ### ###########################
###############################3#####4##########################
#################################### ###########################
###################################2############################
####################################5###########################
################################################################
################################################################
cure = None
################################################################
def swap( w ):                        #########################_
    if not w.left: return             ##########################
    w.left, w.right = w.right, w.left ##########################
###############################################################=
def f( y ):#    
    global cure#
    if not y: return#
    cure = y# 
    swap( y )#
    f( y.right )#
    cure.right = y.left#
    y.left = None#
    f( cure.right )#
###############################################################=
################################################################
####1######1#####1#####1########################################
###/#\####/#\#####\#####\#######################################
##3###4##4###3#####3#####3######################################
#####/##/###########\#####\#####################################
####2##2#############4#####4####################################
#####\##\###########/#######\###################################
######5##5#########2#########2##################################
####################\#########\#################################
#####################5#########5################################
################################################################
################################################################
class Solution:#################################################
    def flatten( self, root ):##################################
        f( root )###############################################
        return root#############################################
################################################################
################################################################
################################################################
################################################################
################################################################
   ##########      ##########      ##########      ##########   
    ########        ########        ########        ########        
from collections import deque       ########        ########
    ########        ########        ######## &      ########    
class Node:#####################################################
    def __init__(self,val):#====================================
        self.right=None#########################################
        self.data=val###########################################
        self.left=None##########################################
################################################################
################################################################
################################################################
################################################################
def buildTree(s):###############################################
    if(len(s)==0 or s[0]=="N"):return None######################
    ip=list(map(str,s.split()))#################################
    root=Node(int(ip[0]))#######################################                     
    size=0######################################################
    q=deque()###################################################
    q.append(root)##############################################
    size=size+1#################################################
    i=1#########################################################
    while(size>0 and i<len(ip)):################################
        currNode=q[0]###########################################
        q.popleft()#############################################
        size=size-1#############################################
        currVal=ip[i]###########################################
        if(currVal!="N"):######################################=
            currNode.left=Node(int(currVal))####################
            q.append(currNode.left)#############################
            size=size+1#########################################
        i=i+1###################################################
        if(i>=len(ip)):break####################################
        currVal=ip[i]###########################################
        if(currVal!="N"):#######################################
            currNode.right=Node(int(currVal))###################
            q.append(currNode.right)############################
            size=size+1#########################################
        i=i+1###################################################
    return root#################################################
################################################################
################################################################
################################################################
################################################################
def inorder(root):##############################################
    if root==None:return########################################
    inorder(root.left)##########################################
    print(root.data,end=" ")####################################
    inorder(root.right)#########################################
################################################################
################################################################
if __name__=='__main__':########################################
    root = buildTree( "1 3 4 N N 2 N N 5" )#####################
    ob = Solution()############################################_
    ob.flatten( root )##########################################
    inorder( root )#############################################
    print()#####################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
# log: When I was a kid, there was one party here, and they were
# inventng realitis like we are the good and the enemies are the
# bad etc. In America which was supposed to be exmple of freedom
# and Democracy they've multiple inventng realitis echo chambers.
# And I don't understand why you attack me non stop I don't want
# to rule; don't care about power, don't want to be leader don't
# want nobody to follow me, don't want to be famous. I'm drawing
# and programming only for myself, if you are preaching non-stop
# morality and so fort you have to be able at least to beat your
# own hate. Let me tell yu somthng I didn't watch that video and
# I remember very little from that night, OK I have figrd that I
# was talkng on the phone, but nobody destroys his life just for
# fun yu have very litle idea what I was through aftr that night.
# Don't know what are Stephanie's ideas but f** news you want to
# finish me psychologically with the transgenders? If yu want to
# dump the guilty of your faults to me that is undrstandble that
# is one of the main reasons of domestic violence, but that will
# lead you nowhere, if you want to move forward you have to look
#                                 for the errors inside yourself!
# Test Cases Passed:                                 1020 / 1020
# Total Points Scored:                                     4 / 4
# Your Total Score:                                         1206
# Total Time Taken:                                          0.1
################################################################
