################################################################
# Spirally traversing a matrix
################################################################
# Given a matrix of size r*c. Traverse the matrix in spiral form.
################################################################
# Input: r = 4, c = 4 matrix[][] = {{ 1,  2,  3,  4},
#                                   { 5,  6,  7,  8},
#                                   { 9, 10, 11, 12},
#                                   {13, 14, 15, 16}}
# Output: 1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10
###############################################################_
# Expected Time Complexity: O(r*c)
# Expected Auxiliary Space: O(r*c)
################################################################
# Constraints:
# 1 <= r, c <= 100
# 0 <= matrix[i] <= 100
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
##############################================|#################
##############################|--------------V|#################
##############################|V............'V|#################
##############################|V'............V|#################
##############################|V--------------|#################
##############################|================#################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
# a b c d                                             1  2  3  4
# e f g h                                             5  6  7  8
# i j k l                                             9 10 11 12
# m n o p                                            13 14 15 16
###############################################################_
class Solution:
    def spirallyTraverse( self, mat, rows, cols ):
        self.mat = mat
        self.rows = rows
        self.cols = cols
        self.out = []
        #######################################################=
        nlevels = ( 1 + min( self.rows, self.cols ))// 2
        for level in range( nlevels ):
            self.peel( level )
        #######################################################~
        return self.out
    def peel( self, level ):
        rows = self.get_rows( level )
        cols = self.get_cols( level )
        if not rows:
            self.out.extend( self.mat[ level ]
                                     [ level : level + cols + 1 ])
            return
        if not cols:
            if 0: print( "haHa" )
            for i in range( level, level + rows + 1 ):
                self.out.append( self.mat[ i ][ level ])
            return
        # ryte
        i = level
        for j in range( level, level + cols ):
            self.out.append( self.mat[i][j] )
        # down
        j = level + cols
        for i in range( level, level + rows ):
            self.out.append( self.mat[i][j] )
        # left
        i = level + rows
        for j in range( level + cols, level, -1 ):
            self.out.append( self.mat[i][j] )
        # top
        j = level
        for i in range( level + rows, level, -1 ):
            self.out.append( self.mat[i][j] )
    def get_rows( self, level ):
        return get_depth( self.rows, level )
    def get_cols( self, level ):
        return get_depth( self.cols, level )
###############################################################=
def get_depth( max_depth, level ):
    return max_depth - 2 * level - 1
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
#
# 螺旋                                                    らせん
#
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
if __name__=='__main__':########################################
    t=int(input())##############################################
    for _ in range(t):##########################################
        r,c=map(int,input().strip().split())####################
        values=list(map(int,input().strip().split()))###########
        k=0#####################################################
        matrix=[]###############################################
        for i in range(r):######################################
            row=[]##############################################
            for j in range(c):##################################
                row.append(values[k])###########################
                k+=1############################################
            matrix.append(row)##################################
        obj=Solution()##########################################
        ans=obj.spirallyTraverse(matrix,r,c)####################
        for i in ans:###########################################
            print(i,end=" ")####################################
        print()#################################################
################################################################
# Test Cases Passed:                                   270 / 270
# Total Points Scored:                                     4 / 4
# Your Total Score:                                         1222
# Total Time Taken:                                         0.34
