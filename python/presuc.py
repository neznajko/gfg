  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##
##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  
  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##
##  ##  ##  ##  ##  ##  #////#  ##  ##  ##  ##  ##  ##  
  ##  ##  ##  ##  ##  ##\\\\/ ##  ##  ##  ##  ##  ##  ##
##  ##  ##  ##  ##  ## //\\\\#  ##  ##  ##  ##  ##  ##  
  ##  ##  ##  ##  ## ////  \\\\#  ##  ##  ##  ##  ##  ##
##  ##  ##  ##  ## ////      \\\\#  ##  ##  ##  ##  ##  
  ##  ##  ##  ## ////   ....   \\\\#  ##  ##  ##  ##  ##
##  ##  ##  ## ////     ||||     \\\\#  ##  ##  ##  ##  
  ##  ##  ## ////||||||||||||||||||\\\\#  ##  ##  ##  ##
##  ##  ##  ''''||||            ||||''''##  ##  ##  ##  
  ##  ##        ||||||||||||||||| e a t   ##  ##  ##  ##
##  ##  ##      ||||            ||||    ##  ##  ##  ##  
  ##  ##  ##    ||||||||||||||||||||  ##  ##  ##  ##  ##
##  ##  ##  ##  ||||    ,,,,        ....##  ##  ##  ##  
  ##  ##  ##  ##||||      \\\\  ////  ##  ##  ##  ##  ##
##  ##  ##  ##  ||||        \\\\##  ##  ##  ##  ##  ##  
  ##  ##  ##  ##||||    ////  \\\\##  ##  ##  ##  ##  ##
##  ##  ##  ##  ||||////    ##  \\\\##  ##  ##  ##  ##  
  ##  ##  ##  ##////  ##  ##  ##  ''''##  ##  ##  ##  ##
##  ##  ##  """"##  ##  ##  ##  ##  ##  ##  ##  ##  ##  
  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##
# 食 (ショshoクku)
########################################################
# Predecessor and Successor
########################################################
# There is BST given, with the root node with the key
# part as an integer only. You need to find, the
# in-order successor and predecessor of a given key. If
# either predecessor or successor is not found, then
# set it to None.
########################################################
# Note: In an inorder traversal the number just smaller
# than the target is the predecessor and the number just
# greater than the target is the successor.
########################################################
# Input: 10                  10 2 11 1 5 N N N N 3 6 N 4
#       / \              _
#      2   11, key = 8 Ouptut: 6 10
#     / \                 `
#    1   5
#       / \
#      3   6
#       \
#        4
# Explanation: ...
########################################################
# Input: 8
#       / \
#      1   9
#       \   \             _  
#        4  10, key = 11 Otuput 10 -1
#       /                  `
#      3
# Explanation: blah blah blah
########################################################
# Expected Time Complexity: O(Height of the BST)
# Expected Auxiliary Space: O(Height of the BST)
########################################################
# 1 <= Number of nodes <= 10^4
# 1 <= key of node <= 10^7
# 1 <= key <= 10^7
########################################################
########################################################
# Dem[------------dehm------------------------------]The
# Wirken[------------------------------veer-kuhn-]Effect
# Beider[-----------------by-der-------------------]Both
# Verdanken[------fer-----dahn----ken------------]To owe
# Wir[-------------------------------veer------------]We
# Für[-------------------für------------------------]For
# Die[------dee-------------------------------------]The
# Gegenwart[------geg-en------------vahrt-------]Present
# Nützliche[---nyts-lik-e------------------------]Useful
# Vorgehensweisen[------for-geh----ens--vy---zen]Methods
#
# Now, let's put it all together with the English
# translation: "Dem Wirken beider verdanken wir für
# die Gegenwart nützliche Vorgehensweisen."
# English translation: "We owe the effectiveness of
# both for useful approaches in the present."
#                                                    oo
############### wo seid ihr alle? Where are you all? ###
################ wo seid ihr alle? #####################
######## am Meer, by the sea  alleMutti ################
########## am Meer wo seid ihr a Mutti #################
###### das G am Meer l seid ihr Mutti ######### das Gesp
############## am Meer  seid i Mutti ? #################
################ am Meer #### Mutti ####################
###################### wo se Mutti, Mum  ###############
####### Oma, Granny ati wo seid ihr alle? ##############
######## Oma ##### Vati  wo seid ihr alle? #############
######### Oma #### Vati # wo seid ih das Gespenst ######
########## Oma ### Vati, Dad  seid ihr alle? ###########
########### Oma ########### wo seid ihr alle? ###### das
############################ Opa   pa, Grandad #########
#### das Gespenst, ghost #### wo seid ihr alle? ########
############################## wo seid ihr alle? #######
def get_mosryte( p ):
    if not p: return None
    while p.right: p = p.right
    return p.key
########################################################
########################################################
########################################################
########################################################
def get_mosleft( p ):
    if not p: return None
    while p.left: p = p.left
    return p.key
########################################################
########################################################
########################################################
########################################################
class Solution:
    def findPreSuc( self, root, pre, suc, key ):
        p = root
        lbound = None
        ubound = None
        while p:
            if p.key > key:
                ubound = p.key
                p = p.left
            elif p.key < key:
                lbound = p.key
                p = p.right
            else:
                mosleft = get_mosryte( p.left  )
                mosryte = get_mosleft( p.right )
                if mosleft: lbound = mosleft
                if mosryte: ubound = mosryte
                break
        pre.key = lbound
        suc.key = ubound
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
import queue############################################
########################################################
class Node:#############################################
    def __init__(self, key):############################
        self.key = key##################################
        self.left = None################################
        self.right = None###############################
########################################################
def buildTree(ip):######################################
    if len(ip) == 0 or ip[0] == 'N':####################
        return None#####################################
    root = Node(int(ip[0]))#############################
    q = queue.Queue()###################################
    q.put(root)#########################################
    i = 1###############################################
    while not q.empty() and i < len(ip):################
        currNode = q.get()##############################
        currVal = ip[i]#################################
        if currVal != "N":##############################
            currNode.left = Node(int(currVal))##########
            q.put(currNode.left)########################
        i += 1##########################################
        if i >= len(ip):################################
            break#######################################
        currVal = ip[i]#################################
        if currVal != "N":##############################
            currNode.right = Node(int(currVal))#########
            q.put(currNode.right)#######################
        i += 1##########################################
    return root#########################################
########################################################
t = int(input())########################################
for _ in range(t):######################################
    s = input()#########################################
    root = buildTree(s.split())#########################
    k = int(input())####################################
    pre = Node(None)####################################
    succ = Node(None)###################################
    ob = Solution()#####################################
    ob.findPreSuc(root, pre, succ, k)###################
    if pre.key:#########################################
        print(pre.key, end=' ')#########################
    else:###############################################
        print(-1, end=' ')##############################
    if succ.key:########################################
        print(succ.key, end=' ')########################
    else:###############################################
        print(-1, end=' ')##############################
    print()#############################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
# 1) You: なんねんせいですか。
#    Kimura: よねんせいです。
# 2) You: せんこうは　なんですか。
#    Kimura: れきしです。
# 3) You: なんさいですか。
#    Kimura: じゅうきゅうさいです。
# 4) You: でんわばんごうは　なんですか。
#    Kimura: よんさんの　ろくきゅういちななです。
# 5) You: なんじですか。
#    Kimura: いま　くじはんです。
########################################################
#　あaれre　、that one( over there ); あれ、あれ｀あれ；
#　どdoれre　、which one; どれ；どれ＿どれ＞
########################################################
########################################################
########################################################
########################################################
########################################################
# Test Cases Passed:                         1122 / 1122
# Total Points Scored:                             4 / 4
# Your Total Score:                                 1418
# Total Time Taken:                                 0.57
