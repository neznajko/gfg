







#                    ````   ````````````                       #
#                ````----```------------`                      #
#    `         ``----====-`-============-`                     #
#            `---====    =-=            =-      `      `       #
#           `-===     ===-`-============----`                  #
#      `    -=    ========--================-`                 #
#         ```-========    ==                =-      `          #
# `       ----====    ====--=========   ====-`                 #
#       `-====      ==----``--------=   =---`                  #
#      `-=    ===   =-````  ```````-=   =-``                   #
#       `-====--=   =-`           `-=            =    -        #
#  `      ------=   =-`           `-=   =-`                    #
#         `````-=   =-`           `-=   =-`                    #
#         `    -=   =-`          `--=   =   -     `            #
#             `-=   =-`         `-==   =-`                     #
#           `  -=  =-          `-=  ===-`                      #
#              `-==-`           `-==---`                       #
#               `--`             `--`   `    `                 #
#      `          `               ``                           #

# 行（コkoウu）
################################################################
################################################################
################################################################
################################################################
# Min Time
################################################################
################################################################
################################################################
################################################################
# Given an array locations[] of size n where locations[i] represents
# the location of the ith fruit on the x-axis and also given an array
# types[] where types[i] is an integer which represents the type of
# the ith fruit. You are initially at coordinate 0 and you have to
# collect all the fruits and then return back to coordinate 0
# again. To move 1 unit on the x-axis requires 1 second of time. The
# only condition is that you have to collect the fruits in a
# non-decreasing order of their types[i] (for example if ith fruit has
# type[i]=1 and jth fruit has type[j]=2 then ith fruit has to be
# picked before jth fruit). Find minimum time to collect all fruits in
# the non-decreasing order of their types and return back to
# coordinate 0.
################################################################
# Input: n=4 locations={1,3,5,7} types={1,2,3,1}
# Output: 18
# Explanation: You start at x=0 and move to x=7 and in the way pick
# fruits of type 1 at x=1 and x=7 and it took total 7 seconds to move
# from 0->7 now you move to x=3 in 4 seconds and than to x=5 in 2
# seconds and than return back to x=0 in 5 seconds. So overall it
# took 18 seconds(7+4+2+5).
################################################################
# Expected Time Complexity: O(n)
# Expected Space Complexity: O(n) 
################################################################
# 1 <= n <= 10^5
# -10^9 <= locations[i] <= 10^9
# 1 <= types[i] <= 10^5
################################################################
################################################################
################################################################
################################################################
# Die künstlerisch und didaktisch berühmtesten Beispiele sind die
# Leonardo da Vincis( oben ) und Albrecht Dürers ( unten ).
################################################################
################################################################
################################################################
################################################################
# Certainly! The German sentence you provided can be broken down
# as follows:
#  1. Die                                                    the
#  2. künstlerisch und didaktisch  artistically and didactically
#  3. berühmtesten                                   most famous
#  4. Beispiele                                         examples
#  5. sind                                                   are
#  6. die                                                    the
#  7. Leonardo da Vincis                                     ...
#  8. (oben)                                               above
#  9. und                                                    and
# 10. Albrecht Dürers                                        ...
# 11. (unten)"                                             below
################################################################  
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
#########        ##########        #############################
########        ##########        ##############################
#######        ##########        ###############################
######        ##########        ################################
#####        ##########        #################################
####........##########........##################################
#####........##########........#################################
######        ##########        ################################
#######        ##########        ###############################
########        ##########        #############################_
from math import inf#######        #############################
LEFT, RYTE = 0,1################################################
SENTINEL = [ 0, 100001 ]########################################
class Solution:
    def minTime( self, n, locations, types ):
        self.range = { 
            SENTINEL[ LEFT ]: [ 0, 0 ],
            SENTINEL[ RYTE ]: [ 0, 0 ],
        }
        min_typ = SENTINEL[ RYTE ]
        max_typ = SENTINEL[ LEFT ]        
        for typ, loc in zip( types, locations ):
            if max_typ < typ: max_typ = typ
            if min_typ > typ: min_typ = typ
            if typ in self.range:
                r = self.range[ typ ]
                r[ LEFT ] = min( r[ LEFT ], loc )
                r[ RYTE ] = max( r[ RYTE ], loc )
            else:
                self.range[ typ ] = [ loc, loc ]
        #
        self.typs = [ SENTINEL[ LEFT ]]
        for typ in range( min_typ, max_typ + 1 ):
            if typ in self.range:
                self.typs.append( typ ) # O(N) sorting
        self.typs.append( SENTINEL[ RYTE ])
        return self.dOthEMAth()
################################################################
#           |    |    |    |    x    |    |    |    | 100001
#           |    |    |    |    |    |    |    |    | 8
#           |    |    |    |    |    |    |    |    | 7
#           |    |    |    |    |    |    |    |    | 6
# 0031 0027 |    |    |    v    |    -    |    v    | 5
# 0021 0025 |    v    |    |    |    v    |    |    | 4
# 0014 0014 |    |    |    |    |    |    |    |    v 3
# 0011 0012 |    |    |    v    -    |    v    |    | 2
# 0008 0007 |    |    v    |    |    |    |    v    | 1
# 0000,0000 +----+----+----+----x----+----+----+----+ 0
#          -4   -3   -2   -1    0   +1    2    3    4
    def dOthEMAth( self ):
        ntyps = len( self.typs )
        time = [[ 0, 0 ]]
        for j in range( 1, ntyps ):
            time.append([ inf, inf ])
            src = self.range[ self.typs[ j - 1 ]]
            dst = self.range[ self.typs[ j ]]
            for s in LEFT,RYTE:
                A = src[ s ]
                B, C = dst
                cure_time = time[ j - 1 ][ s ]
                time_travel = get_time_travel( A, B, C )
                for d in LEFT,RYTE:
                    update_time = cure_time + time_travel[ d ]
                    time[ j ][ d ] = min( time[ j ][ d ], update_time )
        return time[ -1 ][ 0 ]

#        -      #        -      #        -      #        -       
##      ---    ###      ---    ###      ---    ###      ---    #
###    -----  #####    -----  #####    -----  #####    -----  ##
####  -------#######  -------#######  -------#######  -------###
#####-------#########-------#########-------#########-------####
######-----###########-----###########-----###########-----#####
#######---#############---#############---#############---######
########-###############-###############-###############-#######
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
########## src ######### dst #################### dst ##########
################################################################
########### A ########### B ######### < ########## C ###########
# ----------x-------------x------------------------x------------
################################################################
def get_time_travel( A, B, C ):
    t_AC = C - A          # A<-----C
    t_BA = A - B          # B<-----A
    t_BC = C - B          # B<-----C
    if A <= B:            # A           B                 C
        t_C = t_AC        # ------------|----------------->-----
        t_B = t_C + t_BC  # +           <-----------------|
    elif A >= C:          #   B       C            A  
        t_B = t_BA        # --<--------------------|------------
        t_C = t_B + t_BC  # + |-------> 
    else:                 # B             A             C
        t_B = t_AC + t_BC # <-------------|<------------>-------
        t_C = t_BA + t_BC # <------------>|------------->-------
    return t_B, t_C       # 
########################## #####################################
################################################################
################################################################
################################################################
#_______________________________________________________________
#_______________________________________________________________
#_____________________________________auf_dem_Land<_in_the_country >
#______________die_Wohnung[_flat_]____auf_dem_Land<_in_the_country >
#_oder(_or_)__die_WohnungdaslSchloss{_caufldem_Land<_in_the_country >
#__oder(_or_)die_WohnungdaslSchloss{_caaufedem_Land<_in_the_country >
#___oder(_ordie_WohnungdaslSchloss{_castauf}dem_Land<tintthencountryw> )
#____oder(_die_WohnungdaslSchloss{_castlauf_dem_Land<tintthencountryw> )
#_____oder(_or_)_____das_Schloss{_castle_}___in_der_Stadt(_in_the town )
#______oder(_or_)___das_Schloss{_castle_}____in_der_Stadt(_in_the town )
#____________________________________________in_der_Stadt(_in_the town )
#_______________________________________________________________
#_______________________________________________________________
#_______________________________________________________________
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
class IntArray:#################################################
    def __init__(self) -> None:#################################
        pass####################################################
    def Input(self,n):##########################################
        arr=[int(i) for i in input().strip().split()]###########
        return arr##############################################
    def Print(self,arr):########################################
        for i in arr:###########################################
            print(i,end=" ")####################################
        print()#################################################
################################################################
################################################################
################################################################
################################################################
if __name__=="__main__":########################################
    t = int(input())############################################
    for _ in range(t):##########################################
        n = int(input())########################################
        locations=IntArray().Input(n)###########################
        types=IntArray().Input(n)###############################
        obj = Solution()########################################
        res = obj.minTime(n, locations, types)##################
        print(res)##############################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
# 1) Ms. Ogawa is Japanese.
# 2) Mr. Takeda is a teacher.
# 3) I am an international student.
# 4) Haruna is a first-year student.
# 5) Ms. Yamamoto is 25 years old.
# 6) My major is Japanese.
################################################################
################################################################
################################################################
################################################################
#　１）おがわさんは　にほんじんです。
#　２）たけださんは　せんせいです。
#　３）わたしは　りゅうがくせいです。
#　４）はるなさんは　いちねんせいです。
#　５）やまもとさんは　にじゅうごさいです。
#　６）わたしの　せんこうは　にほんごです。
################################################################
################################################################
################################################################
################################################################
################################################################
# Test Cases Passed:                                 1120 / 1120
# Total Points Scored:                                     8 / 8
# Your Total Score:                                         1414
# Total Time Taken:                                         2.76
