# mmmmmmmmmmmmmmmmmmmmmmmmmmmmmm mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
# mmmmmmmmmmmmmmmmmmmmmmmmmmmm     mmmmmmmmmmmmmmmmmmmmmmmmmmmmm
# mmmmmmmmmmmmmmmmmmmmmmmmmm         mmmmmmmmmmmmmmmmmmmmmmmmmmm
# mmmmmmmmmmmmmmmmmmmmmmmm     -   mmmmmmmmmmmmmmmmmmmmmmmmmmmmm
# mmmmmmmmmmmmmmmmmmmmmm     -----mmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
# mmmmmmmmmmmmmmmmmmmm     -----     mmmmmmmmmmmmmmmmmmmmmmmmmmm
# mmmmmmmmmmmmmmmmmm         -          mmmmmmmmmmmmmmmmmmmmmmmm
# mmmmmmmmmmmmmmmm         mmmmm           mmmmmmmmmmmmmmmmmmmmm
# mmmmmmmmmmmmmm         mmmmmmmmmm           mmmmmmmmmmmmmmmmmm
# mmmmmmmmmmmm         mmmmmmmmmmmmmmm           mmmmmmmmmmmmmmm
# mmmmmmmmmm         mmm             mmmm      mmmmmmmmmmmmmmmmm
# ============     ========================= ===================
# ============== ===         \           =======================
# ==================        \\\\         =======================
# =========================    =================================
# ========================    ==== =============================
# =======================    ====   ============================
# ______________________    ______   ___________________________
# _____________________    __      // __________________________
# ____________________````          // _________________________
# _____________________``      ______   ________________________
# ____________________________________ _________________________
# ______________________________________________________________
# ______________________________________________________________
# ..............................................................
# ..............................................................
# ..............................................................
# ..............................................................
################################################################
# Clone a stack without using e8tra space、会,kaカiイ
################################################################
# Given elements of a stack, clone the stack without using extra
# space.
################################################################
# Your Task: You don't need to read input or print anything. 
# Your task is to complete the function clonestack() which takes
# the input stack st[], an empty stack cloned[], you have to 
# clone the stack st into stack cloned. The driver code itself 
# prints 1 in the output if the stack st is cloned properly and
# prints 0 otherwise.
################################################################
# Expected Time Complexity: O(N^2)
# Expected Auxiliary Space: O(1)
################################################################
# 1 <= N <= 1000
# 1 <= st[i] <= 10^5
#####################s##########################################
###############o####e###########################################
########e#####s####g############################################
#######e#####l####a#############################################
######s#####a####p##############################################
# .. (siehe auch Seiten 17,19,27), die sich nach dem anatomisch
# bezeichenbaren Meßpunkten richtet.
##d##############m##p#######t###################################
###e##############e##o#######o##################################
####s##############a##i#########################################
#####i##############s##n#######d################################
######g##############u##t#######i###############################
#######n##############r##########r##############################
########a##############e##########e#############################
#########t#########################c############################
##########e#########################t###########################
################################################################
##########|##############|######################################
# stk     | cp           |    n <- stk.size        #############
# 1, 2, 3 | <empty>      | 0: if n = 0 goto 1      #############
# <empty> | 3, 2, 1 -> 1 |    loop n times:        #############
# 1, 2, 3 | <empty>    1 |      cp.push( stk.pop ) #############
# 1, 2, 3 | 1       <-   |    y <- cp[-1]          ############# 
# 1       | 1, 3, 2 -> 2 |    loop n times:        #############
# 1, 2, 3 | 1          2 |      stk.push( cp.pop ) #############
# 1, 2, 3 | 1, 2    <-   |    cp.push( y )         #############
# 1, 2    | 1, 2, 3 -> 3 |    n -= 1               ############# 
# 1, 2, 3 | 1, 2       3 |    goto 0               #############
# 1, 2, 3 | 1, 2, 3 <-   | 1: exit                 #############
##########|##############|######################################
################################################################
################################################################
################################################################
# s e i n   h i s
###### ##### # ################################################# 
###### ##### # #################################################
#                      F r ü h s t ü c k   b r e a k f a s t
####################### ### # ### # ### ### ####### # ##### ####
####################### ### # ### # ### ### ####### # ##### ####
#      M i t t a g e s s e n   l u n c h
####### # # # ### ############# ####### ### ####### # ##### ####
####### # # # ### ############# ####### ########################
#                                            Abendessen - supper
#############################################  ## ##########  ##
#############################################  ## ##########  ##
#      Schule school
####### # # #### ## #########################  ## ##########  ##
####### # # #### ## #########################  ## ##########  ##
#                           Bett bed
####### # # #### ## ######## #  # # ############################
####### # # #### ## ######## #  # # ############################
class Solution:
    def clonestack( self, stk, cp ):
        n = len( stk )
        while n > 0:
            for _ in range( n ): cp.append( stk.pop())
            y = cp[-1]
            for _ in range( n ): stk.append( cp.pop())
            cp.append( y )
            n -= 1
############ r m c l e  io s i p r  d qu #######################
########### r m col e  io s i p r  d qu ########################  
########## r m col ec io s i p r  d qu #########################
######### r m col ec io s imp r  d qu ##########################
######## r m col ec ions imp r  d qu ###########################
####### r m col ec ions imp r  d que############################
###### r m col ec ions imp rt d que#############################
##### r m col ec ions imp rt deque##############################
####fr m col ec ions imp rt deque###############################
###fr m col ec ions import deque################################ 
##from col ec ions import deque#################################  
#from col ections import deque##################################  
from collections import deque 
if __name__=='__main__':########################################
    t=int(input())##############################################
    for _ in range(t):##########################################
        N=int(input())##########################################
        arr=list(map(int,input().split()))###################   
        st=deque()########################################### d 
        copy=[]############################################## r  
        for i in range(N):################################### i 
            st.append(arr[i])################################ v
            copy.append(arr[i])############################## e 
        copy=copy[::-1]###################################### r 
        cloned=deque()#######################################
        ob=Solution()########################################
        ob.clonestack(st,cloned)#############################
        check=[]#############################################
        while len(cloned):###################################
            check.append(cloned.pop())####################### c
        flag=0############################################### o
        if copy!=check:###################################### d
            flag=1########################################### e
        print(1-flag)########################################  
################################## ############################# 
#################################  ############################ 
################################   ###########################  
###############################    #we4er####################   
 ###############################################################
  ############################################################## 
   ############################################################# 
    ############################################################ 
#    ________________________-----------__________________
# 1. Ms. Tanaka is Japanese. Mr. Yoshida is Japanese, too.
#    tanaka san wa nihonjin desu. yoshida san mo nihonjin desu.
#    ``  `` ``     ``  `  ` ``    ``   `` ``     ``  `  ` ``
#    たなか｜さん｜は｜にほんじん｜です。
#    よしだ｜さん｜も｜にほんじん｜です。
#    ________________________________-----------________________
# 2. Ms. Tanaka is twenty years old. Mr. Yoshida is twenty years
#    old, too.
#    tanaka san wa nijyussai desu. yoshida san mo hatachi sai
#    ``  `` ``     ``  ` ``  ``    ``   ``   `      ``      ` 
#    desu.
#      ``
#    たなか｜さん｜は｜にじゅっさい｜です。
#    よしだ｜さん｜も｜はたち｜さい｜です。
#    _____________________________---------------_____________
# 3. This dictionary is 2000 yen. That dictionary is 2000 yen, 
#    too.
#    kono jisho wa nisen en desu. sono jisho mo nisen en desu.
#      ``   ```      ``       ``    ``   ```    ``         ``  
#    この｜じしょ｜は｜にせん｜えん｜です。
#    その｜じしょ｜も｜にせん｜えん｜です。
#    ____________________----____________________                    
# 4. This is my bicycle. That is my bicycle, too.
#    kore wa watashi no jitensha desu. sore mo watashi no
#    ``      ``  ```    ``  `    ``      ``    ``  ```    
#    jitensha desu.
#    ``  `    ``
#    これ｜は｜わたし｜の｜じてんしゃ｜です。
#    それ｜も｜わたし｜の｜じてんしゃ｜です。
#    ____________________________--------________________
# 5. Takeshi's major is history. My major is history too.
#    takeshi san no senkou wa rekishi desu. watashi no senkou mo
#    ``  ```   `    `` ``    ``  ```   ``    ``          `  `
#    rekishi desu.
#    ``  ``  ``
#    たけし｜さん｜の｜せんこう｜は｜れきし｜です。
#    わたし      ｜の｜せんこう｜も｜れきし｜です。 
################################################################
################################################################
################################################################
################################################################
# I'm going to Japan on Monday.
################################################################
# にほん、にっぽん（日本）
# Therefore, "日本" can be translated as "origin of the sun" or 
# more commonly as "Japan."                           -- GPT 3.5
#########################^#old#bug##############################
#### i/ki/ - going _ いき
#### ge/tsu/yo/u/bi/ - Monday _ げつようび
################################################################
# げつようび｜に｜にほん｜に｜いきます。
################################################################
################################################################
################################################################
################################################################
# Test Cases Passed:                                     26 / 26
# Total Points Scored:                                     4 / 4
# Your Total Score:                                         1514
# Total Time Taken:                                         0.61

