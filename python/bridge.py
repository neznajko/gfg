################################################################
################################################################
################################################################
################################################################
# Bridge edge in a graph
################################################################
################################################################
# Given a Graph of V vertices and E edges and another edge (c-d)
# , the task is to find if the given edge is a Bridge. i.e., rem
# oving the edge disconnects the graph
################################################################
# Input: 0-1-2-3, c = 1, d = 2
# Output: 1
# Explanation: From the graph we can clearly see that blocking t
# he edge 1-2 will result in disconnection of the graph. So it i
# s a Bridge and thus the Output 1
################################################################
# Input: 1-0-3, c = 0, d = 2
#        |/  |
#        2   4
# Output: 0
# Explanation: blocking the edge between nodes 0 and 2 won't aff
# ect the connectivity of the graph. So, it's not a Bridge Edge.
################################################################
# Expected Time Complexity: O(V + E)
# Expected Auxiliary Space: O(V)
################################################################
# 1 ≤ V,E ≤ 10^5
# 0 ≤ c,d ≤ V-1
################################################################
YS = 1
NO = 0
################################################################
################################################################
################################################################
################################################################
class Graph:
    def __init__( self, n, adj ):
        self.n = n
        self.adj = adj
    def reset( self ):
        self.vztd = [ False ] * self.n
        self.nvztd = 0
    def explore( self, v ):
        self.vztd[ v ] = True
        self.nvztd += 1
        for u in self.adj[ v ]:
            if not self.vztd[ u ]:
                self.explore( u )
    def dfs( self, start ):
        self.reset()
        self.explore( start )
        return self.nvztd
    def remov_edge( self, c, d ):
        self.adj[ c ].remove( d )
        self.adj[ d ].remove( c )
################################################################
################################################################
#### 
####  みぎ　 右　  »>  まえ 前  >>  ちかく 近く  »»  した 下  
####  ひだり 左　  >>  なか 中  »>  あいだ 間
####  うしろ 後ろ  »>  うえ 上  
####  となり 隣　  >»  
####  
#############################################################
############################################################### 
################################################################
################################################################
###################     ########################################
###################          ######  ##     ##  #              \
###################     \\     ###    #     #    #             \
###################     //      ###             #              /
###################     /      #####  %     %  #               /
###################     \     ##                   #           |
###################     \\     #####           #               \
###################     \\\     ::               :::::::::::::::
###################     ///          .:     :.     :::::::::::::
###################     //     ::  .:::     :::.  ::::::::::::::
###################     /     :   :::::.....:     ::::::::::::::
###################         #                       #          |
###################       #       \    #    |     #            |
###################     #     #       ##    |     #            |
###################     ###  ###     #              #          \
###################     ######      #########     #            |
############################      ###########     #            |
##############################  ################################
################################################################
##############      z    @    +    _      ######################
#################### #### #### #### ############################
#################### #### #### #### ########################### 
#################### #### #### #### #########################   
class Solution:##### #### #### #### #####################
    def isBridge( self, V, adj, c, d ):
        if c == d: return NO
        g = Graph( V, adj )
        m = g.dfs( c )
        g.remov_edge( c, d )
        n = g.dfs( d )
        return [ YS, NO ][ m == n ]
################################################################
################################################################
################################################################
################################################################
from collections import OrderedDict
################################################################
import sys; sys.setrecursionlimit( 1000000 ) 
################################################################
if __name__=='__main__': #######################################
    t=int(input()) #############################################
    for i in range(t): #########################################
        V,E=list(map(int,input().strip().split())) #############
        adj=[[] for i in range(V)] #############################
        for i in range(E): #####################################
            a,b=map(int,input().strip().split()) ###############
            adj[a].append(b) ###################################
            adj[b].append(a) ###################################
        for i in range(V): #####################################
            adj[i]=list(OrderedDict.fromkeys(adj[i])) ########## 
        c,d=map(int,input().split()) ###########################
        ob=Solution() ##########################################
        print(ob.isBridge(V,adj,c,d)) ##########################
################################################################
################################################################
# Test Cases Passed:                                          55
# Points Scored:                                               4
# Your Total Score:                                         1878 
# Time Taken:                                               0.53
################################################################
###############################   ####   ######   ##########   #
##1.5.9*#A#coil#is#pulled#by#a#thread#with#velocity#v#at#angle α
##to#horizon.#The#coil#moves#without#slip.#What's the#velocity o
###################7#######f#coil's#axis and#the angular#velocit
##################/########y?#The thread is#long enough#so#the a
##             v / α   ####ngle α doesn't#change  ##########   #
##    R   .     /- - - ########   ####   ######   ##########   #
##     `     ` /       ########   ####   ######   ##########   #
##   `   . .  /        ####The#main#question#here is#why#the ang
##  `   `   `/  `      ####ular velocity,#ω#is#not#equal#to#v/r?
##  `   r. .`   `      ####When the#coil moves#the#thread#also m
##   `         `       ####oves, so#if we#take#one#point#at#it a
##     `  .  `         ####nd#look#at#its#position#at#two#moment
##/////////////////////####s#it will#look#something#like#this: #
###############################   ####   ######   ##########   #
###############################   ####  /######   ##########   #
###############################        /B                     /#
###############################       /                      / #
###############################      /                      /  #
###############################     /                      /   #
###############################    /                      /    #
###############################   /                      /     #
###############################  /                      /      #
############################### /                      /       #
###############################/                      /        #
###############################                      /A        #
###############################                     /          #
###############################   ####   ######   ##########   #
#+----+-----+----------+----+-----+-------+-------+-----+-------
#| zo | the | velocity | of | the | point | where | the | thread
#_+---_----+_----+-----_+---_+----_+---+--_----+--_-+---_--+---+
# | leaves | the | coil | is | not | v | there | is | also | a |
#-_--------_+----_------_---+_---+-_--+_+-----+_---+_------_---_
# component | perpendicular | to | it | which | is | responsible
#-+-----+---_----+-----+----_---+_----_----+--_-+--_-----+------
# | for | moving | the | thread | parallel | to | itself | #####
#-_-----_--------_-----_--------_----------_----_--------_ #####
#                                                          #####
################################################################
########........................................................
########......................................................#.
########...................................................#....
########................................................#.......
########.............        ########################`##########
########.........    ########    #################`#############
########......   ################   ###########`################
########...   ######################   #####`###################
########...   ########      ########   ##`######################
########   #########  ######  ########`   ######################
########   #######  ##########  ###`###   ######################
########   #########  ######  ##`######   ######################
########...   ########      B`######   #########################
########...   ######################   #########################
########......   ################   ############################
########.........    ########    ###############################
########.............        ###################################
########////////////////////////////////////////////////////////
################################################################
#### The velocity at point B is a sum of two factors, one is the
#### velocity of the axis u and the other is due to the rotation
#### of the coil ωr, let's assume the coil is moving to the left
#### so we'll have thus picture:::::::::::::::::::::::::::::::::
####                              without slip we'll have u = ωR
####                              The projection of the velocity
####                  7 ωr        over the thread direction is::
####                 /            ωr - ucosα = ur|R - ucosα ====
####      u         / α           = u(r - Rcosα)|R, so this shou
####      <--------B - - - -      ld be equal to v, the other co
####                              mponent usinα moves the thread
####                              perpendicular to itself, so we
#### have: u = vR|(r - Rcosα), usually the positive direction of
#### coordinate x let's say is on the right, so in this case the
#### u is negative, I'm trying to get same as the answer given t
#### hat is u = vR|(Rcosα - r), with the convention that if u is
#### negative that is cosα < r\R, the coil goes to the left, and
#### if cosα > r/R to the right, what will happen if cosα = r|R,
#### I can only imagine probably some black hole or something
#######################################################
###########################################
###########################
####
