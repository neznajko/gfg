    ################################################
    ################################################
    ################################################
    ################################################
    ########::::::::::::::::::::::::::::::::########   
    ########::::::::::::::::::::::::::::::::########   
    ########:::                          :::########   
    ########:::   :::::::  ::  :::::::   :::########   
    ########:::   ::::::  :::  :::::::   :::########    
    ########:::   :::::  ::::  :::::::   :::########   
    ########:::   :::  ::::::  ::::  :   :::########   
    ########:::   :  :::::::::      ::   :::########
    ########:::   ::::::::::::::::::::   :::########
    ########:::   ::::::::::::::::::::   :::########
    ########:::   ::::::::::::::::::::   :::########
    ########:::                          :::########
    ########:::   ::::::::::::::::::::::::::########
    ########::::::::::::::::::::::::::::::::########
    ########::::::::::::::::::::::::::::::::########
    ################################################
    ################################################
    ################################################
    ################################################    
    ################################################    
    ################################################ よ  
    ################################################ ん  
    ################################################ ヨ
    ################################################ ン        


    ################################################





    ################################################









    ################################################






























########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################       oo
# Next Greater Element ##########################################
#################################################################
# Given an array arr[] of size n having distinct elements, ######
# the task is to find the next greater element for each element #
# of the array in order of their appearance in the array. #######
# Next greater element of an element in the array is the ########
# nearest element on the right which is greater than the ########
# current element. If there does not exist next greater of ######
# current element, then next greater element for current ########
# element is -1. For example, next greater of the last element ##
# is always -1. #################################################
########################################################
# Input: n = 4, arr[] = [1 3 2 4] Output: 3 4 4 -1 #####
########################################################
# Expected Time Complexity: O(n) #######################
# Expected Auxilliary Space: O(n) ######################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
# そうですか　そうですか　そうですか　そうですか
class Solution:
    def nextLargerElement( self, a, n ):
        a.append( -1 )
        stk = []
        for j in range( n ):
            key = a[j + 1]
            if a[j] < key:
                a[j] = key
                while stk:
                    i = stk[-1]
                    if a[i] >= key: break
                    a[i] = key
                    stk.pop()
            else:
                stk.append( j )
        a.pop()
        while stk:
            i = stk.pop()
            a[i] = -1
        return a
########################################################
#######################################################=
# せんせい　せんせい　せんせい　せんせい　せんせい
########################################################
if __name__=='__main__':################################
    test_cases=int(input())#############################
    for cases in range(test_cases):#####################
        n=int(input())##################################
        a=list(map(int,input().strip().split()))########
        obj=Solution()##################################
        res=obj.nextLargerElement(a,n)##################
        for i in range(len(res)):#######################
            print(res[i],end=" ")#######################
        print()#########################################
########################################################
########################################################
# Test Cases Passed:                           158 / 158
# Total Points Scored:                             4 / 4
# Your Total Score:                                 1270
# Total Time Taken:                                 2.26
