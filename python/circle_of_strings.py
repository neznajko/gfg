##########                      ##############################
###################    ################### ###################
###################    ###################  ##################
###################    ###################   #################
###################    ##################      ###############
###################     ################        ##############
####################      ############           #############
######################       ######              #############
########################                       ###############
############################               ###################
################################      ########################
#############                #################################
######    #########    #######################################
######                              ##########################
######    ###    ##    ##    ###    ##########################
###################    #######################################
#############    ##    ##    #################################
##############################################################
##########                      ##############################
##########    #####    #####    ##############################
##########    #####    #####    ##############################
##########                      ##############################
##########    #####    #####    ##############################
##########    #####    #####    ##############################
# Circle of strings, 電、デン( den ), electricity
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
# Given an array of lowercase strings A[] of size N, determine
# if the strings can be chained together to form a circle. A
# string X can be chained together with another string Y if
# the last character of X is same as first character of Y. If
# every string of the array can be chained with exactly two
# strings of the array (one with the first character and
# second with the last character of the string), it will form
# a circle.
##############################################################
##############################################################
##############################################################
##############################################################
# For example, for the array arr[] = {"for", "geek", "rig",
# "kaf"} the answer will be Yes as the given strings can be
# chained as "for", "rig", "geek" and "kaf"
##############################################################
##############################################################
##############################################################
##############################################################
# Input: N = 3 A[] = { "abc", "bcd", "cdf" }
# Output: 0
# Explaination: These strings can't form a circle because no
# string has 'd'at the starting index.
##############################################################
##############################################################
##############################################################
##############################################################
# Input: N = 4 A[] = { "ab" , "bc", "cd", "da" }
# Output: 1
# Explaination: These strings can form a circle  of strings.
##############################################################
##############################################################
##############################################################
##############################################################
# Expected Time Complexity: O(N)
# Expected Auxiliary Space: O(N)
##############################################################
##############################################################
##############################################################
##############################################################
# 1 ≤ N ≤ 10^4
# 1 ≤ Length of strings ≤ 20
##############################################################
##############################################################
##############################################################
##############################################################
# Die unteren( the lower )                                 [v]
# Darstellungen( to represent )                            [x]
# illustrieren( illustrate )                               [v]
# das Analogieverfahren( analogous methods )               [v]
# durch( through )                                         [v]
# weitere( further )                                       [x]
# Vergleichbarkeiten( comparisons )                        [x]
##############################################################
##############################################################
##############################################################
##############################################################
class Offset:
    ORDA = ord( 'a' )

    @staticmethod
    def get( ch ):
        return ord( ch ) - Offset.ORDA

##############################################################
##############################################################
##### Sie kauft Milch und Eier im Lebensmittelgeshäft.
##### Lebensmittel food
#####  ````````````||||
##### Sie kauft Obst und Gemüse auf dem Market.
##### obst fruid
#####  ````|||||
##### gemüse vegetables
#####  ``````||||||||||
##### Sie kauft Fleisch in der Metzgerei.
##### fleisch meat
#####  ```````||||
##### metzgerei butcher's
#####  `````````|||||||'|
##############################################################
##############################################################
class Solution:
    MA8SIZE = Offset.get( 'z' ) + 1 # 26

    def cons( self, a ):
        def alphabet():
            return [[] for _ in range( Solution.MA8SIZE )]
        fwd_adj = alphabet()
        bwd_adj = alphabet()
        F = set()
        B = set()
        for word in a:
            i = Offset.get( word[ 0 ])
            j = Offset.get( word[-1 ])
            fwd_adj[ i ].append( j )
            bwd_adj[ j ].append( i )
            F.add( i )
            B.add( j )
        self.fwd = Graph( fwd_adj, F )
        self.bwd = Graph( bwd_adj, B )

    def flowcheck( self ):
        for j in range( Solution.MA8SIZE ):
            if( len( self.fwd.adj[ j ]) != 
                len( self.bwd.adj[ j ])): return False
        return True

    def isCircle( self, n, a ):
        self.cons( a )
        if not self.flowcheck(): return 0
        for u in self.fwd.V: break # Stack Overflow
        self.fwd.explore( u )
        if self.fwd.V: return 0
        self.bwd.explore( u )
        if self.bwd.V: return 0
        return 1

##############################################################
##############################################################
##############################################################
##############################################################
class Graph:
    def __init__( self, adj, V ):
        self.adj = adj
        self.V = V
    def explore( self, u ):
        self.V.remove( u )
        for v in self.adj[ u ]:
            if v in self.V:
                self.explore( v )

##############################################################
##############################################################
##### i_reru, 入れる、to put in
##### わたし｜の｜かばん｜の｜なか｜に｜入れました。
##### I put it inside my bag.
#####
##### au, あう、meet
##### irigachi, いりぐち、入口、entrance
##### 入口｜で｜あいましょう。
##### Let's meet at the entrance.
#####
##### asobi, あそび、play
##### こうえん｜で｜あそびます。
##### I'm going to play at the park.
##############################################################
##############################################################
##############################################################
if __name__=='__main__':        
    t=int(input())              ##############################
    for _ in range(t):          ##############################
        N=int(input())          ##############################
        A=input().split()       ##############################
        ob=Solution()           ##############################
        print(ob.isCircle(N,A)) ##############################
##############################################################
#### Q: あれは　なんですか。
#### A: あれは　としょかんです。(Library)
#### A: あれは　だいがくです。(University)
#### A: あれは　ぎんこうです。(BANK)
#### A: あれは　じゅうびんきょくです。(Post Office)
#### A: あれは　きっさてんです。(Coffee Shop)
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
##############################################################
# Test Cases Passed:                             10316 / 10316
# Total Points Scored:                                   8 / 8
# Your Total Score:                                       1590
# Total Time Taken:                                       0.28
