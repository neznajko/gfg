#      /\  /        \  /\  /        \  /\              
#  __ /__\/    __    \/__\/    __    \/__\ __  __  __  
#/\  /\  /   /\   \   \  /   /\   \   \  /\  /\  /\  /\
#__\/__\/   /  \   \   \/   /  \   \   \/__\/__\/__\/__\
#  /       /    \   \      /    \   \               \  /\
#\/    __ /__  __\   \ __ /__  __\   \ __  __  __    \/__\
#/   /\                                           \   \  /\ 
#   /  \ __  __  __  __  __  __  __  __  __  __  __\   \/__\
#  /   /                                           /   /\  /
# /   /            __  __  __      __      __     /   /__\/
# \  /           /\           \  /\   \  /\   \  /   /\  /
#  \/__  __  __ /  \     __    \/  \   \/  \   \/   /__\/
#              /    \   \  /\   \   \   \   \   \   \  /\
#\ __  __     /      \   \/__\   \   \   \   \   \   \/__\
#/\  /\  /\   \       \           \   \   \   \   \   \  /\
#__\/__\/__\   \       \     __    \   \   \   \   \   \/__\
#       \  /\   \       \   \  /\   \   \   \   \   \   \  /\
#        \/__\   \       \   \/__\   \   \ __\   \   \   \/__\
#         \  /\   \       \           \  /   /    \   \   \  /\  
#          \/__\   \       \     __    \/   /      \   \   \/__\
#           \  /\   \       \   \  /\   \  /\       \   \   \  /\
#            \/__\   \       \   \/  \   \/  \       \   \   \/__\
#             \  /\   \       \   \   \   \   \       \   \   \  /\
#              \/__\   \       \ __\   \ __\   \       \ __\   \/__\
#               \  /\   \      /   /   /   /    \      /   /   /\  /
#                \/__\   \    /   /   /   /      \    /   /   /__\/
#                 \  /\   \  /   /\  /   /   /\   \  /   /   /\  /
#                  \/__\   \/__ /  \/__ /   /__\   \/__ /   /__\/
#                   \  /\                  /\  /\          /\  /
#                    \/__\ __  __  __  __ /__\/__\ __  __ /__\/
#                     \  /\  /\  /\  /\  /\  /\  /\  /\  /\  /
#                      \/__\/__\/__\/__\/__\/  \/__\/__\/__\/
# Form coils in a matrix, 089 前 mae, before
################################################################
# Given a positive integer n that represents dimensions of a
# 4n x 4n matrix with values from 1 to 4*n*4*n filled from left
# to right and top to bottom. Your task is to form two coils
# from matrix and print the coils.
# Follow the given examples for better understanding.
################################################################
# Input: n = 1
# Output:
# 10 6 2 3 4 8 12 16
#
# 7 11 15 14 13 9 5 1 
# Explanation: The matrix is 
# 1  2  3  4
# 5  6  7  8
# 9  10 11 12
# 13 14 15 16
################################################################
# Input: n = 2             # [ i ][ j ]
# Output:                  # [ - ][ + ]
# 36 28 20 21 22 30 38 46  #
# 54 53 52 51 50 42 34 26  # DOWN [ i ][ + ]
# 18 10 2 3 4 5 6 7 8      # RTYE [ j ][ + ]
# 16 24 32 40 48 56 64     # UP   [ i ][ - ]
#                          # LEFT [ j ][ - ]
# 29 37 45 44 43 35 27 19  #
# 11 12 13 14 15 23 31 39  #
# 47 55 63 62 61 60 59 58  #
# 57 49 41 33 25 17 9 1    # 
# Explanation:             #
#      0     1     2     3     4     5     6     7
# 0 [  1 ]   2     3     4     5     6     7     8  
# 1 [  9 ]  10  [ 11 ][ 12 ][ 13 ][ 14 ][ 15 ]  16  
# 2 [ 17 ]  18  [ 19 ]  20    21    22  [ 23 ]  24  
# 3 [ 25 ]  26  [ 27 ]  28  [ 29 ]  30  [ 31 ]  32  
# 4 [ 33 ]  34  [ 35 ]  36  [ 37 ]  38  [ 39 ]  40  
# 5 [ 41 ]  42  [ 43 ][ 44 ][ 45 ]  46  [ 47 ]  48  
# 6 [ 49 ]  50    51    52    53    54  [ 55 ]  56  
# 7 [ 57 ][ 58 ][ 59 ][ 60 ][ 61 ][ 62 ][ 63 ]  64  
################################################################
# Expected Time Complexity: O(n^2)
# Expected Auxiliary Space: O(n^2)
################################################################
# 1 <= n <= 20
################################################################
################################################################
#### Die horizontale Armhaltung der grauen Figur gibt das
#### Erreichen der Vertikalseite eines vorstellbaren, ..
################################################################
#### haltung - position
#### grau - grey
#### geben - give
#### erreichen - reach
#### vorstellen - introduce
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
# stk, coord, mat
################################################################
# f( proj, inc, n ): ___________________________________________
# __ while( n ): _______________________________________________
# __ __ coord[ proj ] += inc ___________________________________
# __ __ stk.push( mat[ coord[ X ]][ coord[ Y ]]) _______________
# __ __ n -= 1 _________________________________________________
################################################################
I, J = 0, 1
PLUS, MINS = 1, -1
################################################################
stk = []
coord = [ 0, 0 ]
mat = []
###############################################################_
def consmat( n ):
    mat[:] = []
    siz = 4 * n
    for i in range( 1, siz * siz + 1, siz ):
        mat.append( list( range( i, i + siz )))
################################################################
def f( proj, inc, n ):
    while n:
        coord[ proj ] += inc
        stk.append( mat[ coord[ I ]][ coord[ J ]])
        n -= 1
###############################################################.
def g( proj, inc, n ):
    if inc == PLUS:
        coord[ I ] = -1
        coord[ J ] = 0
    else:
        coord[ I ] = n
        coord[ J ] = n - 1
    f( proj, inc, n )
    proj = 1 - proj
    while True:
        n -= 2
        if n <= 0: break
        f( proj, inc, n )
        f( 1 - proj, ~inc + 1, n )
        n -= 2
        if n <= 0: break
        f( proj, ~inc + 1, n )
        f( 1 - proj, inc, n )
################################################################
################################################################
## Let's go inside.
## naka ni hairi mashoo
## なか｜に｜入り｜ましょう。
################################################################
################################################################
## I'm going to leave at one o'clock.
## watashi wa ichi ji ni de masu
## わたし｜は｜一｜じ｜に｜出｜ます。
################################################################
################################################################
################################################################
################################################################
################################################################
class Solution:
    """ I'm happy that I have finished my fyorst German book,
    namely German for Beginners from Angela Wilkes, it has great
    illustrations and was fun to read, thanks:)
    """
    def formCoils( self, n ):
        consmat( n )
        n = len( mat )
        In, Yn = [], []
        g( I, PLUS, n )
        while stk: Yn.append( stk.pop() )
        g( I, MINS, n )
        while stk: In.append( stk.pop() )
        return In, Yn
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
if __name__=='__main__': #######################################
    t=int(input()) #############################################
    for _ in range(t): #########################################
        n=int(input()) #########################################
        ob=Solution() ##########################################
        ptr=ob.formCoils(n) ####################################
        for i in range(2): #####################################
            print(*ptr[i]) #####################################
################################################################
################################################################
################################################################
################################################################
####  6. Takeshi san wa Sakura daigaku no gakusee desu ka
####     たけしさんは｜さくらだいかくの｜がくせいですか。
####     hai soo desu
####     はい、そうです。
####  7. Meari san wa Rondon daigaku no gakusee desu ka
####     メアリさんは｜ロンドンだいがくの｜がくせいですか。
####     iie Rondon daigaku no gakusee ja nai desu Arizona
####     daigaku no gakusee desu
####     いいえ、ロンドンだいがくの｜がくせいじゃないです｜
####     アリゾナだいがくの｜がくせいです。
####  8. Takeshi san wa ninensee desu ka
####     たけしさんは｜にねんせいですか。
####     iie ninensee ja nai desu yonensee desu
####     いいえ、にねんせいじゃないです｜よねんせいです。
####  9. Suu san wa ichinensee desu ka
####     スーさんは｜いちねんせいですか。
####     iie ichinensee ja nai desu sannensee desu
####     いいえ、いちねんせいじゃないです｜さんねんせいです。
#### 10. Robaato san wa yonensee desu ka
####     ロバートさんは｜よねんせいですか。
####     hai soo desu
####     はい、そうです。
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
# Test Cases Passed:                                   111 / 111
# Total Points Scored:                                     4 / 4
# Your Total Score:                                         1646
# Total Time Taken:                                         0.23
# prev:                                                     null
# logbook:     When you say that the In and Jan principle is the
#  harmony between good and bad, you put bad alongside good with
#   the same value and significance, like if we remove the human
#     from the Earth, because there will be no one to poison the
#   rivers, to cut forests, to fill oceans with garbage, to burn
#   and destroy, the planet will collapse, because there will be
#     no bad in this World to keep the balance??? This World and
# anything else doesn't need bad for its existence. Good and bad
#  are not opposites, the harmony between opposites is good, and
#  everything else is bad. You can say, wait but bad exist right?
# The harmony between contrasts builds the whole stable, the bad
#    falls apart, this is the In Jan principle. Unfortunately in
# this society, no one cares what is good or bad, the only thing
#                       they care about is how do they löøk like.
