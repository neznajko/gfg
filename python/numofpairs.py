##################||||||||||||||||||| |||||||||||||||||||||||||#
##################||||||||||||||||||| |||||||||||||||||||||||||#
##################||||||   |||||||||| |||||||||||||||||||||||||#
##################|||||     ||||||||| |||||||||||||||||||||||||#
##################||||        ||||||| |||||||||||||||||||||||||#
##################||||         |||||| |||||||||||||||||||||||||#
##################|||@        @@@@@@@ @@@@@@@@@@@@@@@@@@@@@||||#
##################|||@@       @@@@@@@ @@@@@@@@@@@@@@@@@@@@@||||#
##################|||@@       @@@@@@@ @@@@@@@@@@@@@@@ @@@@@||||#
##################| |@@       ||||||| @@@@|||||||||||||@@@@||||#
##################  |@@       ||||       @||||||||  |||@@@@||||#
################   ||@@@      ||                  |||||@@@@||||#
#### ########      ||@@@     |||               ||||||||@@@@||||#
#####            #|||@@@     ||||||         |||||||||||@@@@||||#
#######         ##|||@@@     |||||||||@@@@|||||||||||||@@@@||||#
##########    ####|||@@@     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@||||#
##################|||@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@||||#
##################|||@@    @  @@@@@@@@@@@@@@@@@@@@@ @@@@@@@||||#
##################|||@    |||   ||||||@@@@|||||||||||||@@@@||||#
####### ##########|||   @|||||     |||@@@@|||||||||||||@@@@||||#
##################|   @@@||||||        @@@||||||| |||||@@@@||||#
########  #######  ||@@@@||||||||                ||||||@@@@||||#
############   ###|||@@@@|||||||||||           ||||||||@@@@||||#
##################|||@@@@|||||||||||||@@    |||||||||||@@@@||||#
##################|||@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@||||#
##################|||@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@||||#
##################|||@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@||||#
##################|||||||||||||||||||||||| ||||||||||||||||||||#
##################|||||||||||||||||||||||| ||||||||||||||||||||#
#「畑」に過去の静けさが残った。На [полето] остана тишината на миналото
################################################################
# Number of pairs
################################################################
# Given two positive integer arrays arr and brr, find the number
# o f pairs such that x^y > y^x (raised to power of) where x i s
# an element from arr and y is an element from brr.
################################################################
# Input: arr[] = [2, 1, 6], brr[] = [1, 5]
# Output: 3
# Explanation: T h e pairs which follow x^y > y^x are: 2^1 > 1^2,
# 2^5 > 5^2 and 6^1 > 1^6
################################################################
# Expected Time Complexity: O((N + M)log(N))
# Expected Auxiliary Space: O(1)
################################################################
# 1 ≤ arr.size(), brr.size() ≤ 10⁵
# 1 ≤ brr[i], arr[i] ≤ 10³
################################################################
################################################################
################################################################
################################################################
# Exercise 1.3.5. As in Example 1.3.7, let A ⊆ R be nonempty and
# b o u n d e d above, and let c ∈ R. This time define t h e set
# cA = {ca: a ∈ A}.
# (a) If c ≥ 0, show that sup cA = c sup A.
#
#     By d e f i n i t i o n s is a least upper bound f o r B if:
#       i) s is an upper bound for B
#       ii) if b is an upper bound for B, s ≤ b
#     So we have to prove that c sup A fulfills those conditions.
#     Coz a ≤ sup A for every a ∈ A, we'll have ca ≤ c sup A for
#     every ca ∈ cA. Now let b i s some upper bound for cA, then
#     ca ≤ b, for all a ∈ A, from here we can see that b/c is an
#     upper b o u n d for A, and be coz sup A is the least upper
#     bound we s h o u l d have sup A ≤ b/c, that is c sup A ≤ b
#      
# (b) Postulate a similar type o f statement for sup(cA) for the
#     case c < 0.
#     
#     Here the minus sign will flip or mirror the range over the
#     zero point, so i f the set was bounded above after that it
#     will be bounded bellow with a greates lower bound equal to:
#     inf cA = c sup A
################################################################
################################################################
################################################################
################################################################
#
#  1: 0.00 We are given two arrays A and B, and want to find all
#  2: 0.50 pairs x ∈ A, y ∈ B: x^y > y^x. I t is guaranteed that 
#  3: 0.52 x and y a r e positive integers, so it's safe to take 
#  4: 0.50 the logarithms o n both sides: ylogx > xlogy, that is 
#  5: 0.46 to rewrite t h e condition as: logx/x > logy/y. T h e 
#  6: 0.43 function f(x) := logx/x has maximum at x e q u a l to
#  7: 0.40 e = 2.71828..., and then decreasing, the first couple 
#  8: 0.37 values of f(x) are given on the left. Here we can see
#  9: 0.35 that f(x) > f(y) for all y > x, when x ≥ 3. So we can
# 10: 0.33 sort B and u s e binary search t o find the number of
# 11: 0.31 elements greater then x etc.
#
################################################################
################################################################
################################################################
################################################################
def ones_and_twos( b ):
    b.append( 0 )
    j = 0
    numof_ones = 0
    numof_twos = 0
    while b[j] == 1:
        numof_ones += 1
        j += 1
    while b[j] == 2:
        numof_twos += 1
        j += 1
    b.pop()
    return numof_ones, numof_twos
################################################################
################################################################
################################################################
# 1. お父さんは今日に何をしましたか。
#    家でテレビを見ました。
################################################################
# 2. お母さんは今日に何をしましたか。
#    友だちとデパートへ行きましに。
################################################################
# 3. メアリーさんとお父さんはあした何をしますか。
#    テニスをします。
################################################################
################################################################
################################################################
def upper_bound( b, key ):
    l, u = 0, len( b ) - 1
    while l <= u:
        m = ( l + u ) // 2
        if b[ m ] <= key:
            l = m + 1
        else:
            u = m - 1
    return l
################################################################
################################################################
################################################################
################################################################
class Solution:
    def countPairs( self, a, b ):
        b.sort()
        numof_ones, numof_twos = ones_and_twos( b )
        numof_pairs = 0
        for x in a:
            if x == 1: continue
            numof_pairs += numof_ones
            if x == 2: x = 4
            if x == 3: numof_pairs += numof_twos
            numof_pairs += len( b ) - upper_bound( b, x )
        return numof_pairs
################################################################
################################################################
################################################################
################################################################
if __name__=='__main__':########################################
    t=int(input())##############################################
    for i in range(t):##########################################
        a=list(map(int,input().strip().split()))################
        b=list(map(int,input().strip().split()))################
        ob=Solution()###########################################
        print(ob.countPairs(a,b))###############################
################################################################
################################################################
################################################################
################################################################
# Test Cases Passed:                                 1115 / 1115
# Points Scored:                                           4 / 4
# Your Total Score:                                         1914 
# Time Taken:                                               1.03
