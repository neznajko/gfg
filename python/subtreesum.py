########################################################
########################################################
########################################################
#####________________||||||||||||||||###################
#####_______________  |||||||||||||||###################
#####_______________  |||||||||||||||###################
#####___                          |||###################
#####_______________  |||||||||||||||###################
#####_____________      |||||||||||||###################
#####___________  __  ||  |||||||||||###################
#####/////////  ////  ====  =========###################
#####///////  //////  ======  =======###################
#####/////  ////////  ========  =====###################
#####///  //////////  ==========  ===###################
#####///////////////  ===============###################
#####///////////////  ===============###################
#####////////////////================###################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
#///                        #///
#//                         #//                       き
#/                          #/ 
########################################################
########################################################
########################################################
########################################################
# Count Number of SubTrees having given Sum
########################################################
########################################################
# Given a binary tree and an integer X. Your task is to
# complete the function countSubtreesWithSumX() that returns 
# the count of the number of subtress having total node’s
# data sum equal to the value X.
########################################################
########################################################
# Input: 5            : Output: 2
#       / \           , Explanation: Subtrees with sum 7
#      /   \          : are [9, 8, -10] and [7]
#    -10    3         ;
#    9  8 -4 7, X = 7 :
########################################################
########################################################
# Expected Time Complexity: O(N)
# Expected Auxiliary Space: O(Height of the Tree)
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
#######################################################_
glob = { "c": None, "w": None }
def countSubtreesWithSumX( root, w ):
    glob["c"] = 0
    glob["w"] = w
    dfs( root )
    return glob["c"]
    ####################################################
    ####################################################
    ####################################################
    ####################################################
def dfs( root ):
    if not root: return 0
    s = root.data + dfs( root.left ) + dfs( root.right )
    if s == glob["w"]: glob["c"] += 1
    return s
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
from collections import deque
########################################################
class Node:#############################################
    def __init__(self,val):#############################
        self.right=None#################################
        self.data=val###################################
        self.left=None##################################
########################################################
def buildTree(s):#######################################
    if(len(s)==0 or s[0]=="N"):#########################
        return None#####################################
    ip=list(map(str,s.split()))#########################
    root=Node(int(ip[0]))###############################
    size=0##############################################
    q=deque()###########################################
    q.append(root)######################################
    size=size+1#########################################
    i=1#################################################
    while(size>0 and i<len(ip)):########################
        currNode=q[0]###################################
        q.popleft()#####################################
        size=size-1#####################################
        currVal=ip[i]###################################
        if(currVal!="N"):###############################
            currNode.left=Node(int(currVal))############
            q.append(currNode.left)#####################
            size=size+1#################################
        i=i+1###########################################
        if(i>=len(ip)):#################################
            break#######################################
        currVal=ip[i]###################################
        if(currVal!="N"):###############################
            currNode.right=Node(int(currVal))###########
            q.append(currNode.right)####################
            size=size+1#################################
        i=i+1###########################################
    return root#########################################
########################################################    
if __name__=="__main__":################################
    t=int(input())######################################
    for _ in range(0,t):################################
        s=input()#######################################
        root=buildTree(s)###############################
        x=int(input())##################################
        print(countSubtreesWithSumX(root,x))############
########################################################        
# Test Cases Passed:                         1115 / 1115
# Total Points Scored:                             4 / 4
# Your Total Score:                                 1242
# Total Time Taken:                                 2.12
