##############################\ 
##############################\\
##############################\\\
##############################\\\\
##############################\\\\\
############                   \\\\\
############       ##########   \\\\\
############       ##########    \\\\\
############       ##########     \\\\\
############       ##########    \ \\\\\
############       ##########    \\ \\\\\
############                     \\\ \\\\\
############       ##########    \\\\ \\\\\
############       ##########    \\\\\ \\\\\
############       ##########     \\\\  \\\\\
############       ##########    \ \\\   \\\\\
############       ##########    \\ \\    \\\\\
############                     \\\ \    \\\\\\
##############################\  \\\\     \\\\\\\
##############################\\ \\\\\    \\\\\\\\
##############################\\\ \\\\    \\\\\\\\\
##############################\\\\ \\\    \\\\\\\\\\
##############################\\\\\ \\    \\\\\\\\\\
##############################\\\\\\ \    \\\\\\\\\\
##############################\\\\\\\     \\\\\\\\\\
##############################\\\\\\\\    \\\\\\\\\\
##############################\\\\\\\\\   \\\\\\\\\\
##############################\\\\\\\\\\  \\\\\\\\\\
##############################\\\\\\\\\\\ \\\\\\\\\\
##############################\\\\\\\\\\\\\\\\\\\\\\
##############################\\\\\\\\\\\\\\\\\\\\\\
# 田（た）rice field          \\\\\\\\\\\\\\\\\\\\\\
############################## \\\\\\\\\\\\\\\\\\\\\ ###########
############################### \\\\\\\\\\\\\\\\\\\\ ###########
################################ \\\\\\\\\\\\\\\\\\\ ###########
################################# \\\\\\\\\\\\\\\\\\ ###########
## Inorder Traversal (Iterative)   \\\\\\\\\\\\\\\\\
################################### \\\\\\\\\\\\\\\\ ###########
## Given a binary tree. Find the ino \\\\\\\\\\\\\\\ the tree 
## without using recursion.           \\\\\\\\\\\\\\
###################################### \\\\\\\\\\\\\ ###########
## Input: 1                             \\\\\\\\\\\\
##       / \                             \\\\\\\\\\\
##      2   3                             \\\\\\\\\\
##     /     \                             \\\\\\\\\
##    4       5, Output: 4 2 1 3 5          \\\\\\\\
## Explanation: ...                          \\\\\\\
############################################# \\\\\\ ###########
## Expected time complexity: O(N)              \\\\\
## Expected auxiliary space: O(N)               \\\\
################################################ \\\ ###########
## 1 <= Number of nodes <= 10^5                   \\
## 1 <= Data of a node <= 10^5                     \
###################################################  ###########
#################################################### ###########
################################################################
################################################################
## sein to be sein to be sein to be sein to be sein to be sein t
## ich  bin   I    am ich     bin   I    am Ich     bin   I    ao
## du   bist  you  are   du   bist  you  are   du   bist  you  am
## er/sie/es  ist  he/she/it  is er/sie/es  ist     he/she/it  ir b
## wir  sind  we   are   wir  sind  we   are   wir  sind  we   ase e
## ihr  seid  you  are   ihr  seid  you  are   ihr  seid  you  ar
## Sie  sind  you  are   Sie  sind  you  are   Sie  sind  you  are
## sie  sind  they are   sie  sind  they are   sie  sind  they are
################################################################re
################################################################ e
################################################################
################################################################
## W         en    
## Pi      hnserk      
##  rr    ion    u
##   o  zei       nder
##    port         dung  Menschen   .
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
class Solution:
################################################################
######################/+-P = P.LEFT-+###########################
######################/v############|/STK.PUSH P################
######---> STK=[] ---> P = NULL? ---+/NOP#######################
##########/P=ROOT##YEP/|##/^####################################
######################/V##/|####YEF#############################
####################/STK.EMPTY?----> EXIT#######################
##################/NOP/|##/|####################################
######################/V##/+--------+###########################
##########VIZIT P <----P = STK.POP##|###########################
######################/P = P.RYTE---+###########################
################################################################
    def inOrder( self, root ):
        stk = []
        res = []
        p = root
        while True:
            while p:
                stk.append( p )
                p = p.left;
            if not stk: break
            p = stk.pop()
            res.append( p.data )
            p = p.right
        return res
################################################################
################################################################
################################################################
################################################################
##１．おとうさんは　かいしゃいんですか。
##　　はい、そうです。
##２．オとうさんは　なんさいですか。
##　　よんじゅうはっさいです。
##３．おかあさんは　せんせいですか。
##　　いいえ、しゅふです。
##４．おかあさんは　なんさいですか。
##　　よんじゅごさいです。
##５．おにいさんは　かいしゃいんですか。
##　　いいえ、だいがくいんせいです。
##６．おにいさんは　なんさいですか。
##　　にじゅうさんさいです。
##７．いもうとは　だいがくせいですか。
##　　いいえ、こうこうせいです。
##８．いもうとは　はｈさいですか。
##　　じゅうろくです。
################################################################
################################################################
################################################################
from collections import deque###################################
################################################################
class Node:#####################################################
    def __init__(self, val):####################################
        self.right = None#######################################
        self.data = val#########################################
        self.left = None########################################
def buildTree(s):###############################################
    if(len(s)==0 or s[0]=="N"):#################################
        return None#############################################
    ip=list(map(str,s.split()))#################################
    root=Node(int(ip[0]))#######################################
    size=0######################################################
    q=deque()###################################################
    q.append(root)##############################################
    size=size+1#################################################
    i=1#########################################################
    while(size>0 and i<len(ip)):################################
        currNode=q[0]###########################################
        q.popleft()#############################################
        size=size-1#############################################
        currVal=ip[i]###########################################
        if(currVal!="N"):#######################################
            currNode.left=Node(int(currVal))####################
            q.append(currNode.left)#############################
            size=size+1#########################################
        i=i+1###################################################
        if(i>=len(ip)):#########################################
            break###############################################
        currVal=ip[i]###########################################
        if(currVal!="N"):#######################################
            currNode.right=Node(int(currVal))###################
            q.append(currNode.right)############################
            size=size+1#########################################
        i=i+1###################################################
    return root#################################################
################################################################
if __name__=="__main__":########################################
    t=int(input())##############################################
    for _ in range(0,t):########################################
        s=input()###############################################
        root=buildTree(s)#######################################
        res = Solution().inOrder(root)##########################
        for i in range (len(res)):##############################
            print (res[i], end = " ")###########################
        print()#################################################
################################################################
# Test Cases Passed:                                     40 / 40
# Total Points Scored:                                     4 / 4
# Your Total Score:                                         1394
# Total Time Taken:                                         1.52
