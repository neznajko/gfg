pass####=======#########################################
########=======#########################################
########=======#########################################
########=======############   ##########################
########====                                 ###########
       #=======#########################################
       #=======#####                 ###################
 #########=====#####   ###########   ###################
 #########=====#####   ###########   ###################
 #########::::://///@@@/////////::@@@:::::::::::::::Capi
 #########::::://///@@@/////////::@@@::::::::::::::: lot
 #########::::://///@@@@@@@@@@@@@@@@@::::::::::::::::   
 #########:::::////////////@@@//::::::::::::::::::::: ::
 #######==::::://///@@@////@@@//::@@@:::::::::::::::::::
 #######==:::::////@@@  ///@@@//:::@@@::::::::::::::::::
    #:::::::::://@@@     //@@@//:::: @@@::::::::::::::::
    #::::::::::@@@        /@@@//:::::  @@@::::::::::::::
    #:::::::@@@/           @@@//::::::    @@@:::::::::::
    #::::::::   /           ////:::::::       ::::::::::
    #:::::::::   /           ///::::::::       :::::::::
    #::::::::::   /           //:::::::::       ::::::::
# Count Cyclic Paths, 京、キョウ｜ケイ
########################################################
# Given a triangular pyramid with its vertices marked as
# O, A, B and C and a number N, the task is to find the
# number of ways such that a person starting from the
# origin O initially, reaches back to the origin in N
# steps. In a single step, a person can go to any of its
# adjacent vertices. Since the answer may be big, return
# it modulo (10^9+7).
########################################################
########################################################
########################################################
########################################################
#####                        `##########################
#####                   O    ``#########################
#####                    `   ```########################
#####                  ```   ````#######################
#####                ` ` `   ````#######################
#####              `  `  `   ````#######################
#####            `   `   `   ````#######################
#####          `    `    `   ````#######################
#####        `     `     `   ````#######################
#####   B  `      `    C `   ````#######################
#####    `.` ` ` ` ` ` . `   ````#######################
#####      `.   `  . `       ````#######################
#####        `.A `           ````#######################
#####                        ````#######################
######```````````````````````````#######################
#######``````````````````````````#######################
########`````````````````````````#######################
#########````````````````````````#######################
# Input: N = 1 Output: 0 Explanation: The minimum length
# of a cyclic path is 2.
########################################################
# Input: N = 2 Output: 3 Explanation: The three paths 
# are: O-A-O, O-B-O, O-C-O
########################################################
# Expected Time Complexity: O(N)
# Expected Auxiliary Space: O(1)
########################################################
# 1 ≤ N ≤ 10^6
########################################################
########################################################
########################################################
### Das Verfahren des Vergleichs von ähnlich oder gleich
### THE M ETH O D OF  COMPARISON FRO SIMILAR O  R E QUAL
###               THE            M 
### langen Strecken ( .. ###############################
### TO REA ST R ECH      ###############################
### C   H                ####    ich lese        I read 
###                      ####     du liest     you read 
############################# er/sie liest  he/she reads  
#############################    wir lesen      we read
#############################    ihr lest      you read
#############################    Sie lesen     you read
#############################    sie lesen    they read
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
#         +-----------------O-----------------+         3^0
#   +-----A-----+     +-----B-----+     +-----C-----+   3^1
# +-O-+ +-B-+ +-C-+ +-O-+ +-A-+ +-C-+ +-F-+ +-A-+ +-B-+ 3^2
# A B C O A C O A B A B C O B C A B O A B C O B C O A C 3^3
#
# #P(n) - number of paths from level 0 to level n
# #O(n) - number of O's in level n
# #N(n) - number of non O's at level n
#
# #P(n) = #N(n-1) = 3^(n-1) - #O(n-1)
# #O(n) = #N(n-1), zo
# #P(n) = 3^(n-1) - #N(n-2)=3^(n-1)-3^(n-2)+ .. + (-1)^n
# #P(1) = 3^0 - 1 = 0
# #P(2) = 3^1 - 3^0 + 1 = 3
# #P(3) = 3^2 - 3^1 + 3^0 - 1 = 6
# #P(4) = 3^3 - 3^2 + 3^1 - 3^0 + 1 = 21
# #P(5) = 3^4 - 3^3 + 3^2 - 3^1 + 3^0 - 1 = 60
# -3^0 + -3^1 + -3^2 + -3^3 + -3^4 = S(5), where S(n) is
# the sum of a geometric progression with a = 1, r = -3:
# S(n) = a + ar + ar^2 + .. + a^(n-1) =
#      = a(r^(n-1) - 1)/(r-1) =
#      = 1 - 3^1 + 3^2 - 3^3 + .., zo
# #P(n) = abs( S(n) - 1 ), thus this problem can be 
# solved for O(1) time.
#######################################################_
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
#######- 大きい、おおきい, big
#######- やまだ｜さん｜の｜あし｜は｜大きい｜です。
#######- Mr. Yamada's feet are big.  
#######- a`shi, あし、foot, feet, leg
#######
#######= まい日、まいにち, day
#######= まい日｜ほん｜を｜よみます。
#######= I read a book every day.
#######= yo'mi`ma:su, よみます、read
#######
#######~ 日, sun
#######~ 日曜日｜に｜こうえん｜に｜いきます。
#######~ I'm going to the park on Sunday
#######~ 日曜日、にちようび、ni:chi"yo-o,bi, Sunday
#######~ こうえん、ko,o:e`n, park
#######~ いきます、i;ki"ma,su, going
########################################################
MOD = 1000000007                                    #
def sum( n ): return (1-(-3)**n)//4                  #
def q( n ): return abs( sum( n ) - 1 )%MOD            # 
          ##############################################
        ################################################
      ##################################################
    ####################################################
  ########## 1. A: ta-ke,shi sa:n wa do:ko de'su ka.
##########         たけし｜さん｜は｜どこ｜です｜か。
########           Vhere is Takeshi? 
######          B: a'so"ko de_su.                    
####               あそこ｜です。                      
##                 Over there.                      
          ##############################################
        ################################################
      ##################################################
    ####################################################
  ########## 2. A: su-u sa'n wa do>ko de\su ka.
##########         スー｜さん｜は｜どこ｜です｜か。
########           Vhere'z Suu ???
######          B: so:ko de=su.
####               そこ｜です。
##                 There.
          ##############################################
        ################################################
      ##################################################
    ####################################################
  ########## 3. A: ro,ba\a'to sa,n wa do:ko de`su ka.
##########         ロバート｜さん｜は｜どこ｜です｜か。
########           Vhere... iz... Robert??!
######          B: ko-ko de,su.
####               ここ｜です。
##                 Here.
          ##############################################
        ################################################
      ##################################################
    ####################################################
  ########## 4. A: to"i,re wa do/ko de,su ka.
##########         トイレ｜は｜どこ｜です｜か。
########           Whereisthetoilet?
######          B: a\so\ko de,su.
####               あそこ｜です。
##                 O v e r   t h e r e . 
          ##############################################
        ################################################
      ##################################################
    ####################################################
class Solution:
    def countPaths( self, n ):
        return q( n )
##################################### " " " " " " " " " 
###################################### " " " " " " " " "
####################################### " " " " " " " " 
######################################## " " " " " " " "
######################################### " " " " " " " 
########################################## " " " " " " "
if __name__=='__main__':   ################ """"""""""""
    t=int(input())          ################ """""""""""
    for _ in range(t):       ################ """"""""""
        N=int(input())        ################ """""""""
        ob=Solution()          ################ """"""""
        print(ob.countPaths(N)) ################ """""""
################################ ################ """"""
################################# ################ """""
################################## ################ """"
################################### ################ """
#################################### ################ ""
##################################### ################ "
###################################### ################ 
####################################### ################
######################################## ###############
######################################### ##############
# Test Cases Passed:                         1115 / 1115
# Total Points Scored:                                 4
# Your Total Score:                                 1494
# Total Time Taken:                                 0.21
