################################################################
################################################################
################################################################
# Paths from root with a specified sum
################################################################
# Given a Binary tree and a sum S, print all the paths, starting 
# from root, that sums upto the given sum. Path not necessarily 
# end on a leaf node
################################################################
################################################################
################################################################
################################################################
# Input: sum = 8  1  Output: 1 3 4
#                / \
#               /   \
#              /     \
#             20      3
#                    / \
#                   /   \
#                  4     15   
#                 / \   / \
#                6   7  8  9      
################################################################
# Input: sum = 38  10  Output: 10 28
#                 / \          10 13 15
#                /   \
#               /     \
#             28       13
#             /\       /\
#           14  N     N  15
#           / \         / \
#         21   22     23   24
################################################################
# Expected Time Complexity: O(N)
# Expected Space Complexity: O(N^2)
################################################################
################################################################
################################################################
################################################################
#     1 <= N <= 2*10^3
# -10^3 <= sum, Node.key <= 10^3
################################################################
################################################################
################################################################
################################################################
class Solution:
    def enter( self, node ):
        self.currnt_path.append( node.data )
        self.currnt_sum += node.data
    def exit( self, node ):
        self.currnt_path.pop()
        self.currnt_sum -= node.data
    def tscheck( self ):
        if self.currnt_sum == self.TARGET_SUM:
            self.all_paths.append( self.currnt_path[ :])
    def dfs( self, node ):
        if not node: return
        self.enter( node )
        self.tscheck()
        self.dfs( node.left )
        self.dfs( node.right )
        self.exit( node )
    def printPaths( self, root, sum ):
        self.TARGET_SUM = sum
        self.currnt_sum = 0
        self.currnt_path = []
        self.all_paths = []
        self.dfs( root )
        print( self.all_paths )
        return self.all_paths
################################################################
from collections import deque
################################################################
################################################################
################################################################
################################################################
class Node:#####################################################
    def __init__(self,val):#####################################
        self.right=None#########################################
        self.data=val###########################################
        self.left=None##########################################
################################################################
################################################################
################################################################
################################################################
def buildTree(s):###############################################
    if(len(s)==0 or s[0]=="N"):#################################
        return None#############################################
    ip=list(map(str,s.split()))#################################
    root=Node(int(ip[0]))#######################################
    size=0######################################################
    q=deque()###################################################
    q.append(root)##############################################
    size=size+1#################################################
    i=1#########################################################
    while(size>0 and i<len(ip)):################################
        currNode=q[0]###########################################
        q.popleft()#############################################
        size=size-1#############################################
        currVal=ip[i]###########################################
        if(currVal!="N"):#######################################
            currNode.left=Node(int(currVal))####################
            q.append(currNode.left)#############################
            size=size+1#########################################
        i=i+1###################################################
        if(i>=len(ip)):#########################################
            break###############################################
        currVal=ip[i]###########################################
        if(currVal!="N"):#######################################
            currNode.right=Node(int(currVal))###################
            q.append(currNode.right)############################
            size=size+1#########################################
        i=i+1###################################################
    return root#################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
if __name__=='__main__':########################################
    test_cases=int(input())#####################################
    for cases in range(test_cases):#############################
        sum=int(input())########################################
        s=input()###############################################
        root=buildTree(s)#######################################
        ob=Solution()###########################################
        ans=ob.printPaths(root,sum)#############################
        ans=sorted(ans)#########################################
        for i in range(len(ans)):###############################
            for j in range(len(ans[i])):########################
                print(ans[i][j],end=" ")########################
            print()#############################################
################################################################
################################################################
################################################################
################################################################
# Test Cases Passed:                                 1120 / 1120
# Points Scored:                                           4 / 4
# Your Total Score:                                         1862 
# Time Taken:                                         >     0.47
# 1.4.9: A body is movng towards a wall with velocity u at angle
# α. Ok what is the vlocity aftr it hits the wall              |
# if a) the wall's not moving at all b) it's mvng              |
# vith velocity w perpendicular to itself, and c)     >        |
# at angle β? ###################################   . u        |
#################################################     .        |
# a) v = u                                 « ####       .      |
#################################################         .    | 
# b) W - systm moving alongside the wall     ####          α.  |
#    O - orig non movng systm                ####  ___________.|
#                                            ####           β /|
# We can work out this problem geometrically ####            / |
# but the things are getting reealy messy in ####           /  |
# c) so it's better to work out the vlocitis ###           /   |
# as projections in x and y, let's define,   ####      <  /    |
# thus:   ^                                  ####      w /     |
#         |y Here the wall in O has velocity ####              |
#         |  (w,0) and the ball:             ###################
#         |  (-ucosα,-usinα)                 ###################
#         |  To get the velocity of the ball ###################
# <-------+  in W we have to add (-w,0), zo  ###################
# x          we get for the wall (0,0) and   ###################
# for the ball (-ucosα-w,-usinα), upon       ###################
# reflection the ball will change its x      ###################
# projection, that is (ucosα+w,-usinα), now  ###################
# thus is the velocity of the reflected ball ###################
# in W to get its value in O we have to add  ###################
# (w,0), that is υ = (ucosα+2w,-usinα) the   ###################
# siz of thus vektor iz v = √(υ∙υ) =         ###################
# √[(ucosα+2w)²+u²sin²α] = √[u²cos²α+4uwcosα+4w²+u²sin²α] = ####
# = √(u²+4uwcosα+4w²)                      « ###################
################################################################
# c) thus is similar                         ###################
#    wall in O: (wcosβ,-wsinβ)               ###################
#    ball in O: (-ucosα,-usinα)              ###################
#    ball in W: (-ucosα-wcosβ,-usinα+wsinβ)  ###################
#    reflected in W: (ucosα+wcosβ,-usinα+wsinβ)   ##############
#    reflected in O: (ucosα+2wcosβ,-usinα)   ###################
#    siz: √[(ucosα+2wcosβ)²+u²sin²α] =       ###################
#    = √(u²+4uwcosαcosβ+4w²cos²β)                              «
#                                            ###################
#                                            ###################
#                                            ###################
################################################################
################################################################
################################################################
################################################################
