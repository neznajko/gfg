########################################################
########################################################
########################################################
########################################################
######~~~~~~~~~~~~~~~~~~~~~~~~######
######...                  ...######   .................
######-----------  -----------######           --
######///////////  ///////////######           //
######:::::              ;;;;;######     ;;;;;;;;;;;;;;
######__________  _____  _____######          __     __
################  #####  ###########          ##     ##
######==                    ==######  ==================
###### * * * * * * * * * * * *######
########################################################
########################################################
########################################################
########################################################
# Largest subtree sum in a tree
########################################################
# Given a binary tree. The task is to find subtree with 
# maximum sum in the tree and return its sum.
########################################################
# Expected Time Complexity: O(N)
# Expected Auxiliary Space: O(N)
########################################################
from math import inf
########################################################
class Solution:
    def findLargestSubtreeSum( self, root ):
        self.max_sum = -inf
        self.subsum( root )
        return self.max_sum
    def subsum( self, root ):
        if not root: return 0
        _sum = ( root.data +
                 self.subsum( root.left ) +
                 self.subsum( root.right ))
        if _sum > self.max_sum: self.max_sum = _sum
        return _sum        
########################################################
from collections import deque ##########################
########################################################
class Node: ############################################
    def __init__(self,val): ############################
        self.data=val ##################################
        self.right=None ################################
        self.left=None #################################
########################################################
def buildTree(s): ######################################
    if(len(s)==0 or s[0]=="N"): ########################
        return None ####################################
    ip=list(map(str,s.split())) ########################
    root=Node(int(ip[0])) ##############################
    size=0 #############################################
    q=deque() ##########################################
    q.append(root) #####################################
    size=size+1 ########################################
    i=1 ################################################
    while(size>0 and i<len(ip)): #######################
        currNode=q[0] ##################################
        q.popleft() ####################################
        size=size-1 ####################################
        currVal=ip[i] ##################################
        if(currVal!="N"): ##############################
            currNode.left=Node(int(currVal)) ###########
            q.append(currNode.left) ####################
            size=size+1 ################################
        i=i+1 ##########################################
        if(i>=len(ip)): ################################
            break ######################################
        currVal=ip[i] ##################################
        if(currVal!="N"): ##############################
            currNode.right=Node(int(currVal)) ##########
            q.append(currNode.right) ###################
            size=size+1 ################################
        i=i+1 ##########################################
    return root ########################################
########################################################
def inputTree(): #######################################
    treeString=input().strip() #########################
    root=buildTree(treeString) #########################
    return root ########################################
########################################################
def inorder(root): #####################################
    if (root==None): ###################################
       return ##########################################
    inorder(root.left) #################################
    print(root.data,end=" ") ###########################
    inorder(root.right) ################################
########################################################
if __name__=="__main__": ###############################
    t=int(input()) #####################################
    for _ in range(t): #################################
        root=inputTree() ###############################
        obj=Solution() #################################
        res=obj.findLargestSubtreeSum(root) ############
        print(res) #####################################
###############################################################
# じゅうにじはんです。じゅうにじはんです。じゅうにじはんです。#
###############################################################
# がくせうです。がくせうです。がくせうです。がくせうです。#####
###############################################################
# にほんごです。にほんごです。にほんごです。にほんごです。#####
###############################################################
# わたしはジミです。###########################################
###############################################################
# Test Cases Passed:                                  225 / 225
# Total Points Scored:                                    4 / 4
# Your Total Score:                                        1274
# Total Time Taken:                                         1.4
