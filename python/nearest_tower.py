########################################################
########################################################
####   +---+---+---\\\\\---+---+---#####---+---+---+---+
#### a |   |   |   \\\\\   |   |   #####   |   |   |   |
####   +---+---=====\\\\,,,,---+---/////####____////---+
#### b |   |   =====   ,,,,,   |   /////%%%%____////   |
####   +---xxxxx====///,,,,,||||====////%%%%____////---+
#### c |   xxxxx   /////   |||||====   |   |   /////   |
####   +---xxxxx###/////___|||||====---|||||---/////---+
#### d |   |   #####''''____   |   |   |||||   |   |   |
####   +---+---#####''''____---+---+---|||||---+---+---+
#### e |   |   ^^^^^   \\\\\   |   |   |||||   |   |   |
####   +---+---^^^^^===\\\\\---+---+---|||||---+---+---+
#### f |   |   `````========   |   |   |||||   |   |   |
####   +---+---`````===@@@@@---+---+---|||||---+---+---+
#### g |   |   ,,,,,   @@@@@   |   |   |||||   |   |   |
####   +---+---%%%%%---@@@@@---+---+---'''''---+---+---+
#### h |   |   %%%%%--------   |   |   '''''   |   |   |
####   +---+---%%%%%-----------+---xxxx'''''""""---+---+
#### i |   |   \\\\\   |   |   |   xxxxx   """""   |   |
####   +---+---'''''---|||||---+---xxxxx---"""""---+---+
#### j |   |   '''''   |||||   |   /////   '''''   |   |
####   +---+---""""/////|||\\\\\,,,/////---'''''>>>>---+
#### k |   |   """"/////   \\\\\,,,,   |   |   >>>>>   |
####   +---+-------/////---\\\\\,,,,---+---+--->>>>>---+
#### l |   |   -----   |   |   |   |   |   |   |   |   |
####   +---+-----------+---+---+---+---+---+---+---+---+
####     0   1   2   3   4   5   6   7   9   a   b   c
####   飲（のnoむmu）to drink
########################################################
# Nearest smaller tower
########################################################
# Given an array where each element (arr[i]) represents
# the height of the tower. Find for each tower, the
# nearest possible tower that is shorter than it. You
# can look left or right on both sides.
# Note: If two smaller towers are at the same distance,
# pick the smallest tower.
# If two towers have the same height then we choose the
# one with a smaller index.
########################################################
# Input: arr[] = {1,3,2} Output: {-1,0,0}
# Explanation: For 0th Index: no tower is smallest, so
# -1. For 1st Index: For 3, here 1 & 2 both are small &
# at a same distance, so we will pick 1, beacuse it has
# smallest value, so 0(Index) For 2nd Index: here 1 is
# smaller, so 0(Index) So the final output will be
# which consistes Indexes are {-1,0,0}.
########################################################
# Input: arr[] = {4,8,3,5,3} Output: {2,2,-1,2,-1}
# Explanation: ...
########################################################
# Expected Time Complexity: O(N)
# Expected Auxiliary Space: O(N) 
########################################################
# 1 <= N <= 10^5
# 1 <= arr[i] <= 10^5
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
####----////<<<<\\\\----,,,,####>>>>````////----<<<<....
# Sie beruhen auf der Feststellung der organischen  ....
####----////<<<<\\\\----,,,,####>>>>````////----<<<<....
# Gliederung der Figur. ,,,,####>>>>````////----<<<<....
####----////<<<<\\\\----,,,,####>>>>````////----<<<<....
########################################################
########################################################
########################################################
########################################################
# ----////<<<<                                  based on
# ----,,,,####>>>>                         firm position
# ####----////<<<<                             structure
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
# 1) das Zimmerr                          e) living room
# 2) das Badezimmer                              g) hall
# 3) das Esszimmer                           h) upstairs
# 4) das Schlafzimmer                            i) here
# 5) das Wohnzimmer                           f) kitchen
# 6) die Küche                                   a) room
# 7) der Flur                                b) bathroom
# 8) oben                                c) dinning room
# 9) hier                                     d) bedroom
########################################################
########################################################
########################################################
########################################################
########################################################
#######                 ################################
#######             #   ################################
#######             #   ################################
#######             #   ################################
#######       #     #   ################################
#######       # #   #   ################################
#######   #   # #   #   ################################
#######   #   # # # # # ################################
from math import inf# # ################################
####### # # # # # # # # ################################
####### 2 4 1 6 5 3 9 3 ################################
class Solution:
    def nearestSmallestTower( self, a ):
        stk = [( -inf, -inf )]
        left = []
        for j, v in enumerate( a ):
            while v <= stk[-1][VALU]:
                stk.pop()
            left.append( stk[-1][INDX] )
            stk.append(( j, v ))
        ryte = []
        stk[:] = [( -inf, -inf )]
        for j, v in reversed( list( enumerate( a ))):
            while v <= stk[-1][VALU]:
                stk.pop()
            ryte.append( stk[-1][INDX] )
            stk.append(( j, v ))
        ryte.reverse()
        res = []
        for k, ( i, j ) in enumerate( zip( left, ryte )):
            di = abs( k - i )
            dj = abs( j - k )
            if di == dj:
                if dj == inf:
                    res.append( -1 )
                else:
                    if a[i] <= a[j]:
                        res.append( i )
                    else:
                        res.append( j )
            else:
                if di < dj:
                    res.append( i )
                else:
                    res.append( j )
        return res
########################################################
########################################################
INDX,VALU = 0,1
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
if __name__=="__main__":################################
    for _ in range(int(input().strip())):###############
        N=int(input())##################################
        arr=[int(i) for i in input().strip().split()]###
        obj=Solution()##################################
        ans=obj.nearestSmallestTower(arr)###############
        for i in ans:###################################
            print(i,end=" ")############################
        print()#########################################
########################################################
#####################################################  c
##################################################### k
#####################################################  o
##################################################### a
#####################################################  r
##################################################### n
#####################################################  n
##################################################### j
#####################################################  e
##################################################### i
#####################################################  r
###############################|########################
#### 万 マmaンn #### 41        | 四十一
#### 万 マmaンn #### 300       | 三百
#### 万 まmaんn #### 1,500     | 千五百
#### 万 まmaんn #### 2,890     | 二千八百九十
#### 万 まmaんn #### 67,000    | 六万七千
#### 万 まmaんn #### 128,000   | 十二万八千
#### 万 まmaんn #### 1,000,000 | 百万
#### 10,000     ###############|########################
########################################################
########################################################
########################################################
########################################################
# 1. Are you a student?
#    かぐせいですか。
#    Yes, I am a student at Nihon University.
#    はい、わたしは　にほんだいがくの　がくせです。
########################################################
########################################################
########################################################
########################################################
# 2. Is Michiko a fourth-year student?
#    みちこさんは　よねんせいですか。
#    No, Michiko is a third-year student.
#    いいえ、みちこさんは　さんえんせいです。
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
# Test Cases Passed:                         1120 / 1120
# Total Points Scored:                             4 / 4
# Your Total Score:                                 1422
# Total Time Taken:                                 2.22
