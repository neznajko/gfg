####                    ----::::,,,,````,,,,####--      
                  ######################################
                  ######################################
                  ######################################
                  ######################################
                  ############  \######################-
                  ############  \######################-
                  ######                          \####-
                  ######                          \####-
                  ########  \##########################=
                  ########  \##########################=
                  ######  \###        \################=
                  ######  \###        \################=
                  ############  \\\\          \########_
                  ############  \\\\          \########_
                  ############  \\\\  ^^^^^^  \########_
                  ############  \\\\  ^^^^^^  \########_
                  ######                          \####.
                  ######                          \####.
                  ##########  ######  ||||  \##########.
                  ##########  ######  ||||  \##########.
                  ##########          ||||  \##########,
                  ##########          ||||  \##########,
                  ##################        \##########,
                  ##################        \##########,
                  ######################################
                  ######################################
                  ######################################
########################################################
# ZigZag Tree Traversal, 毎、maマiイ
########################################################
# Given a Binary Tree. Find the Zig-Zag Level Order 
# Traversal of the Binary Tree.
########################################################
# Input: 1      Output: 1 3 2 4 5 6 7
#       / \
#      /   \
#     2     3
#    /\    / \
#   4  5  6   7
########################################################
# Input: 7    Output: 7 7 9 8 8 6 9 10 
#       / \ 
#      /   \
#     9     7
#    / \   /   
#   8   8 6     
# 10 9
########################################################
# Expected Time Complexity: O(N)
# Expected Auxiliary Space: O(N)
########################################################
# 1 <= N <= 10^4
########################################################
#### < < < < < < < < < < < < < < < < < < < < < < < < < <
#### Aufschlüsse weitere gibt und Umrisses ihres Akzente
#### disclosure  further give and outline  her   accent
#### < < < < < < < < < < < < < < < < < < < < < < < < < < 
#### aufschlüsse weitere gibt wichtigsten ..
#### aufschlüsse              most import
#### aufschlüsse weitere      ant
#### aufschlüsse         gibt wichtig
####             weitere      
####                          wichtig
#################weitere#gibt#       ###################
#################       #    #wichtig###################
##############################       ###################
##############################wichtig###################
#########################gibt#       ###################
#########################    ###########################
########################################################
########################################################
########################################################
#### 1                                          1
#### 2 3                                    2       3
#### 4 5 6 7                              4   5   6   7
#### 8 9 a b c d e f                     8 9 a b c d e f
########################################################
########################################################
########################################################
########################################################
class Solution:
    def pop ( self, f ):
        node = f()
        self.ls.append( node.data )
        return node
    def popLeft( self ):
        return self.pop( self.deq.popleft )
    def popRyte( self ):
        return self.pop( self.deq.pop )
    def push( self, node, f ):
        if node: f( node )
    def pushRyte( self, node ):
        self.push( node, self.deq.append )
    def pushLeft( self, node ):
        self.push( node, self.deq.appendleft )
    def popLeftPushRyte( self, n ):
        for _ in range( n ):
            node = self.popLeft()
            self.pushRyte( node.left )
            self.pushRyte( node.right )
    def popRytePushLeft( self, n ):
        for _ in range( n ):
            node = self.popRyte()
            self.pushLeft( node.right )
            self.pushLeft( node.left )
    def zigZagTraversal( self, root ):
        self.deq = deque([ root ])
        switch = False
        self.ls = []
        f = self.popRytePushLeft, self.popLeftPushRyte
        while self.deq:
            switch = not switch   
            f[ switch ]( len( self.deq ))
        return self.ls
########################################################
########################################################
## straight n n     over there immediately        nearby
## gerade   e  n nn da drüben    g   leich in der Nähe
##  gerade  x e ne   da drüben g   l e ich  in der Nähe
## gerade   t bee e da drüben   gl e i c h   in der Nähe
## gerade      bbbb  da drüben     gleich  in der Náhe
##   gerade t eeeee da drüben  g l e i c h  in der Nähe
## gerade   o nnnnn  da drüben  g l e i ch   in der Nähe
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
from collections import deque ##########################
########################################################
class Node:#############################################
    def __init__(self,val):#############################
        self.data=val###################################
        self.left=None##################################
        self.right=None#################################
########################################################
def buildTree(s):#######################################
    if(len(s)==0 or s[0]=="N"):######################### 
        return None#####################################
    ip=list(map(str,s.split()))#########################
    root=Node(int(ip[0]))###############################
    size=0##############################################
    q=deque()###########################################
    q.append(root)######################################
    size=size+1#########################################
    i=1#################################################
    while(size>0 and i<len(ip)):########################
        currNode=q[0]###################################
        q.popleft()#####################################
        size=size-1#####################################
        currVal=ip[i]###################################
        if(currVal!="N"):###############################
            currNode.left=Node(int(currVal))############
            q.append(currNode.left)#####################
            size=size+1#################################
        i=i+1###########################################
        if(i>=len(ip)):#################################
            break#######################################
        currVal=ip[i]###################################
        if(currVal!="N"):###############################
            currNode.right=Node(int(currVal))###########
            q.append(currNode.right)####################
            size=size+1#################################
        i=i+1###########################################
    return root#########################################
########################################################
########################################################
# たんじょう日｜は｜いつ｜ですか｜。( v )
# 月曜日｜に｜日本｜いきます｜。( v )
# 毎日｜本｜を｜よみます｜。( v )
# 土曜日｜は｜わたし｜の｜たんじょ日｜です｜。( v )
# 一月｜は｜とても｜さむい｜です｜。( v )
# 日曜日｜に｜こうえん｜に｜いきます｜。( v )
########################################################
########################################################
########################################################
########################################################
if __name__=='__main__':################################
    t=int(input())######################################
    for _ in range(0,t):################################
        s=input()#######################################
        root=buildTree(s)###############################
        ob=Solution()###################################
        res=ob.zigZagTraversal(root)####################
        for i in range(len(res)):#######################
            print(res[i],end=" ")#######################
        print()#########################################
########################################################
########################################################
########################################################
### 1. にほんじんですか。
###    いいえ、にほんじんじゃないです。
### 2. にねんせいですか。 
###    いいえ、にねんせいじゃないです。
### 3. せんこうは　けいざいですか。
###    いいえ、せんこうは　けいざいじゃないです。
### 4. おかあさんは　にほんじんですか。
###    いいえ、にほんじんじゃないです。
### 5. おとうさんは　なんさいですか。 
###    わかりません。 
### 6. にほんごの　ほんは　いくらですか。
###    ￥１０００。
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
# Test Cases Passed:                           520 / 520
# Total Points Scored:                             4 / 4
# Your Total Score:                                 1538
# Total Time Taken:                                 0.87
