###############################################################_
# Minimize the Heights II 
###############################################################=
# Given an array arr[] denoting heights of N towers and a positive
# integer K. For each tower, you must perform exactly one of the
# following operations exactly once.
# _ Increase the height of the tower by K
# - Decrease the height of the tower by K
# Find out the minimum possible difference between the height of
# the shortest and tallest towers after you have modified each tower.
# Note: It is compulsory to increase or decrease the height by K
# for each tower. After the operation, the resultant array should
# not contain any negative integers.
################################################################
# Input: K = 2, N = 4, Arr[] = {1, 5, 8, 10}
# Output: 5
# Explanation: {1+k, 5-k, 8-k, 10-k} = {3, 3, 6, 8}
################################################################
# Input: K = 3, N = 5, Arr[] = {3, 9, 12, 16, 20}
# Output: 11
# Explanation: {3+k, 9+k, 12-k, 16-k, 20-k} = {6, 12, 9, 13, 17}
################################################################
# Expected Time Complexity: O( N logN )
# Expected Auxiliary Space: O( N      )
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
class Solution:                           # ____________________
    """"""                                # --------------------
    def getMinDiff( self, a, n, k ):      # ####################
        """"""                            # ==================== 
        a.sort()                          # --------------------
        max_ryte = a[ n - 1 ] - k         # ____________________
        min_left = a[     0 ] + k         # >>>>>>>>>>>>>>>>>>>>
        res = a[ n - 1 ] - a[ 0 ]         # ....................
        for j in reversed( range( 1, n )):# ********************
            ryte = a[ j     ] - k         # ````````````````````
            if ryte < 0: break            # > > > > > > > > > > >
            left = a[ j - 1 ] + k         # --------------------
            max_val = max( max_ryte, left ) ####################
            min_val = min( min_left, ryte ) ####################
            res = min( res, abs( max_val - min_val ))###########
        return res                        # ====================
                                          # ....................
###############################################################=
###############################################################_
###############################################################>
###############################################################:
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
if __name__=='__main__':########################################
    tc=int(input())#############################################
    while tc>0:#################################################
        k=int(input())##########################################
        n=int(input())##########################################
        arr=list(map(int,input().strip().split()))##############
        ob=Solution()###########################################
        ans=ob.getMinDiff(arr,n,k)##############################
        print(ans)##############################################
        tc-=1###################################################
################################################################
################################################################
################################################################
################################################################
# Test Cases Passed:                               34718 / 34718
# Total Points Scored:                                     4 / 4
# Your Total Score:                                         1214
# Total Time Taken:                                         1.34
