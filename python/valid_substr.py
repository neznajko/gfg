#| | |   | | |   ||    |   |||||||||||||||||||||||||||||   |||||
#| | |   | | |   ||    |   |||||||||||||||||||||||||||||   |||||
#| | |   | | |   ||    |   |||||||||||||||||||||||||||||   |||||
#| | |   | | |   ||    |   |||||||||||||||||||||||||||||   |||||
#| | |   | | |   ||    |   |||||||||||||||||||||||||||||   |||||
#| | |   | | |   ||    |   |||||||||||||||||||||||||||||   |||||
#| | |   | | |   ||    |   |||||||||||||||||||||||||||||   |||||
#| | |   | | |   ||    |   |||||||||||||||||||||||||||||   |||||
#| | |   | | |   ||    |   ||```````||||||||||||||||||||   |||||
#| | |   | | |   ||    |   ||`     `||||||||||||||||||||   |||||
#| | |   | | |   ||    |   ||`     `||||||||||||||||||||   |||||
#| | `   ` ` `   ``    `   `.`     `....................   `||||
#| | |                                                     `||||
#| | |                                                     `||||
#| | ,   , , ,      ,`,`   ,,,,,,,,,,,,,,,,,,      ,,,,` ` `||||
#| | |   | | `      `|||   |||||||||||||||||`      `|||| | |||||
#| | |   | | |,      ,||   ||||||||||||||||,      ,||||| | |||||
#| | |   | | |`      `||   ||||||||||||||||`      `||||| | |||||
#| | |   | | ||,      ,|   |||||||||||||||,      ,|||||| | |||||
#| | |   | | ||`      `|   |||||||||||||||`      `|||||| | |||||
#| | |   | | |||,      ,   ||||||||||||||,      ,||||||| | |||||
#| | |   | | |||`      `   ||||||||||||||`      `||||||| | |||||
#| | |   | | ||||,         |||||||||||||,      ,|||||||| | |||||
#| | `   ` ` `````         ,`,`,`,`,`,`,`      `.`.`.`.` ` `||||
#| | |                                                     `||||
#| | |                                                     `||||
#| | ` ` ` ` ``````    `   `.`.`.`.`.`.`.`.`.`.`.`.`.` `.` `||||
#| | | | | | ||||||    |   ||||||||||||||||||||||||||| ||| |||||
#| | | | | | ||||||    |   ||||| s | t |a| n |d||||||| ||| |||||
#| | | | | | ||||||    |   |||||   |   | |   | ||||||| ||| |||||
# Valid Substring, 立ち　たち
################################################################
# Given a string S consisting only of opening and closing
# parenthesis 'ie '('  and ')', find out the length of the
# longest valid( well-formed )parentheses substring
################################################################
# NOTE: Length of the smallest valid substring () is 2
################################################################
# Input: S = "(()("
# Output: 2
# Explanation: The longest valid substring is "()". Length = 2
################################################################
# Expected Time Complexity: O(n)
# Expected Auxiliary Space: O(1)   
################################################################
# 1 <= |S| <= 10^5
################################################################
########################################################## ()(()
################################################################
################################################################
# iThink iHave figured aNew solution, based on hashing. The idea
# is as follows: if ( is plus and ) is minus for aSequesnce like
# thus ()((()()(( ve'll have:
#          /        so ve must find such ( and ) that both start
# ..../\/\/...      and end on the same levl, and the distance 
#    /              between them is maximum, but is not enough
# /\/               cos ve might have not valid sequesce like 
# ()((()()((        thus ())(() so the graphic must no fall
# 01012323234 :levl bellow start and the end, that is ve must
#                   have only graphics like thus:
# 
#  /\/\                 /\                   /\      /\
# /    \, or     /\    /  \                 /  \    /  \
#           /\/\/  \/\/    \, but not this:     \  /
#                                                \/
#
# Ve can use hashing to record the levls. The meaning of the
# last line in the algorithm h[ levl + 1 ] = -1 is to prevent
# counting the latter scenario
################################################################

class Solution: # ()(()
    def findMaxLen( self, s ):
        n = len( s )
        h = [ -1 ] * ( 2 * n + 1 )
        levl = n
        ma8 = 0
        for j, c in enumerate( s ):
            if c == '(':
                if h[ levl ] < 0: h[ levl ] = j
                levl += 1
            else:
                levl -= 1
                if h[ levl ] >= 0:
                    ma8 = max( ma8, j - h[ levl ] + 1 )
                h[ levl + 1 ] = -1
        return ma8
    
################################################################
################################################################
################################################################
################################################################
if __name__ == '__main__': ##################################### 
    t = int (input ()) #########################################
    for _ in range (t): ########################################
        S = input() ############################################
        ob = Solution() ########################################
        print(ob.findMaxLen(S)) ################################
################################################################
################################################################
################################################################
################################################################
# 日本語｜が｜上手｜ですね。
# にほんご｜が｜じょうず｜ですね。
# Your Japanese is good isn't it?
################################################################
################################################################
################################################################
# まで until
# かかる take
# 東京｜まで｜３０｜分｜かからました。
# とうきょう｜まで｜３０｜ぷん｜かからました。
# It took 30 minutes to Tokyo.
################################################################
################################################################
################################################################
################################################################
# läuten                                                 to ring
# wählen                                                 to dial
# antworten                                            to answer
# hören                                                to listen
################################################################
################################################################
################################################################
################################################################
# Bienvenue !                                           Velcome!
# C'est en français !                         This is in French!
# Écoutez                                                 Listen
# Quelle                                                    What
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
# Test Cases Passed:                                   123 / 123
# Total Points Scored:                                     4 / 4
# Your Total Score:                                         1690
# Total Time Taken:                                         0.05
