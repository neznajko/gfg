#~~~~|############################################|~~~~#
#~~~~|############################################|~~~~#
#~~~~|############################################|~~~~#
#~~~~|############################################|~~~~#
#~~~~|############################################|~~~~#
#~~~~|############################################|~~~~#
#~~~~|#################          #################|~~~~#
#~~~~|#################          #################|~~~~#
#~~~~|#################          #################|~~~~#
#~~~~|#################          #################|~~~~#
#~~~~|################# e        #################|~~~~#
#~~~~|#######                              #######|~~~~#
#~~~~|################# a        #################|~~~~#
#~~~~|################# r        #################|~~~~#
#~~~~|################# t        #################|~~~~#
#~~~~|################# h        #################|~~~~#
#~~~~|#####                                  #####|~~~~#
#~~~~|############################################|~~~~#
#~~~~|############################################|~~~~#
#~~~~|############################################|~~~~#
#~~~~|##`.`.`.####################################|~~~~#
#~~~~|##`.do`.####################################|~~~~#
#~~~~|##`.`.`.####################################|~~~~#
#~~~~|############################################|~~~~#
#~~~~|############################################|~~~~#
#######################################################_
# ÂúüÔºà„ÉâÔºâüöÄ
# Magzimum Value
########################################################
# Given a binary tree, find the largest value in each level.
########################################################
# Input: 4     Output: 4 9 7
#       / \
#      9   2
#     / \   \
#    3   5   7 
# Explanation: ...
########################################################
# Expected Time Complexity: O(N)
# Expected Auxiliary Space: O(H)
#######################################################=
from collections import deque ##########################
########################################################
class Node: ############################################
    def __init__(self, val): ###########################
        self.right = None ##############################
        self.data = val ################################
        self.left = None ###############################
########################################################
def buildTree(s): ######################################
    if(len(s)==0 or s[0]=="N"): ########################
        return None ####################################
    ip=list(map(str,s.split())) ########################
    root=Node(int(ip[0])) ##############################
    size=0 #############################################
    q=deque() ##########################################
    q.append(root) #####################################
    size=size+1 ########################################
    i=1 ################################################
    while(size>0 and i<len(ip)): #######################
        currNode=q[0] ##################################
        q.popleft() ####################################
        size=size-1 ####################################
        currVal=ip[i] ##################################
        if(currVal!="N"): ##############################
            currNode.left=Node(int(currVal)) ###########
            q.append(currNode.left) ####################
            size=size+1 ################################
        i=i+1 ##########################################
        if(i>=len(ip)): ################################
            break ######################################
        currVal=ip[i] ##################################
        if(currVal!="N"): ##############################
            currNode.right=Node(int(currVal)) ##########
            q.append(currNode.right) ###################
            size=size+1 ################################
        i=i+1 ##########################################
    return root ########################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
#--------------------------------------- 5 -------------
#=============================== 1               2 =====
############################ 4       1       2       7 #
#@@@@@@@@@@@@@@@@@@@@@@@@@ N   2   3   N   N   N   N   8
#                          5 1 2 4 1 2 7 N 2 3 N N N N 8
########################################################
class Solution:
    def maximumValue( self, root ):
        deq = deque([ root ])
        ls = []
        while deq:
            n = len( deq )
            magz = 0
            for _ in range( n ):
                node = deq.popleft()
                magz = max( magz, node.data )
                if node.left: deq.append( node.left )
                if node.right: deq.append( node.right )
            ls.append( magz )
        return ls
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
#######################################################_
# 1. 41 ÂõõÂçÅ‰∏Ä
# 2. 300 ‰∏âÁôæ
# 3. 1,500 ÂçÉ‰∫îÁôæ
# 4. 2,890 ‰∫åÂçÉÂÖ´Áôæ‰πùÂçÅ
# 5. 67,000 ÂÖ≠‰∏á‰∏ÉÂçÉ
# 6. 128,000 ÂçÅ‰∫å‰∏áÂÖ´ÂçÉ
# 7. 1,000,000 Áôæ‰∏á
########################################################
########################################################
########################################################
########################################################
# 1.„Åä„Éº„Åë„Éº( okay )„Ç™„Éº„Ç±„Éº
# 2.„Åë„Éº„Åç( cake )„Ç±„Éº„Ç≠
# 3.„ÅÜ„Åà„ÅÇ( wear )„Ç¶„Ç®„Ç¢
# 4.„Åì„Éº„Åè( coke )„Ç≥„Éº„ÇØ
# 5.„Åç„ÅÜ„ÅÑ( kiwi )„Ç≠„Ç¶„Ç§
# 6.„Åì„Åì„ÅÇ( cocoa )„Ç≥„Ç≥„Ç¢
#######################################################=
########################################################
########################################################
########################################################
# „Çµ„ÄÄ„Çµ„ÄÄ„Çµ„ÄÄ„Çµ
# „Ç∑„ÄÄ„Ç∑„ÄÄ„Ç∑„ÄÄ„Ç∑
# „Çπ„ÄÄ„Çπ„ÄÄ„Çπ„ÄÄ„Çπ
# „Çª„ÄÄ„Çª„ÄÄ„Çª„ÄÄ„Çª
########################################################
########################################################
########################################################
########################################################
########################################################
if __name__=="__main__": ###############################
    t=int(input()) #####################################
    for _ in range(0,t): ###############################
        s=input() ######################################
        root=buildTree(s) ##############################
        obj=Solution() #################################
        ans=obj.maximumValue(root) #####################
        for i in ans: ##################################
            print(i,end=' ') ###########################
        print(); #######################################
########################################################
########################################################
########################################################
########################################################
# Test Cases Passed:                           150 / 150
# Total Points Scored:                             4 / 4
# Your Total Score:                                 1342
# Total Time Taken:                                 0.42
