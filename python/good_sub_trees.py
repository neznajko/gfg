###############################################################=
###############################################################=
###############################################################=
###############################################################=
###############################################################=
###############################################################=
###############################################################=
################=====##########################################=
###############=     =#########################################=
###############=    .=#########################################=
###############|    =##########################################=
##############=   ,=###########################################=
#############=`  ,= ==#########################################=
############=`  ,=#= `==#######################################=
###########=` ,=####=, `==#####################################=
#########=* _=#######==_  `==##################################=
########=`.=###########==,  `=#################################=
#########=###############====##################################=
###############################################################=
###############################################################=
###############################################################=
###############################################################=
###############################################################=
###############################################################=
###############################################################=
#=#==#=#=##=====================================================
# Good Subtrees
################################################################
################################################################
################################################################
################################################################
# You are given a root node of a binary Tree and each node of the
# binary tree is assigned a value and you are also given an integer
# k and you have to return the count of Good subtrees of this binary
# Tree. Good subtree is a subtree such that the number of distinct
# values in this subtree is less than or equal to k.
################################################################
# Note: Subtree of a node consists of that node and all nodes of
# the subtrees of left and right child  of that node  if they exist.
################################################################
# Input:      1         k = 2               
#        2         2
#     3     N   5     4
# Output: 4
# Explanation: We can see all leaves 3, 4, 5 form good subtrees as
# number of distinct values in subtrees is 1 which is less than k
# which is given as 2,now  subtree which starts at 2 and has 3 as
# left node  is also a good subtree because the count of distinct
# values is 2 which is equal to k so overall 4 good subtrees.
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
class Solution:
    def goodSubtrees( self, root, k ):
        self.k = k
        self.c = 0
        self.get_set( root )
        return self.c
    def get_set( self, root ):
        s = { root.data }
        if root.left:
            s.update( self.get_set( root.left ))
        if root.right:
            s.update( self.get_set( root.right ))
        if len( s ) <= self.k:
            self.c += 1
        return s
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
from collections import deque ##################################
################################################################
################################################################
################################################################
################################################################
class Node: ####################################################
    def __init__(self, val): ###################################
        self.right = None ######################################
        self.data = val ########################################
        self.left = None #######################################
################################################################
################################################################
################################################################
################################################################
def buildTree(s): ##############################################
    if(len(s)==0 or s[0]=="N"): ################################
        return None ############################################
    ip=list(map(str,s.split())) ################################
    root=Node(int(ip[0])) ######################################
    size=0 #####################################################
    q=deque() ##################################################
    q.append(root) #############################################
    size=size+1 ################################################
    i=1 ########################################################
    while(size>0 and i<len(ip)): ###############################
        currNode=q[0] ##########################################
        q.popleft() ############################################
        size=size-1 ############################################
        currVal=ip[i] ##########################################
        if(currVal!="N"): ######################################
            currNode.left=Node(int(currVal)) ###################
            q.append(currNode.left) ############################
            size=size+1 ########################################
        i=i+1 ##################################################
        if(i>=len(ip)): ########################################
            break ##############################################
        currVal=ip[i] ##########################################
        if(currVal!="N"): ######################################
            currNode.right=Node(int(currVal)) ##################
            q.append(currNode.right) ###########################
            size=size+1 ########################################
        i=i+1 ##################################################
    return root ################################################
################################################################
################################################################
################################################################
################################################################
if __name__ == '__main__': #####################################
    test_cases = int(input()) ##################################
    for _ in range (test_cases): ###############################
        s= input() #############################################
        root = buildTree(s) ####################################
        k=int(input()) #########################################
        res = Solution().goodSubtrees(root, k) #################
        print(res) #############################################
################################################################
################################################################
################################################################
###############################################################_
# 仕 shi 事 goto　しごと　しごと　しごと　しごと
# 医 i 者 sha いしゃ　いしゃ　いしゃ　いしゃ
# 会社 kaisha 員 in　かいしゃいん　かいしゃいん　かいしゃいん　かいしゃいん
# 高校 kookoo 生 sei　こいこいせい　こいこいせい　こいこいせい　こいこいせい
# 主 (shu) 婦 (fu) しゅふ　しゅふ　しゅふ　しゅふ
# 大学 daigaku 院 in 生 sei　だいがくいんせい　だいがくいんせい
# 弁 ben 護 go 士 shi　べんごし　べんごし　べんごし　べんごひ
################################################################
################################################################
################################################################
################################################################
# Test Cases Passed:                                 1025 / 1025
# Total Points Scored:                                     4 / 4
# Your Total Score:                                         1322
# Total Time Taken:                                         1.31
