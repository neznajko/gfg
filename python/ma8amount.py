####################============================########
####################============================########
####################============================########
####################============================########
#,',',',',',',',',',                            `,',',',
#,',',',',',',',',',                            `,',',',
#,',',',',',',',',',           .`.`.`           `,',',',
#,',',',',',@@@@',',           .   .`           `,',',',
#,',',',',',@@@@',', ,`,`,`,`,`,   .`.`,`,`,`,` `,',',',
#,',',',',',@@@@',', .                       .` `,',',',
#,',',',',',@@@@',', . , , , , , , , , , , , ,` `,',',',
#,','@@@@@@@@@@@@@@@@@@      .         .        `,',',',
#,','@@@@@@@@@@@@@@@@@@    .`,`.     .`.`.      `,',',',
#,',',',','@@@@@@,',     .`   `.`  .`   `.`.    `,',',',
#,',',',',@@@@@@@@',   .`    ,`.    `.    `.`.  `,',',',
#,',',','@@@@@@@@@@, .`       ',`. .`       `,' `,',',',
#,',',',@@@@@@@@@@@@  `. ,'.    ',`    ,'. .`   `,',',',
#,',','@@@@,@@@@'@@@@   `   `.       ,'   `     `,',',',
#,',',@@@@',@@@@',@@@@       .`     ',`.        ',',',',
#,','@@@@,',@@@@',',       .`    ,    ',`.      ',',',',
#,',',',',',@@@@',',     .`    ,' `.    ',`.    ',',',',
#,',',',',',@@@@',',    `.   ,'     `.   ,'     ',',',',
#,',',',',',@@@@',',      `.'         `.'       ',',',',
#,',',',',',',',',',                            `,',',',
#,',',',',',',',',',  e     x    a          m   `,',',',
########################################################
########################################################
########################################################
########################################################
# Max possible amount, 校、キョウ
########################################################
# Given a row of n coins of values arr[1], arr[2], ...
# arr[n], where n is even. Geek plays a game against an
# opponent by alternating turns. In each turn, a player
# selects either the first or last coin from the row,
# removes it from the row permanently, and receives the
# value of the coin. Determine the maximum possible
# amount geek can get if he moves first.
########################################################
# Note: Both of them play optimally
########################################################
# Input: N = 4, arr[] = {5, 3, 7, 10}
# Output: 15
# Explanation: 
# Geek chooses 10
# Opponent chooses 7
# Geek chooses 5
# Opponent chooses 3
########################################################
# Input: N = 4, arr[] = {8, 15, 3, 7}
# Output: 22
# Explanation: 
# Geek chooses 7
# Opponent chooses 8
# Geek chooses 15
# Opponent chooses 3
########################################################
# Expected Time Complexity: O(N^2)
# Expected Auxiliary Space: O(N^2)
########################################################
# 2 ≤ N ≤ 10^3
# 1 ≤ arr[i] ≤ 10^5
########################################################
# Im Unterschied zur Frau liegt sein Schambein bzw, großer
# Rollhügel etwas über der geometrischen Mitte, was seine
# Oberlänge verkürzt, die Unterlänge verlängert.
########################################################
# Diffference to lie PubicBone something center o   r shorten extend
# unterschied liegen schambein e t w a s mitte  bezie vrkürzn verlän  
# u n t e r s l i e  s c h a m e   t   w  mitte hungs vrkürzn   nreg
#   d e i h c  n e g   n i e b     s   a mitte  weise vrkürzn verlän
# unterschied liegen schambein e t w a s  mitte bezie vrkürzn  nr eg
# u n t e r s l i e  s c h a m e   t   w mitte  hungs vrkürzn verlän
#   d e i h c  n e g   n i e b     s   a  mitte weise vrkürzn nr e g
########################################################
########################################################
########################################################
########################################################
### g <- [[0]*n]*n ................................... 1
### f( i, j ): ....................................... 2
### -- if i = j: ret a[i] ............................ 3
### -- if g[i][j]: ret g[i][j] ....................... 4
### -- u <- a[i] - f(i+1,j) .......................... 5
### -- v <- a[j] - f(i,j-1) .......................... 6
### -- ret g[i][j] <- max( u, v ) .................... 7
########################################################
### [15, 18, 52, 42] [0, 1, 1, -1] (0,3) -1 a[0] 15
### [ 0, 33, 37,-27] [0, 0, 1,  1] (1,3) +1 a[3] 10
### [ 0,  0, 70, 60] [0, 0, 0, -1] (1,2) +1 a[2] 70
### [ 0,  0,  0, 10] [0, 0, 0,  0] (1,1) +1 a[1] 33
########################################################
### get_path:
### --- i, j <- 0, n - 1
### --- ls <- []
### --- while i <= j:
### --- ,,, if p[i][j] > 0:
### --- ,,, >>> ls.push( a[j] )
### --- ,,, >>> --j
### --- ,,, else:
### --- ,,, >>> ls.push( a[i] )
### --- ,,, >>> ++i
### --  return ls
########################################################
########################################################
########################################################
########################################################
#### excuse me                            entschuldigung
#### bitte schön                              not at all
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
class Solution:
    def get_path( self ):
        i, j = 0, self.n - 1
        ls = []
        while i <= j:
            if self.p[i][j] > 0:
                ls.append( self.a[j] )
                j -= 1
            else:
                ls.append( self.a[i] )
                i += 1
        return ls
    def f( self, i, j ):
        if self.g[i][j]: return self.g[i][j]
        u = self.a[i] - self.f( i+1, j )
        v = self.a[j] - self.f( i, j-1 )
        if u > v:
            ma8 = u
            self.p[i][j] = -1
        else:
            ma8 = v
            self.p[i][j] = 1
        self.g[i][j] = ma8
        return ma8
    def debug( self ):
        print( *self.g, sep='\n' )
        print( *self.p, sep='\n' )
    def diag( self ):
        def row( j ):
            w = [0] * self.n
            w[j] = self.a[j]
            return w
        return [ row( j ) for j in range( self.n )]
    def maxAmount( self, a, n ):
        self.a = a
        self.n = n
        self.g = self.diag()
        self.p = [[0]*n for _ in range( n )]
        self.f( 0, n-1 )
        return sum( self.get_path()[ ::2 ])
########################################################
########################################################
########################################################
########################################################
######
###### おちゃ｜を｜一つ｜ください｜。( cÖrrect )
###### やまだ｜さん｜の｜あし｜は｜大きい｜です｜。( còrrect )
###### すずき｜さん｜は｜いい｜人｜です｜。( côrrect )
###### まい年｜わたし｜は｜日本｜に｜いきます｜。( cröss )
###### 
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
if __name__=='__main__':################################
    T=int(input())######################################
    for i in range(T):##################################
        N=int(input())##################################
        Arr=[int(x) for x in input().split()]###########
        ob=Solution()###################################
        ans=ob.maxAmount(Arr,N)#########################
        print(ans)######################################
########################################################
########################################################
########################################################
#### a) (✕) Sukiyaki has fish in it.
#### b) (❍) Mary thinks sukiyaki is expensive. 
#### c) (❍) Both Takeshi and Mary ordered udon.
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
# Test Cases Passed:                           150 / 150
# Total Points Scored:                             4 / 4
# Your Total Score:                                 1534
# Total Time Taken:                                 0.66
