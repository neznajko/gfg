########    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
########    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
########    @@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
########    @@@@@88888     888888888-------------------@@@@@
########    @@@@@888         8888888-------------------@@@@@
########    @@@@@8         888888888-------------------@@@@@
########    @@@@         888                        ---@@@@@
########    @@         88888                        ---@@@@@
########    @@@@     8 8888888888888--------------- ---@@@@@
########    @@@@@8 888 888888              -------- ---@@@@@
########    @@@@@88888 888888              -------- ---@@@@@
########    @@@@@88888 888888 888888------ -------- ---@@@@@
########    @@@@@fffff ffffff ffffff////// //////// ///@@@@@
########    @@@@@fffff ffffff ffffff////// //////// ///@@@@@
########    @@@@@fffff ffffff              //////// ///@@@@@
########    @@@@@fffff ffffff              //////// ///@@@@@
########    @@@@@fffff ffffff ffffff//////////////  ///@@@@@
########    @@@@@fffff ffffff ffffff////            ///@@@@@
########    @@@@@fffff fffffffffffff////           ////@@@@@
########    @@@@@fffff fffffffffffff///////////////////@@@@@
########    @@@@@fffff fffffffffffff///////////////////@@@@@
########    @@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
########    @@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
########    @@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
########             w at
########
########
######## ### ### ### ### ### ### ### ### ### ### ### ### ###
######## ### ### ### ### ### ### ### ### ### ### ### ### ###
# Count Number of Nodes in a Binary Tree, 086 nani なに 何
############################################################
############################################################
############################################################
############################################################
# You are given the root of a complete binary tree. Your
# task is to find the count of nodes. A complete binary tree
# is a binary tree whose, all levels except the last one are
# completely filled, the last level may or may not be
# completely filled and Nodes in the last level are as left
# as # possible. Design an algorithm that runs better than
# O(n).
############################################################
############################################################
# Input: root = [1,2,3,4,5,6]
# Output: 6
# Explanation: There are a total of 6 nodes in the given
# tree.
############################################################
############################################################
# Expected Time Complexity: O((Log N)^2)
# Expected Auxiliary Space: O(Log N)
############################################################
# 0 <= N (number of nodes) <= 5*10^4
# 0 <= value of nodes <= 5*10^4
# The tree is guaranteed to be complete.
############################################################
###################################################1########
###############################################2       3####
#############################################4   5   6   7##
############################################8 9 a b c d e f#
############################################################
############################################################
####################1#######################################
##################2   3#####################################
#################4 5 6  ####################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
######################"#################"###################
# .. weitere Ordnungsmoglichkeiten der mannlichen Gestalt im
############################################################
# Zusammenhang m i t   i h r e r lebendigen, differenzierten
############################################################
#  E  r  s  c  h  e  i  n  u  n  g    a u f z u z e i g e n.
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
def GEtNfl( root ):
    """ get number of levels """
    n = 0
    while root:
        n += 1
        root = root.left
    return n
############################################################
############################################################
############################################################
############################################################
#### ano ki wa totemo ookii desu ne
#### あの｜木｜は｜とても｜大きい｜です｜ね 。
############################################################
############################################################
#### nichiyoobi ni kono hon wo kaimashita
#### 日曜日｜に｜この｜本｜を｜かいました 。
############################################################
###########################################################_
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
class Solution:
    def g( self, level, root ):
        if level == self.ma_level:
            if root: self.llC += 1
            else: raise Exception( "öK" )
        else:
            self.g( level + 1, root.left )
            self.g( level + 1, root.right )
    def countNodes( self, root ):
        if not root: return 0
        self.ma_level = GEtNfl( root ) # ma_imum level
        self.llC = 0 # last level counter
        try: self.g( 1, root )
        except Exception as e: pass
        return ( 1 << ( self.ma_level - 1 )) - 1 + self.llC
############################################################
############################################################
############################################################
#### der Frühling                                     spring
############################################################
#### der Herbst                                       autumn
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
from collections import deque ##############################
############################################################
############################################################
class Node: ################################################
    def __init__(self,val): ################################
        self.data=val ######################################
        self.left=None #####################################
        self.right=None ####################################
############################################################
############################################################
def constructTree(idx,arr): ################################
    if idx >= len(arr): ####################################
        return None ########################################
    root=Node(arr[idx]) ####################################
    root.left=constructTree(2*idx+1,arr) ###################
    root.right=constructTree(2*idx+2,arr) ##################
    return root ############################################
############################################################
############################################################
############################################################
############################################################
if __name__=='__main__': ###################################
    t=int(input()) #########################################
    for _ in range(t): #####################################
        n=int(input()) #####################################
        v=list(map(int,input().split())) ###################
        root=constructTree(0,v) ############################
        obj=Solution() #####################################
        print(obj.countNodes(root)) ########################
############################################################
############################################################
############################################################
############################################################
# meariisanwa ninenseidesu
# メアリーさんは｜にねんせいです。
# carurosusanmo ninenseidesu
# カルロスさんも｜にねんせいです。
############################################################
# konokabanwa gosenhappyakuendesu
# このかばんは｜ごせんはっぴゃくえんです。
# anokabanmo gosenhappyakuendesu
# あのかばんも｜ごせんはっぴゃくえんです。
############################################################
# takeshisanwa nijuunisaidesu
# たけしさんは｜にじゅうにさいです。
# robaatosanmo nijuunisaidesu
# ロバートさんも｜にじゅうにさいです。
############################################################
# seuruwa shichijidesu
# セウルは｜しちじです。
# tookyomo shichijidesu
# とうきょうも｜しちじです。
############################################################
# konowa yasaidesu
# このは｜やさいです。
# anomo yasaidesu
# あのも｜やさいです。
############################################################
# robaatosanwa rondondaigakuno gakuseedesu
# ロバートさんは｜ロンドンだいがくの｜がくせいです。
# nanjiisanmo rondondaigakuno gakuseedesu
# ナンジーさんも｜ロンドンだいがくの｜がくせいです。
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
############################################################
# Test Cases Passed:                             2530 / 2530
# Total Points Scored:                                 4 / 4
# Your Total Score:                                     1638
# Total Time Taken:                                      0.5
# UTF-8:                 God is 0xdead and Nietzsche is woke
