##########@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
############@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
##############@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
################@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
##################@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  ##############@@@@@@@@@@1@@@@@2@@@@@@@@@@@@@@@@@@@@@@@
    ##########@@@@@@@@@@@@   @@@   @@@@@@@@@@@@@@@@@@@@@
      ######@@@@@@@@@@@@@   @@@@@   @@@@@@@@@@@@@@@@@@@@
        ##@@@@@@@@@@@@@   @@@@@@@@@   @@@@@@@@@@@@@@@@@@
      ######@@@@@@@@   @@@@@4@@@@@@@@@   @@@@@@@@@@@@@@@
    ##########@@@@@@@@                 ::@@@@@@@@@@@@@@@
  ##############@@@@@@3@@@@@   @@@@@ xx::::@@@@@@@@@@@@@
##################@@@@@@@@@   @@@@@:xxx::::::@@@@@@@@@@@
  ##############@@@@@@@@@   @@@@@::xxx:::::::::@@@@@@@@@
    ##########@@@@@@@@   @@@@@@::xxx:::::::::::::@@@@@@@
      ######@@@@@@@@@@@@@@@@@@@@@::::::::::::::@@@@@@@@@
        ##@@@@@@@@@@@@@@@@@@@@@@@@@::::::::::@@@@@@@@@@@
      ######@@@@@@@@@@@@@@@@@@@@@@@@:::::::@:@@@@@@@@@@@
    ##########@@@@@@@@@@@@@@@@@@@@@@:@@::@:@:@@@@@@@@@@@
  ##############@@@@@@@@@@@@@@@@@@@@:@@:@@:@:@@@@@@@@@@@
##################@@@@@@@@@@@@@@@@@@:@@:@@:@:@@@@@@@@@@@
################@@@@@@@@@@@@@@@@@@@@:@@:@@:@:@@@@@@@@@@@
##############@@@@@@@@@@@@@@@@@@@@@@:@@:@@:@:@@@@@@@@@@@
############@@@@@@@@@@@@@@@@@@@@@@@@:@@:@@:@:@@@@@@@@@@@
##########@@@@@@@@@@@@@@@@@@@@@@@@@@:@@:@@:@:@@@@@@@@@@@
# Making A Large Island, 分、フン, fu-n、minute
########################################################
########################################################
# Daraus ergibt sich eine Proportionierungsregel
# ( Kanon ), wonach in unserem Beispiel der Kopf ein
# Achtel der Gesamtlänge beträgt.ispiel    regel
# Daraus ergibtnsich   unseremgBeispiel    regel
# Daraus ergibtnsich   unseremgBeispiel    regel
# Daraus erbigtnsich   unseremgexample     regel
# Daraus yieldonsich   unseremgt           regel
# Daraus     wonsich   ouretragt           regel
# Daraus     wonitse     beträgt           regel
# Daraus     wonlf       beträgt           regel
# Daraus     wonach      beträgt           regel
# Daraus     wonach      beträgt           rulef
# Daraus     whatmt      beträgt            Kopf
# from t     Gesamt      beträgt            head
# hat        Gesamt      is
#            Gesamt
#            Gesamt                                     
#            total                                      
#
##      #####      ######       ###########     ########
##      #####      ######       ###########     ########
##      #####      ######       ############    ########
##      #####      ######       ############    ########
##    # #####      ######  #############################
##   ########      #####################################
#############      #####################################
#############      #####################################
#############     ######################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
# You are given an nxn binary matrix grid. You are
# allowed to change at most one 0 to be 1. A group of
# connected 1s forms an island. Two 1s are connected if
# they share one of their sides with each other. Return
# the size of the largest island in the grid after
# applying this operation.
########################################################
########################################################
########################################################
########################################################
# Input: grid = [[1,0],[0,1]], Output: 3
# Explanation: Change any one 0 to 1 and connect two 1s,
# then we get an island with area = 3.
########################################################
# 1 <= n <= 500
########################################################
########################################################
########################################################
########################################################
########################################################
# kannst du mir .. reichen ---------- can you pass me ..
# das Wasser ------------------------------------- water
# das Glas --------------------------------------- glass
# möchten Sie --------------------------- would you like
# noch ..? ------------------------------- some more ..?
# das Fleisch ------------------------------------- meat
# das reicht --------------------------- I've had enough
# schmeckt's? ------------------------------ is it good?
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
class Solution:
    VOID = 0
    UNVZTED = 1
    VZTED = 2
    GARD = 3
    dR = ((-1,0),(0,1),(1,0),(0,-1))
    ####################################################
    def setup( self, grid ):
    ####################################################
        n = len( grid )+2
        def gard(): return n*[ Solution.GARD ]
        for row in grid:
            row.insert(0, Solution.GARD )
            row.append( Solution.GARD )
        grid.insert(0, gard())
        grid.append( gard())
        self.grid = grid
        self.cc = 0 # connected component
        self.siz = []
        self.nbor = [[ set() for _ in range( n )]
                     for _ in range( n )]
        self.total = set()
    ####################################################
    def debug( self ):
    ####################################################
        for row in self.grid:
            s = ""
            for c in row:
                s += str( c ).rjust(2,' ')
            print( s )
        print( "cc: ", self.cc )
        print( "siz: ", self.siz )
        print( *self.nbor, sep='\n' )
        print( self.total )
    ####################################################
    def explore( self, i, j ):
    ####################################################
        self.grid[i][j] = Solution.VZTED
        self.siz[ self.cc ] += 1
        for di, dj in Solution.dR:
            i1 = i+di
            j1 = j+dj
            v = self.grid[i1][j1]
            if v == Solution.VOID:
                self.nbor[i1][j1].add( self.cc )
                self.total.add( tuple( self.nbor[i1][j1]))
            elif v == Solution.UNVZTED:
                self.explore( i1, j1 )
    ####################################################
    def con( self ):
    ####################################################
        if not self.siz: return 1
        max_siz = self.siz[0]
        for nbors in self.total:
            siz = 1  
            for nbor in nbors:
                siz += self.siz[ nbor ]
            if max_siz < siz: max_siz = siz
        return max_siz
    ####################################################
    def largestIsland( self, grid ):
    ####################################################
        self.setup( grid )
        R = range( 1, len( self.grid )-1 )
        for i in R: 
            for j in R:
                if grid[i][j] == Solution.UNVZTED:
                    self.siz.append(0)
                    self.explore( i, j )
                    self.cc += 1
        return self.con()
########################################################
class IntMatrix:########################################
    def Input(self,n,m):################################
        matrix=[]#######################################
        for _ in range(n):##############################
            matrix.append([#############################
                int(i) for i in input().strip()#########
                                       .split()])#######
        return matrix###################################
    def Print(self,arr):################################
        for i in arr:###################################
            for j in i:#################################
                print(j,end=" ")########################
            print()#####################################
########################################################
if __name__=="__main__":################################
    t = int(input())####################################
    for _ in range(t):##################################
        n = int(input())################################
        grid=IntMatrix().Input(n,n)#####################
        obj = Solution()################################
        res = obj.largestIsland(grid)###################
        print(res)######################################
########################################################
########################################################
## Mary: Excuse me, how much is this?
## Vendor: It is 3,000 yen.
## Mary: It's expensive. Well then, how much is that
##       watch?
## Vendor: That is 3,500 yen.
## Mary: I see. That is expensive, too.
## Vendor: This is 1,800 yen.
## Mary: Than, I'll take that watch.
########################################################
########################################################
## メアリー: すみません、これは　いくらですか。
## みせのひと: それは　さんせんぇんです。
## メアリー: たかいですね。じゃあ、あのとけいは　いくらですか。
## みせのひと: あれは　さんせんごひゃくえんです。
## メアリー: そうですか。あれも　たかいですね。
## みせのひと: これは　せんひゃっぴゃくえんｄすよ。
## メアリー: じゃあ、そのとけいを　ください。
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
################################################### ####
################################################### ####
################################################### ####
################################################### ####
################################################### ####
################################################### ####
################################################### ####
# Test Cases Passed:                         1115 / 1115
# Total Points Scored:                             8 / 8
# Your Total Score:                                 1462
# Total Time Taken:                                 3.37
