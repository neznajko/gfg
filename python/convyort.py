#####################################@@@@@@@@@@@@@@@@@@@@@@@@@@@
#####################################@@@@@@@@@@@@@@@@@@@@@@@@@@@
#####################################@@@@@@@@@@@@@@@@@@@@@@@@@@@
########### /--------------   #######@@@@@@@@@@@@@@@@@@@@@@@@@@@
########## ////------------     #####@@@@@@@@@@@@@@@@@@@@@@@@@@@
######### /////###########     ######@@@@@@@@@@@@@@@@@@@@@@@@@@@
######## /////############     ######@@@@@@@@@@@@@@@@@@@@@@@@@@@
####### /////#### #######     #######@@@@@@@@@@@@@@@@@@@@@@@@@@@
###### /////#### /   ####     #######@@@@@@@@@@@@@@@@@@@@@@@@@@@
##### /////#### /////        ########@@@@@@@@@@@@@@@@@@@@@@@@@@@
###### ///#### /////////     ########@@@@@@@@@@@@@@@@@@@@@@@@@@@
####### /####     /////     #########@@@@@@@@@@@@@@@@@@@@@@@@@@@
################     //     #########@@@@@@@@@@@@@@@@@@@@@@@@@@@
####################  . . .                        @@@@@@@@@@@@@
###################   .    ||||||||||||||||||||||| @@@@@@@@@@@@@
################      .  ||||||||||||||||||||||||| @@@@@@@@@@@@@
#############         .||||///////////////////|||| @@@@@@@@@@@@@
##########            /||||                  /|||| @@@@@@@@@@@@@
###########     ###   /||||                  /|||| @@@@@@@@@@@@@
############ ######   /||||                  /|||| @@@@@@@@@@@@@
###################   /||||                  /|||| @@@@@@@@@@@@@
###################   /||||||||||||||||||||||||||| @@@@@@@@@@@@@
###################   /||||||||||||||||||||||||||| @@@@@@@@@@@@@
###################   //////////////////////////// @@@@@@@@@@@@@
###################                                @@@@@@@@@@@@@
#####################################@@@@@@@@@@@@@@@@@@@@@@@@@@@
#####################################@@@@@@@@@@@@@@@@@@@@@@@@@@@
# 090, 名 な name
################################################################
# Convert Level Order Traversal to BST
################################################################
# Given an array of size N containing level order traversal of a 
# BST. The task is to complete the function constructBst(), that 
# construct the BST (Binary Search Tree) from its given level 
# order traversal.
################################################################
# Expected Time Complexity: O(N)
# Expected Auxiliary Space: O(N)
################################################################
# 1 <= N <= 10^3
################################################################
################################################################
################################################################
################################################################
# Hervorhebung der halben Quadratlänge durch graue horizontale
# und vertikale Streifenmarkierung und der Körperviertel durch
# ausgezogene Horizontallinien.
################################################################
#### hervor - out      
#### hebung - raising ###                ########   ############
######################### halben - half  ########   ############
#########################                ########   ############
##### streifen    #######   #####################   ############
##### strip       #######   ###############                #####
#####             #######   ############### markierung     #####
#####             #######                                  #####
#####                       ############### mark           #####
#########################   ###############                #####
#########################   ####################################
#########################   ####################################
###########                       ##############################
########### ziehen - pull         ##############################
###########                       ##############################
################################################################
################################################################
def insert( root, key ):
    if not root: return Node( key )
    if key < root.data:
        root.left = insert( root.left, key )
    else:
        root.right = insert( root.right, key )
    return root
################################################################
################################################################
#############################[ Living Language Ultimate German ]
################################################################
#### 1. Monika ist in Berlin. (wir)
####    Wir sind in Berlin.
################################################################
#### 2. Die männer sind krank. (ich)
####    Ich bin krank.
################################################################
#### 3. Berlin ist interessant. (du)
####    Du bist interessant.
################################################################
#### 4. Wir sind in Amerika. (Sie)
####    Sie sind in Amerika.
################################################################
#### 5. Wo bist du? (er)
####    Wo ist er?
################################################################
################################################################
def constructBst( a, n ):
    root = Node( a[0] )
    for key in a[1:]:
        insert( root, key )
    return root 
################################################################
################################################################
################################################################
################################################################
####### Open your mouth please.
####### kuchi wo akete kudasai
####### 口　を　あけて　ください。
################################################################
################################################################
####### Please open the window.
####### mado wo akete kudasai
####### 窓｜を｜開けて｜ください。
################################################################
################################################################
####### Where is the exit?
####### deguchi wa doko desu ka
####### 出口｜は｜どこ｜ですか。
################################################################
################################################################
####### akete - open
####### あけて
####### mado - window :)
####### まど
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
################################################################
class Node: ####################################################
    def __init__(self,val): ####################################
        self.data=val ##########################################
        self.left=None #########################################
        self.right=None ########################################
################################################################
def preOrder(root): ############################################
    if root is None: return ####################################
    print(root.data,end=" ") ###################################
    preOrder(root.left) ########################################
    preOrder(root.right) #######################################
################################################################
def main(): ####################################################
    testcases=int(input()) #####################################
    while(testcases>0): ########################################
        root=None ##############################################
        sizeOfArray=int(input()) ###############################
        arr=[int(x) for x in input().strip().split()] ##########
        root=constructBst(arr,sizeOfArray) #####################
        preOrder(root) #########################################
        print() ################################################
        testcases-=1 ###########################################
################################################################
if __name__=="__main__": #######################################
    main() #####################################################
################################################################
################################################################
################################################################
################################################################
#### Wakarimashita ka - Do you understand?
#### わかりましたか。
#### Wakarimashita - I Understand
#### わかりました。
#### Wakarimasen - I don't understand
#### わかりません。
#### Yukkuri itte kudasai - Please say it slowly
#### ゆっくり　いってください。
#### Moo ichido itte kudasai - Please say it again
#### もういちど　いってください。
#### Chotto matte kudasai - Please wait
#### ちょっと　まってください。
#### Kitte kudasai - Please listen
#### きってください。
#### Juppeeji o mite kudasai - Please look at page 10
#### １０ページを　みてください。
################################################################
################################################################
################################################################
################################################################
# Test Cases Passed:                                   100 / 100
# Total Points Scored:                                     4 / 4
# Your Total Score:                                         1654
# Total Time Taken:                                         1.42
