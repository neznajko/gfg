////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
///////##################################################///////
//////####################################################//////
//////######################### ##########################//////
//////######0123456789abcdef0    56789abcdef##############//////
//////#####0###############       ##########0#############//////
//////#####1#############       ############1#############//////
//////#####2###########           ##########2#############//////
//////#####3#########       #       ########3#############//////
//////#####4#######       #####       ######4#############//////
//////#####5#####       #########       ####5#############//////
//////#####6###                           ##6#############//////
//////#####7#       #    #######    #       7#############//////
//////#####0##    ###               ###    #0#############//////
//////#####1### #####    #######    ##### ##1#############//////
//////#####2#########               ########2#############//////
//////#####3#########    ### ########   ####3#############//////
//////#####4#########    ##    ####   ######4#############//////
//////#####5#########    #       ###########5#############//////
//////#####6#########    ###       #########6#############//////
//////#####7#########    #####       #######7#############//////
//////######012345678    def0123       bcdef##############//////
//////###############       ######       #################//////
//////#################   ##########    ##################//////
//////################################ ###################//////
//////####################################################//////
///////##################################################///////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//// 食べる( to eat )
////////////////////////////////////////////////////////////////
// Longest K unique characters substring
////////////////////////////////////////////////////////////////
// Given a string you need to print the size of the longest 
// possible substring that has exactly K unique characters. If 
// there is no possible substring then print -1.
////////////////////////////////////////////////////////////////
// Input: S = "aabacbebebe", K = 3
// Output: 7
// Explanation: "cbebebe"
////////////////////////////////////////////////////////////////
// Expected Time Complexity: O(|S|)
// Expected Auxiliary Space: O(|S|)
////////////////////////////////////////////////////////////////
// 1 ≤ |S| ≤ 105
// 1 ≤ K ≤ 26
// All characters are lowercase latin characters.
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
namespace DriverCode{class GFG{static void Main(string[] args){
int testcases;testcases=Convert.ToInt32(Console.ReadLine());
while(testcases-->0){string elements=Console.ReadLine().Trim();
int t=elements.Length;int k=Convert.ToInt32(Console.ReadLine());
Solution obj=new Solution();int res=obj.longestKSubstr(elements,
k);Console.Write(res);Console.Write("\n");}}}}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//// Mary: Around nine.
//// メアリー： 九時ごろです。
//// Host Mother: How about dinner?
//// お母さん： 晩ご飯は？
//// Mary: I will not eat.
//// メアリー： 食べません。
//// Host Mother: I see. Well, have a nice day.
//// お母さん： 晩ご飯は？ そうですか。じゃあ、いってらっしゃい。
//// Mary: Good-bye.
//// メアリー：いってきます。
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//// ごろ( goro )
//// 晩ご飯( bangohan )
//// 食べる( to eat )
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
class Solution {
    const int ALPHABET_SIZE = 26;
    public int longestKSubstr( string s, int k ){
        int[] freq = new int[ ALPHABET_SIZE ];
        int i = 0; // a: 0 // e: 1
        int j = 0; // b: 1
        int n = 0; // c: 1
        int ma8 = -1;          //     i
        while( j < s.Length ){ // aabacbebebe,3 n/ma8: 3/5
            if( n <= k ){      //        j
                if( n == k ){
                    ma8 = Math.Max( ma8, j - i );
                }
                int off = s[j] - 'a';
                if( freq[ off ] == 0 ){
                    ++n;
                }
                ++freq[ off ];
                ++j;
            } else {
                int off = s[i] - 'a';
                --freq[ off ];
                if( freq[ off ] == 0 ){
                    --n;
                }
                ++i;
            }
        }
        if( n == k ){
            ma8 = Math.Max( ma8, j - i );
        }
        return ma8;
    }
}
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//// Der Umirß des 
//// aus grauen 
//// hauptformen                                           
//// bestehenden                                        existing
//// Figurenganzen                                  whole figure
//// repräsentiert
//// durchgehenden                                    continuous                      
//// Formzusammenhang                         form relationships
//// der für                                               
//// die Anlage                                           layout
//// def Figur                                                    
//// vordergründige                                   foreground
//// Aufgabe ist                                              
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Test Cases Passed:                                1111 / 1111
// Total Points Scored:                                    4 / 4
// Your Total Score:                                        1682
// Total Time Taken:                                        0.08
